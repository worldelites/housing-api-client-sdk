// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "housingApiServices";
}

(function(window, angular, undefined) {'use strict';

var urlBase = "/api";
var authHeader = 'authorization';

function getHost(url) {
  var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
  return m ? m[1] : null;
}

var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name housingApiServices
 * @module
 * @description
 *
 * The `housingApiServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("housingApiServices", ['ngResource']);

/**
 * @ngdoc object
 * @name housingApiServices.User
 * @header housingApiServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "User",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/users/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__findById__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__destroyById__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__updateById__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/accessTokens/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.likeApartments.findById() instead.
        "prototype$__findById__likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.likeApartments.destroyById() instead.
        "prototype$__destroyById__likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.likeApartments.updateById() instead.
        "prototype$__updateById__likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.likeApartments.link() instead.
        "prototype$__link__likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.likeApartments.unlink() instead.
        "prototype$__unlink__likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.likeApartments.exists() instead.
        "prototype$__exists__likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.couponApartments.findById() instead.
        "prototype$__findById__couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.couponApartments.destroyById() instead.
        "prototype$__destroyById__couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.couponApartments.updateById() instead.
        "prototype$__updateById__couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.couponApartments.link() instead.
        "prototype$__link__couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.couponApartments.unlink() instead.
        "prototype$__unlink__couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.couponApartments.exists() instead.
        "prototype$__exists__couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.visitApartments.findById() instead.
        "prototype$__findById__visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.visitApartments.destroyById() instead.
        "prototype$__destroyById__visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.visitApartments.updateById() instead.
        "prototype$__updateById__visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.visitApartments.link() instead.
        "prototype$__link__visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.visitApartments.unlink() instead.
        "prototype$__unlink__visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.visitApartments.exists() instead.
        "prototype$__exists__visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.redirectApartments.findById() instead.
        "prototype$__findById__redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.redirectApartments.destroyById() instead.
        "prototype$__destroyById__redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.redirectApartments.updateById() instead.
        "prototype$__updateById__redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.redirectApartments.link() instead.
        "prototype$__link__redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.redirectApartments.unlink() instead.
        "prototype$__unlink__redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.redirectApartments.exists() instead.
        "prototype$__exists__redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.manageProspectiveApartments.findById() instead.
        "prototype$__findById__manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.manageProspectiveApartments.destroyById() instead.
        "prototype$__destroyById__manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.manageProspectiveApartments.updateById() instead.
        "prototype$__updateById__manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.manageProspectiveApartments.link() instead.
        "prototype$__link__manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.manageProspectiveApartments.unlink() instead.
        "prototype$__unlink__manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.manageProspectiveApartments.exists() instead.
        "prototype$__exists__manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.roommateApartments.findById() instead.
        "prototype$__findById__roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.roommateApartments.destroyById() instead.
        "prototype$__destroyById__roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.roommateApartments.updateById() instead.
        "prototype$__updateById__roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.roommateApartments.link() instead.
        "prototype$__link__roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.roommateApartments.unlink() instead.
        "prototype$__unlink__roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.roommateApartments.exists() instead.
        "prototype$__exists__roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.applyFloorPlans.findById() instead.
        "prototype$__findById__applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.applyFloorPlans.destroyById() instead.
        "prototype$__destroyById__applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.applyFloorPlans.updateById() instead.
        "prototype$__updateById__applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.applyFloorPlans.link() instead.
        "prototype$__link__applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.applyFloorPlans.unlink() instead.
        "prototype$__unlink__applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.applyFloorPlans.exists() instead.
        "prototype$__exists__applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__get__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries accessTokens of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/users/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__create__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/users/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__delete__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/users/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$__count__accessTokens
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Counts accessTokens of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/users/:id/accessTokens/count",
          method: "GET"
        },

        // INTERNAL. Use User.likeApartments() instead.
        "prototype$__get__likeApartments": {
          isArray: true,
          url: urlBase + "/users/:id/likeApartments",
          method: "GET"
        },

        // INTERNAL. Use User.likeApartments.create() instead.
        "prototype$__create__likeApartments": {
          url: urlBase + "/users/:id/likeApartments",
          method: "POST"
        },

        // INTERNAL. Use User.likeApartments.destroyAll() instead.
        "prototype$__delete__likeApartments": {
          url: urlBase + "/users/:id/likeApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.likeApartments.count() instead.
        "prototype$__count__likeApartments": {
          url: urlBase + "/users/:id/likeApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.couponApartments() instead.
        "prototype$__get__couponApartments": {
          isArray: true,
          url: urlBase + "/users/:id/couponApartments",
          method: "GET"
        },

        // INTERNAL. Use User.couponApartments.create() instead.
        "prototype$__create__couponApartments": {
          url: urlBase + "/users/:id/couponApartments",
          method: "POST"
        },

        // INTERNAL. Use User.couponApartments.destroyAll() instead.
        "prototype$__delete__couponApartments": {
          url: urlBase + "/users/:id/couponApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.couponApartments.count() instead.
        "prototype$__count__couponApartments": {
          url: urlBase + "/users/:id/couponApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.visitApartments() instead.
        "prototype$__get__visitApartments": {
          isArray: true,
          url: urlBase + "/users/:id/visitApartments",
          method: "GET"
        },

        // INTERNAL. Use User.visitApartments.create() instead.
        "prototype$__create__visitApartments": {
          url: urlBase + "/users/:id/visitApartments",
          method: "POST"
        },

        // INTERNAL. Use User.visitApartments.destroyAll() instead.
        "prototype$__delete__visitApartments": {
          url: urlBase + "/users/:id/visitApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.visitApartments.count() instead.
        "prototype$__count__visitApartments": {
          url: urlBase + "/users/:id/visitApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.redirectApartments() instead.
        "prototype$__get__redirectApartments": {
          isArray: true,
          url: urlBase + "/users/:id/redirectApartments",
          method: "GET"
        },

        // INTERNAL. Use User.redirectApartments.create() instead.
        "prototype$__create__redirectApartments": {
          url: urlBase + "/users/:id/redirectApartments",
          method: "POST"
        },

        // INTERNAL. Use User.redirectApartments.destroyAll() instead.
        "prototype$__delete__redirectApartments": {
          url: urlBase + "/users/:id/redirectApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.redirectApartments.count() instead.
        "prototype$__count__redirectApartments": {
          url: urlBase + "/users/:id/redirectApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.manageProspectiveApartments() instead.
        "prototype$__get__manageProspectiveApartments": {
          isArray: true,
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "GET"
        },

        // INTERNAL. Use User.manageProspectiveApartments.create() instead.
        "prototype$__create__manageProspectiveApartments": {
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "POST"
        },

        // INTERNAL. Use User.manageProspectiveApartments.destroyAll() instead.
        "prototype$__delete__manageProspectiveApartments": {
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.manageProspectiveApartments.count() instead.
        "prototype$__count__manageProspectiveApartments": {
          url: urlBase + "/users/:id/manageProspectiveApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.roommateApartments() instead.
        "prototype$__get__roommateApartments": {
          isArray: true,
          url: urlBase + "/users/:id/roommateApartments",
          method: "GET"
        },

        // INTERNAL. Use User.roommateApartments.create() instead.
        "prototype$__create__roommateApartments": {
          url: urlBase + "/users/:id/roommateApartments",
          method: "POST"
        },

        // INTERNAL. Use User.roommateApartments.destroyAll() instead.
        "prototype$__delete__roommateApartments": {
          url: urlBase + "/users/:id/roommateApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.roommateApartments.count() instead.
        "prototype$__count__roommateApartments": {
          url: urlBase + "/users/:id/roommateApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.applyFloorPlans() instead.
        "prototype$__get__applyFloorPlans": {
          isArray: true,
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "GET"
        },

        // INTERNAL. Use User.applyFloorPlans.create() instead.
        "prototype$__create__applyFloorPlans": {
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "POST"
        },

        // INTERNAL. Use User.applyFloorPlans.destroyAll() instead.
        "prototype$__delete__applyFloorPlans": {
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use User.applyFloorPlans.count() instead.
        "prototype$__count__applyFloorPlans": {
          url: urlBase + "/users/:id/applyFloorPlans/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#create
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#createMany
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#upsert
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/users",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#exists
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/users/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#findById
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/users/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#find
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/users",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#findOne
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/users/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#updateAll
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/users/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#deleteById
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/users/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#count
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/users/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#prototype$updateAttributes
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/users/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#createChangeStream
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/users/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#login
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/users/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#logout
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Logout a user with access token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/users/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#confirm
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Confirm a user registration with email verification token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/users/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#resetPassword
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Reset password for a user with email.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/users/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#export
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `type` – `{string}` - the exported file type.
         *
         *  - `include` – `{*=}` - the list of ids that will be exported
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "export": {
          url: urlBase + "/users/export",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#changePassword
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - the user id
         *
         *  - `current` – `{string}` - the current password
         *
         *  - `new` – `{string}` - the new password
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "changePassword": {
          url: urlBase + "/users/:id/change-password",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#reVerify
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "reVerify": {
          url: urlBase + "/users/re-verify",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#sendEmail
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `to` – `{*}` - the emails to send to
         *
         *  - `subject` – `{string=}` - the subject of email
         *
         *  - `body` – `{string=}` - the body of email
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "sendEmail": {
          url: urlBase + "/users/sendEmail",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#passwordReset
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "passwordReset": {
          url: urlBase + "/users/reset-password",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#activateUser
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `id` – `{string}` - the user id
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "activateUser": {
          url: urlBase + "/users/activate",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#track
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `type` – `{string}` - the type of user action
         *
         *  - `userId` – `{string}` - the user id
         *
         *  - `apartmentId` – `{string}` - the apartment id
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "track": {
          url: urlBase + "/users/track",
          method: "POST"
        },

        // INTERNAL. Use Apartment.likeUsers.findById() instead.
        "::findById::apartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.likeUsers.destroyById() instead.
        "::destroyById::apartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.likeUsers.updateById() instead.
        "::updateById::apartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.likeUsers.link() instead.
        "::link::apartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.likeUsers.unlink() instead.
        "::unlink::apartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.likeUsers.exists() instead.
        "::exists::apartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.couponUsers.findById() instead.
        "::findById::apartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.couponUsers.destroyById() instead.
        "::destroyById::apartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.couponUsers.updateById() instead.
        "::updateById::apartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.couponUsers.link() instead.
        "::link::apartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.couponUsers.unlink() instead.
        "::unlink::apartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.couponUsers.exists() instead.
        "::exists::apartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.visitUsers.findById() instead.
        "::findById::apartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.visitUsers.destroyById() instead.
        "::destroyById::apartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.visitUsers.updateById() instead.
        "::updateById::apartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.visitUsers.link() instead.
        "::link::apartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.visitUsers.unlink() instead.
        "::unlink::apartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.visitUsers.exists() instead.
        "::exists::apartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.redirectUsers.findById() instead.
        "::findById::apartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.redirectUsers.destroyById() instead.
        "::destroyById::apartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.redirectUsers.updateById() instead.
        "::updateById::apartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.redirectUsers.link() instead.
        "::link::apartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.redirectUsers.unlink() instead.
        "::unlink::apartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.redirectUsers.exists() instead.
        "::exists::apartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.roommateUsers.findById() instead.
        "::findById::apartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.roommateUsers.destroyById() instead.
        "::destroyById::apartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.roommateUsers.updateById() instead.
        "::updateById::apartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.roommateUsers.link() instead.
        "::link::apartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.roommateUsers.unlink() instead.
        "::unlink::apartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.roommateUsers.exists() instead.
        "::exists::apartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.likeUsers() instead.
        "::get::apartment::likeUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.likeUsers.create() instead.
        "::create::apartment::likeUsers": {
          url: urlBase + "/apartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.likeUsers.createMany() instead.
        "::createMany::apartment::likeUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.likeUsers.destroyAll() instead.
        "::delete::apartment::likeUsers": {
          url: urlBase + "/apartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.likeUsers.count() instead.
        "::count::apartment::likeUsers": {
          url: urlBase + "/apartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.couponUsers() instead.
        "::get::apartment::couponUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.couponUsers.create() instead.
        "::create::apartment::couponUsers": {
          url: urlBase + "/apartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.couponUsers.createMany() instead.
        "::createMany::apartment::couponUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.couponUsers.destroyAll() instead.
        "::delete::apartment::couponUsers": {
          url: urlBase + "/apartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.couponUsers.count() instead.
        "::count::apartment::couponUsers": {
          url: urlBase + "/apartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.visitUsers() instead.
        "::get::apartment::visitUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.visitUsers.create() instead.
        "::create::apartment::visitUsers": {
          url: urlBase + "/apartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.visitUsers.createMany() instead.
        "::createMany::apartment::visitUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.visitUsers.destroyAll() instead.
        "::delete::apartment::visitUsers": {
          url: urlBase + "/apartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.visitUsers.count() instead.
        "::count::apartment::visitUsers": {
          url: urlBase + "/apartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.redirectUsers() instead.
        "::get::apartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.redirectUsers.create() instead.
        "::create::apartment::redirectUsers": {
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.redirectUsers.createMany() instead.
        "::createMany::apartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.redirectUsers.destroyAll() instead.
        "::delete::apartment::redirectUsers": {
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.redirectUsers.count() instead.
        "::count::apartment::redirectUsers": {
          url: urlBase + "/apartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.roommateUsers() instead.
        "::get::apartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.roommateUsers.create() instead.
        "::create::apartment::roommateUsers": {
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.roommateUsers.createMany() instead.
        "::createMany::apartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.roommateUsers.destroyAll() instead.
        "::delete::apartment::roommateUsers": {
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.roommateUsers.count() instead.
        "::count::apartment::roommateUsers": {
          url: urlBase + "/apartments/:id/roommateUsers/count",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.findById() instead.
        "::findById::floorPlan::floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyById() instead.
        "::destroyById::floorPlan::floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.updateById() instead.
        "::updateById::floorPlan::floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
          method: "PUT"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.link() instead.
        "::link::floorPlan::floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.unlink() instead.
        "::unlink::floorPlan::floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.exists() instead.
        "::exists::floorPlan::floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants() instead.
        "::get::floorPlan::floorPlanApplicants": {
          isArray: true,
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.create() instead.
        "::create::floorPlan::floorPlanApplicants": {
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "POST"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.createMany() instead.
        "::createMany::floorPlan::floorPlanApplicants": {
          isArray: true,
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "POST"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyAll() instead.
        "::delete::floorPlan::floorPlanApplicants": {
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "DELETE"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.count() instead.
        "::count::floorPlan::floorPlanApplicants": {
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/count",
          method: "GET"
        },

        // INTERNAL. Use VisitApartment.user() instead.
        "::get::visitApartment::user": {
          url: urlBase + "/visitApartments/:id/user",
          method: "GET"
        },

        // INTERNAL. Use RedirectApartment.user() instead.
        "::get::redirectApartment::user": {
          url: urlBase + "/redirectApartments/:id/user",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.findById() instead.
        "::findById::crawledApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.destroyById() instead.
        "::destroyById::crawledApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.updateById() instead.
        "::updateById::crawledApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.link() instead.
        "::link::crawledApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.unlink() instead.
        "::unlink::crawledApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.exists() instead.
        "::exists::crawledApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.findById() instead.
        "::findById::crawledApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.destroyById() instead.
        "::destroyById::crawledApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.updateById() instead.
        "::updateById::crawledApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.link() instead.
        "::link::crawledApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.unlink() instead.
        "::unlink::crawledApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.exists() instead.
        "::exists::crawledApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.findById() instead.
        "::findById::crawledApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.destroyById() instead.
        "::destroyById::crawledApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.updateById() instead.
        "::updateById::crawledApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.link() instead.
        "::link::crawledApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.unlink() instead.
        "::unlink::crawledApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.exists() instead.
        "::exists::crawledApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.findById() instead.
        "::findById::crawledApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.destroyById() instead.
        "::destroyById::crawledApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.updateById() instead.
        "::updateById::crawledApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.link() instead.
        "::link::crawledApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.unlink() instead.
        "::unlink::crawledApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.exists() instead.
        "::exists::crawledApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.findById() instead.
        "::findById::crawledApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.destroyById() instead.
        "::destroyById::crawledApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.updateById() instead.
        "::updateById::crawledApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.link() instead.
        "::link::crawledApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.unlink() instead.
        "::unlink::crawledApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.exists() instead.
        "::exists::crawledApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.likeUsers() instead.
        "::get::crawledApartment::likeUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.create() instead.
        "::create::crawledApartment::likeUsers": {
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.createMany() instead.
        "::createMany::crawledApartment::likeUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.destroyAll() instead.
        "::delete::crawledApartment::likeUsers": {
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.count() instead.
        "::count::crawledApartment::likeUsers": {
          url: urlBase + "/crawledApartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.couponUsers() instead.
        "::get::crawledApartment::couponUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.create() instead.
        "::create::crawledApartment::couponUsers": {
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.createMany() instead.
        "::createMany::crawledApartment::couponUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.destroyAll() instead.
        "::delete::crawledApartment::couponUsers": {
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.count() instead.
        "::count::crawledApartment::couponUsers": {
          url: urlBase + "/crawledApartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.visitUsers() instead.
        "::get::crawledApartment::visitUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.create() instead.
        "::create::crawledApartment::visitUsers": {
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.createMany() instead.
        "::createMany::crawledApartment::visitUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.destroyAll() instead.
        "::delete::crawledApartment::visitUsers": {
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.count() instead.
        "::count::crawledApartment::visitUsers": {
          url: urlBase + "/crawledApartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers() instead.
        "::get::crawledApartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.create() instead.
        "::create::crawledApartment::redirectUsers": {
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.createMany() instead.
        "::createMany::crawledApartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.destroyAll() instead.
        "::delete::crawledApartment::redirectUsers": {
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.count() instead.
        "::count::crawledApartment::redirectUsers": {
          url: urlBase + "/crawledApartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers() instead.
        "::get::crawledApartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.create() instead.
        "::create::crawledApartment::roommateUsers": {
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.createMany() instead.
        "::createMany::crawledApartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.destroyAll() instead.
        "::delete::crawledApartment::roommateUsers": {
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.count() instead.
        "::count::crawledApartment::roommateUsers": {
          url: urlBase + "/crawledApartments/:id/roommateUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.findById() instead.
        "::findById::submittedApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.destroyById() instead.
        "::destroyById::submittedApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.updateById() instead.
        "::updateById::submittedApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.link() instead.
        "::link::submittedApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.unlink() instead.
        "::unlink::submittedApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.exists() instead.
        "::exists::submittedApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.findById() instead.
        "::findById::submittedApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.destroyById() instead.
        "::destroyById::submittedApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.updateById() instead.
        "::updateById::submittedApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.link() instead.
        "::link::submittedApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.unlink() instead.
        "::unlink::submittedApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.exists() instead.
        "::exists::submittedApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.findById() instead.
        "::findById::submittedApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.destroyById() instead.
        "::destroyById::submittedApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.updateById() instead.
        "::updateById::submittedApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.link() instead.
        "::link::submittedApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.unlink() instead.
        "::unlink::submittedApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.exists() instead.
        "::exists::submittedApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.findById() instead.
        "::findById::submittedApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.destroyById() instead.
        "::destroyById::submittedApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.updateById() instead.
        "::updateById::submittedApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.link() instead.
        "::link::submittedApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.unlink() instead.
        "::unlink::submittedApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.exists() instead.
        "::exists::submittedApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.findById() instead.
        "::findById::submittedApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.destroyById() instead.
        "::destroyById::submittedApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.updateById() instead.
        "::updateById::submittedApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.link() instead.
        "::link::submittedApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.unlink() instead.
        "::unlink::submittedApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.exists() instead.
        "::exists::submittedApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers() instead.
        "::get::submittedApartment::likeUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.create() instead.
        "::create::submittedApartment::likeUsers": {
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.createMany() instead.
        "::createMany::submittedApartment::likeUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.destroyAll() instead.
        "::delete::submittedApartment::likeUsers": {
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.count() instead.
        "::count::submittedApartment::likeUsers": {
          url: urlBase + "/submittedApartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers() instead.
        "::get::submittedApartment::couponUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.create() instead.
        "::create::submittedApartment::couponUsers": {
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.createMany() instead.
        "::createMany::submittedApartment::couponUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.destroyAll() instead.
        "::delete::submittedApartment::couponUsers": {
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.count() instead.
        "::count::submittedApartment::couponUsers": {
          url: urlBase + "/submittedApartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers() instead.
        "::get::submittedApartment::visitUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.create() instead.
        "::create::submittedApartment::visitUsers": {
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.createMany() instead.
        "::createMany::submittedApartment::visitUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.destroyAll() instead.
        "::delete::submittedApartment::visitUsers": {
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.count() instead.
        "::count::submittedApartment::visitUsers": {
          url: urlBase + "/submittedApartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers() instead.
        "::get::submittedApartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.create() instead.
        "::create::submittedApartment::redirectUsers": {
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.createMany() instead.
        "::createMany::submittedApartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.destroyAll() instead.
        "::delete::submittedApartment::redirectUsers": {
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.count() instead.
        "::count::submittedApartment::redirectUsers": {
          url: urlBase + "/submittedApartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers() instead.
        "::get::submittedApartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.create() instead.
        "::create::submittedApartment::roommateUsers": {
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.createMany() instead.
        "::createMany::submittedApartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.destroyAll() instead.
        "::delete::submittedApartment::roommateUsers": {
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.count() instead.
        "::count::submittedApartment::roommateUsers": {
          url: urlBase + "/submittedApartments/:id/roommateUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.findById() instead.
        "::findById::prospectiveApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.destroyById() instead.
        "::destroyById::prospectiveApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.updateById() instead.
        "::updateById::prospectiveApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.link() instead.
        "::link::prospectiveApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.unlink() instead.
        "::unlink::prospectiveApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.exists() instead.
        "::exists::prospectiveApartment::likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.findById() instead.
        "::findById::prospectiveApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.destroyById() instead.
        "::destroyById::prospectiveApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.updateById() instead.
        "::updateById::prospectiveApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.link() instead.
        "::link::prospectiveApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.unlink() instead.
        "::unlink::prospectiveApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.exists() instead.
        "::exists::prospectiveApartment::couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.findById() instead.
        "::findById::prospectiveApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.destroyById() instead.
        "::destroyById::prospectiveApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.updateById() instead.
        "::updateById::prospectiveApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.link() instead.
        "::link::prospectiveApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.unlink() instead.
        "::unlink::prospectiveApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.exists() instead.
        "::exists::prospectiveApartment::visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.findById() instead.
        "::findById::prospectiveApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyById() instead.
        "::destroyById::prospectiveApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.updateById() instead.
        "::updateById::prospectiveApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.link() instead.
        "::link::prospectiveApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.unlink() instead.
        "::unlink::prospectiveApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.exists() instead.
        "::exists::prospectiveApartment::redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.findById() instead.
        "::findById::prospectiveApartment::manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.destroyById() instead.
        "::destroyById::prospectiveApartment::manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.updateById() instead.
        "::updateById::prospectiveApartment::manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.link() instead.
        "::link::prospectiveApartment::manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.unlink() instead.
        "::unlink::prospectiveApartment::manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.exists() instead.
        "::exists::prospectiveApartment::manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.findById() instead.
        "::findById::prospectiveApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyById() instead.
        "::destroyById::prospectiveApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.updateById() instead.
        "::updateById::prospectiveApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.link() instead.
        "::link::prospectiveApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.unlink() instead.
        "::unlink::prospectiveApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.exists() instead.
        "::exists::prospectiveApartment::roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers() instead.
        "::get::prospectiveApartment::likeUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.create() instead.
        "::create::prospectiveApartment::likeUsers": {
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.createMany() instead.
        "::createMany::prospectiveApartment::likeUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.destroyAll() instead.
        "::delete::prospectiveApartment::likeUsers": {
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.count() instead.
        "::count::prospectiveApartment::likeUsers": {
          url: urlBase + "/prospectiveApartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers() instead.
        "::get::prospectiveApartment::couponUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.create() instead.
        "::create::prospectiveApartment::couponUsers": {
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.createMany() instead.
        "::createMany::prospectiveApartment::couponUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.destroyAll() instead.
        "::delete::prospectiveApartment::couponUsers": {
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.count() instead.
        "::count::prospectiveApartment::couponUsers": {
          url: urlBase + "/prospectiveApartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers() instead.
        "::get::prospectiveApartment::visitUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.create() instead.
        "::create::prospectiveApartment::visitUsers": {
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.createMany() instead.
        "::createMany::prospectiveApartment::visitUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.destroyAll() instead.
        "::delete::prospectiveApartment::visitUsers": {
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.count() instead.
        "::count::prospectiveApartment::visitUsers": {
          url: urlBase + "/prospectiveApartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers() instead.
        "::get::prospectiveApartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.create() instead.
        "::create::prospectiveApartment::redirectUsers": {
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.createMany() instead.
        "::createMany::prospectiveApartment::redirectUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyAll() instead.
        "::delete::prospectiveApartment::redirectUsers": {
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.count() instead.
        "::count::prospectiveApartment::redirectUsers": {
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers() instead.
        "::get::prospectiveApartment::manageUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.create() instead.
        "::create::prospectiveApartment::manageUsers": {
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.createMany() instead.
        "::createMany::prospectiveApartment::manageUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.destroyAll() instead.
        "::delete::prospectiveApartment::manageUsers": {
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.count() instead.
        "::count::prospectiveApartment::manageUsers": {
          url: urlBase + "/prospectiveApartments/:id/manageUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers() instead.
        "::get::prospectiveApartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.create() instead.
        "::create::prospectiveApartment::roommateUsers": {
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.createMany() instead.
        "::createMany::prospectiveApartment::roommateUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyAll() instead.
        "::delete::prospectiveApartment::roommateUsers": {
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.count() instead.
        "::count::prospectiveApartment::roommateUsers": {
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ApplyForFloorPlan.user() instead.
        "::get::applyForFloorPlan::user": {
          url: urlBase + "/applyForFloorPlans/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.User#getCurrent
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/users" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.User#updateOrCreate
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.User#update
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.User#destroyById
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.User#removeById
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.User#getCachedCurrent
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link housingApiServices.User#login} or
         * {@link housingApiServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User#isAuthenticated
         * @methodOf housingApiServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User#getCurrentId
         * @methodOf housingApiServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name housingApiServices.User#modelName
    * @propertyOf housingApiServices.User
    * @description
    * The name of the model represented by this $resource,
    * i.e. `User`.
    */
    R.modelName = "User";

    /**
     * @ngdoc object
     * @name housingApiServices.User.likeApartments
     * @header housingApiServices.User.likeApartments
     * @object
     * @description
     *
     * The object `User.likeApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#likeApartments User.likeApartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#likeApartments
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries likeApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#count
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Counts likeApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likeApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#create
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Creates a new instance in likeApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#createMany
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Creates a new instance in likeApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#destroyAll
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Deletes all likeApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#destroyById
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Delete a related item by id for likeApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likeApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#exists
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Check the existence of likeApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likeApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#findById
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Find a related item by id for likeApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likeApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#link
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Add a related item by id for likeApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likeApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#unlink
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Remove the likeApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likeApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::user::likeApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.likeApartments#updateById
         * @methodOf housingApiServices.User.likeApartments
         *
         * @description
         *
         * Update a related item by id for likeApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for likeApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.likeApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::user::likeApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.couponApartments
     * @header housingApiServices.User.couponApartments
     * @object
     * @description
     *
     * The object `User.couponApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#couponApartments User.couponApartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#couponApartments
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries couponApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#count
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Counts couponApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.couponApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#create
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Creates a new instance in couponApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#createMany
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Creates a new instance in couponApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#destroyAll
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Deletes all couponApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#destroyById
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Delete a related item by id for couponApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for couponApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#exists
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Check the existence of couponApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for couponApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#findById
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Find a related item by id for couponApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for couponApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#link
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Add a related item by id for couponApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for couponApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#unlink
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Remove the couponApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for couponApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::user::couponApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.couponApartments#updateById
         * @methodOf housingApiServices.User.couponApartments
         *
         * @description
         *
         * Update a related item by id for couponApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for couponApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.couponApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::user::couponApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.visitApartments
     * @header housingApiServices.User.visitApartments
     * @object
     * @description
     *
     * The object `User.visitApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#visitApartments User.visitApartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#visitApartments
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries visitApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#count
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Counts visitApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.visitApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#create
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Creates a new instance in visitApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#createMany
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Creates a new instance in visitApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#destroyAll
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Deletes all visitApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#destroyById
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Delete a related item by id for visitApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for visitApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#exists
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Check the existence of visitApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for visitApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#findById
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Find a related item by id for visitApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for visitApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#link
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Add a related item by id for visitApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for visitApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#unlink
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Remove the visitApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for visitApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::user::visitApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.visitApartments#updateById
         * @methodOf housingApiServices.User.visitApartments
         *
         * @description
         *
         * Update a related item by id for visitApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for visitApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.visitApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::user::visitApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.redirectApartments
     * @header housingApiServices.User.redirectApartments
     * @object
     * @description
     *
     * The object `User.redirectApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#redirectApartments User.redirectApartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#redirectApartments
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries redirectApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#count
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Counts redirectApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.redirectApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#create
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Creates a new instance in redirectApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#createMany
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Creates a new instance in redirectApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#destroyAll
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Deletes all redirectApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#destroyById
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Delete a related item by id for redirectApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for redirectApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#exists
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Check the existence of redirectApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for redirectApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#findById
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Find a related item by id for redirectApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for redirectApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#link
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Add a related item by id for redirectApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for redirectApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#unlink
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Remove the redirectApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for redirectApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::user::redirectApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.redirectApartments#updateById
         * @methodOf housingApiServices.User.redirectApartments
         *
         * @description
         *
         * Update a related item by id for redirectApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for redirectApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.redirectApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::user::redirectApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.manageProspectiveApartments
     * @header housingApiServices.User.manageProspectiveApartments
     * @object
     * @description
     *
     * The object `User.manageProspectiveApartments` groups methods
     * manipulating `ProspectiveApartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#manageProspectiveApartments User.manageProspectiveApartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#manageProspectiveApartments
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries manageProspectiveApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::get::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#count
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Counts manageProspectiveApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.manageProspectiveApartments.count = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::count::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#create
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Creates a new instance in manageProspectiveApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments.create = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::create::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#createMany
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Creates a new instance in manageProspectiveApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments.createMany = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::createMany::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#destroyAll
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Deletes all manageProspectiveApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.manageProspectiveApartments.destroyAll = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::delete::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#destroyById
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Delete a related item by id for manageProspectiveApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.manageProspectiveApartments.destroyById = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::destroyById::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#exists
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Check the existence of manageProspectiveApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments.exists = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::exists::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#findById
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Find a related item by id for manageProspectiveApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments.findById = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::findById::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#link
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Add a related item by id for manageProspectiveApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments.link = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::link::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#unlink
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Remove the manageProspectiveApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.manageProspectiveApartments.unlink = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::unlink::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.manageProspectiveApartments#updateById
         * @methodOf housingApiServices.User.manageProspectiveApartments
         *
         * @description
         *
         * Update a related item by id for manageProspectiveApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.manageProspectiveApartments.updateById = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::updateById::user::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.roommateApartments
     * @header housingApiServices.User.roommateApartments
     * @object
     * @description
     *
     * The object `User.roommateApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#roommateApartments User.roommateApartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#roommateApartments
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries roommateApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#count
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Counts roommateApartments of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roommateApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#create
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Creates a new instance in roommateApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#createMany
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Creates a new instance in roommateApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#destroyAll
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Deletes all roommateApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#destroyById
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Delete a related item by id for roommateApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roommateApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#exists
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Check the existence of roommateApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roommateApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#findById
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Find a related item by id for roommateApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roommateApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#link
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Add a related item by id for roommateApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roommateApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#unlink
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Remove the roommateApartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roommateApartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::user::roommateApartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.roommateApartments#updateById
         * @methodOf housingApiServices.User.roommateApartments
         *
         * @description
         *
         * Update a related item by id for roommateApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roommateApartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.roommateApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::user::roommateApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.applyFloorPlans
     * @header housingApiServices.User.applyFloorPlans
     * @object
     * @description
     *
     * The object `User.applyFloorPlans` groups methods
     * manipulating `FloorPlan` instances related to `User`.
     *
     * Call {@link housingApiServices.User#applyFloorPlans User.applyFloorPlans()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.User#applyFloorPlans
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Queries applyFloorPlans of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#count
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Counts applyFloorPlans of user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.applyFloorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#create
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Creates a new instance in applyFloorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#createMany
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Creates a new instance in applyFloorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#destroyAll
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Deletes all applyFloorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.applyFloorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#destroyById
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Delete a related item by id for applyFloorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for applyFloorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.applyFloorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#exists
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Check the existence of applyFloorPlans relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for applyFloorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans.exists = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::exists::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#findById
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Find a related item by id for applyFloorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for applyFloorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#link
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Add a related item by id for applyFloorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for applyFloorPlans
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans.link = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::link::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#unlink
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Remove the applyFloorPlans relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for applyFloorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.applyFloorPlans.unlink = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::unlink::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User.applyFloorPlans#updateById
         * @methodOf housingApiServices.User.applyFloorPlans
         *
         * @description
         *
         * Update a related item by id for applyFloorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for applyFloorPlans
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.applyFloorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::user::applyFloorPlans"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.Apartment
 * @header housingApiServices.Apartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Apartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Apartment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/apartments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Apartment.floorPlans.findById() instead.
        "prototype$__findById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.floorPlans.destroyById() instead.
        "prototype$__destroyById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.floorPlans.updateById() instead.
        "prototype$__updateById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.likeUsers.findById() instead.
        "prototype$__findById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.likeUsers.destroyById() instead.
        "prototype$__destroyById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.likeUsers.updateById() instead.
        "prototype$__updateById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.likeUsers.link() instead.
        "prototype$__link__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.likeUsers.unlink() instead.
        "prototype$__unlink__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.likeUsers.exists() instead.
        "prototype$__exists__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.couponUsers.findById() instead.
        "prototype$__findById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.couponUsers.destroyById() instead.
        "prototype$__destroyById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.couponUsers.updateById() instead.
        "prototype$__updateById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.couponUsers.link() instead.
        "prototype$__link__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.couponUsers.unlink() instead.
        "prototype$__unlink__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.couponUsers.exists() instead.
        "prototype$__exists__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.visitUsers.findById() instead.
        "prototype$__findById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.visitUsers.destroyById() instead.
        "prototype$__destroyById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.visitUsers.updateById() instead.
        "prototype$__updateById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.visitUsers.link() instead.
        "prototype$__link__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.visitUsers.unlink() instead.
        "prototype$__unlink__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.visitUsers.exists() instead.
        "prototype$__exists__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.redirectUsers.findById() instead.
        "prototype$__findById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.redirectUsers.destroyById() instead.
        "prototype$__destroyById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.redirectUsers.updateById() instead.
        "prototype$__updateById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.redirectUsers.link() instead.
        "prototype$__link__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.redirectUsers.unlink() instead.
        "prototype$__unlink__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.redirectUsers.exists() instead.
        "prototype$__exists__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.universities.findById() instead.
        "prototype$__findById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.universities.destroyById() instead.
        "prototype$__destroyById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.universities.updateById() instead.
        "prototype$__updateById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.universities.link() instead.
        "prototype$__link__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.universities.unlink() instead.
        "prototype$__unlink__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.universities.exists() instead.
        "prototype$__exists__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.roommateUsers.findById() instead.
        "prototype$__findById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.roommateUsers.destroyById() instead.
        "prototype$__destroyById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.roommateUsers.updateById() instead.
        "prototype$__updateById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.roommateUsers.link() instead.
        "prototype$__link__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.roommateUsers.unlink() instead.
        "prototype$__unlink__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.roommateUsers.exists() instead.
        "prototype$__exists__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.floorPlans() instead.
        "prototype$__get__floorPlans": {
          isArray: true,
          url: urlBase + "/apartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use Apartment.floorPlans.create() instead.
        "prototype$__create__floorPlans": {
          url: urlBase + "/apartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use Apartment.floorPlans.destroyAll() instead.
        "prototype$__delete__floorPlans": {
          url: urlBase + "/apartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.floorPlans.count() instead.
        "prototype$__count__floorPlans": {
          url: urlBase + "/apartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/apartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Apartment.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/apartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Apartment.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/apartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/apartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.likeUsers() instead.
        "prototype$__get__likeUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.likeUsers.create() instead.
        "prototype$__create__likeUsers": {
          url: urlBase + "/apartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.likeUsers.destroyAll() instead.
        "prototype$__delete__likeUsers": {
          url: urlBase + "/apartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.likeUsers.count() instead.
        "prototype$__count__likeUsers": {
          url: urlBase + "/apartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.couponUsers() instead.
        "prototype$__get__couponUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.couponUsers.create() instead.
        "prototype$__create__couponUsers": {
          url: urlBase + "/apartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.couponUsers.destroyAll() instead.
        "prototype$__delete__couponUsers": {
          url: urlBase + "/apartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.couponUsers.count() instead.
        "prototype$__count__couponUsers": {
          url: urlBase + "/apartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.visitUsers() instead.
        "prototype$__get__visitUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.visitUsers.create() instead.
        "prototype$__create__visitUsers": {
          url: urlBase + "/apartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.visitUsers.destroyAll() instead.
        "prototype$__delete__visitUsers": {
          url: urlBase + "/apartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.visitUsers.count() instead.
        "prototype$__count__visitUsers": {
          url: urlBase + "/apartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.redirectUsers() instead.
        "prototype$__get__redirectUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.redirectUsers.create() instead.
        "prototype$__create__redirectUsers": {
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.redirectUsers.destroyAll() instead.
        "prototype$__delete__redirectUsers": {
          url: urlBase + "/apartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.redirectUsers.count() instead.
        "prototype$__count__redirectUsers": {
          url: urlBase + "/apartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.universities() instead.
        "prototype$__get__universities": {
          isArray: true,
          url: urlBase + "/apartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use Apartment.universities.create() instead.
        "prototype$__create__universities": {
          url: urlBase + "/apartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use Apartment.universities.destroyAll() instead.
        "prototype$__delete__universities": {
          url: urlBase + "/apartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.universities.count() instead.
        "prototype$__count__universities": {
          url: urlBase + "/apartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.roommateUsers() instead.
        "prototype$__get__roommateUsers": {
          isArray: true,
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use Apartment.roommateUsers.create() instead.
        "prototype$__create__roommateUsers": {
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use Apartment.roommateUsers.destroyAll() instead.
        "prototype$__delete__roommateUsers": {
          url: urlBase + "/apartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.roommateUsers.count() instead.
        "prototype$__count__roommateUsers": {
          url: urlBase + "/apartments/:id/roommateUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#create
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/apartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#createMany
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/apartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#upsert
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/apartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#exists
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/apartments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#findById
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/apartments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#find
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/apartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#findOne
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/apartments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#updateAll
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/apartments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#deleteById
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/apartments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#count
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/apartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#prototype$updateAttributes
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/apartments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#createChangeStream
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/apartments/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#export
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `type` – `{string}` - the exported file type.
         *
         *  - `include` – `{*=}` - the list of ids that will be exported
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "export": {
          url: urlBase + "/apartments/export",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#exportUsers
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `type` – `{string}` - the exported file type.
         *
         *  - `include` – `{*=}` - the list of ids that will be exported
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "exportUsers": {
          url: urlBase + "/apartments/exportUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#gaExtract
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `category` – `{string}` - the category
         *
         *  - `startDate` – `{string}` - the start date to query google analytics
         *
         *  - `endDate` – `{string}` - the end date to query google analytics
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "gaExtract": {
          url: urlBase + "/apartments/gaExtract",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#gaExtractImpression
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `category` – `{string}` - the category
         *
         *  - `startDate` – `{string}` - the start date to query google analytics
         *
         *  - `endDate` – `{string}` - the end date to query google analytics
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "gaExtractImpression": {
          url: urlBase + "/apartments/gaExtractImpression",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#gaExtractPortal
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `category` – `{string}` - the category
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "gaExtractPortal": {
          url: urlBase + "/apartments/gaExtractPortal",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#coupon
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string}` - the id of apartment
         *
         *  - `userId` – `{string}` - the user id
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "coupon": {
          url: urlBase + "/apartments/:id/coupon",
          method: "GET"
        },

        // INTERNAL. Use User.likeApartments.findById() instead.
        "::findById::user::likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.likeApartments.destroyById() instead.
        "::destroyById::user::likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.likeApartments.updateById() instead.
        "::updateById::user::likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.likeApartments.link() instead.
        "::link::user::likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.likeApartments.unlink() instead.
        "::unlink::user::likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.likeApartments.exists() instead.
        "::exists::user::likeApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/likeApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.couponApartments.findById() instead.
        "::findById::user::couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.couponApartments.destroyById() instead.
        "::destroyById::user::couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.couponApartments.updateById() instead.
        "::updateById::user::couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.couponApartments.link() instead.
        "::link::user::couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.couponApartments.unlink() instead.
        "::unlink::user::couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.couponApartments.exists() instead.
        "::exists::user::couponApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/couponApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.visitApartments.findById() instead.
        "::findById::user::visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.visitApartments.destroyById() instead.
        "::destroyById::user::visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.visitApartments.updateById() instead.
        "::updateById::user::visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.visitApartments.link() instead.
        "::link::user::visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.visitApartments.unlink() instead.
        "::unlink::user::visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.visitApartments.exists() instead.
        "::exists::user::visitApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/visitApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.redirectApartments.findById() instead.
        "::findById::user::redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.redirectApartments.destroyById() instead.
        "::destroyById::user::redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.redirectApartments.updateById() instead.
        "::updateById::user::redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.redirectApartments.link() instead.
        "::link::user::redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.redirectApartments.unlink() instead.
        "::unlink::user::redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.redirectApartments.exists() instead.
        "::exists::user::redirectApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/redirectApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.roommateApartments.findById() instead.
        "::findById::user::roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.roommateApartments.destroyById() instead.
        "::destroyById::user::roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.roommateApartments.updateById() instead.
        "::updateById::user::roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.roommateApartments.link() instead.
        "::link::user::roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.roommateApartments.unlink() instead.
        "::unlink::user::roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.roommateApartments.exists() instead.
        "::exists::user::roommateApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/roommateApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.likeApartments() instead.
        "::get::user::likeApartments": {
          isArray: true,
          url: urlBase + "/users/:id/likeApartments",
          method: "GET"
        },

        // INTERNAL. Use User.likeApartments.create() instead.
        "::create::user::likeApartments": {
          url: urlBase + "/users/:id/likeApartments",
          method: "POST"
        },

        // INTERNAL. Use User.likeApartments.createMany() instead.
        "::createMany::user::likeApartments": {
          isArray: true,
          url: urlBase + "/users/:id/likeApartments",
          method: "POST"
        },

        // INTERNAL. Use User.likeApartments.destroyAll() instead.
        "::delete::user::likeApartments": {
          url: urlBase + "/users/:id/likeApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.likeApartments.count() instead.
        "::count::user::likeApartments": {
          url: urlBase + "/users/:id/likeApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.couponApartments() instead.
        "::get::user::couponApartments": {
          isArray: true,
          url: urlBase + "/users/:id/couponApartments",
          method: "GET"
        },

        // INTERNAL. Use User.couponApartments.create() instead.
        "::create::user::couponApartments": {
          url: urlBase + "/users/:id/couponApartments",
          method: "POST"
        },

        // INTERNAL. Use User.couponApartments.createMany() instead.
        "::createMany::user::couponApartments": {
          isArray: true,
          url: urlBase + "/users/:id/couponApartments",
          method: "POST"
        },

        // INTERNAL. Use User.couponApartments.destroyAll() instead.
        "::delete::user::couponApartments": {
          url: urlBase + "/users/:id/couponApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.couponApartments.count() instead.
        "::count::user::couponApartments": {
          url: urlBase + "/users/:id/couponApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.visitApartments() instead.
        "::get::user::visitApartments": {
          isArray: true,
          url: urlBase + "/users/:id/visitApartments",
          method: "GET"
        },

        // INTERNAL. Use User.visitApartments.create() instead.
        "::create::user::visitApartments": {
          url: urlBase + "/users/:id/visitApartments",
          method: "POST"
        },

        // INTERNAL. Use User.visitApartments.createMany() instead.
        "::createMany::user::visitApartments": {
          isArray: true,
          url: urlBase + "/users/:id/visitApartments",
          method: "POST"
        },

        // INTERNAL. Use User.visitApartments.destroyAll() instead.
        "::delete::user::visitApartments": {
          url: urlBase + "/users/:id/visitApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.visitApartments.count() instead.
        "::count::user::visitApartments": {
          url: urlBase + "/users/:id/visitApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.redirectApartments() instead.
        "::get::user::redirectApartments": {
          isArray: true,
          url: urlBase + "/users/:id/redirectApartments",
          method: "GET"
        },

        // INTERNAL. Use User.redirectApartments.create() instead.
        "::create::user::redirectApartments": {
          url: urlBase + "/users/:id/redirectApartments",
          method: "POST"
        },

        // INTERNAL. Use User.redirectApartments.createMany() instead.
        "::createMany::user::redirectApartments": {
          isArray: true,
          url: urlBase + "/users/:id/redirectApartments",
          method: "POST"
        },

        // INTERNAL. Use User.redirectApartments.destroyAll() instead.
        "::delete::user::redirectApartments": {
          url: urlBase + "/users/:id/redirectApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.redirectApartments.count() instead.
        "::count::user::redirectApartments": {
          url: urlBase + "/users/:id/redirectApartments/count",
          method: "GET"
        },

        // INTERNAL. Use User.roommateApartments() instead.
        "::get::user::roommateApartments": {
          isArray: true,
          url: urlBase + "/users/:id/roommateApartments",
          method: "GET"
        },

        // INTERNAL. Use User.roommateApartments.create() instead.
        "::create::user::roommateApartments": {
          url: urlBase + "/users/:id/roommateApartments",
          method: "POST"
        },

        // INTERNAL. Use User.roommateApartments.createMany() instead.
        "::createMany::user::roommateApartments": {
          isArray: true,
          url: urlBase + "/users/:id/roommateApartments",
          method: "POST"
        },

        // INTERNAL. Use User.roommateApartments.destroyAll() instead.
        "::delete::user::roommateApartments": {
          url: urlBase + "/users/:id/roommateApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.roommateApartments.count() instead.
        "::count::user::roommateApartments": {
          url: urlBase + "/users/:id/roommateApartments/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.apartments.findById() instead.
        "::findById::tag::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.apartments.destroyById() instead.
        "::destroyById::tag::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.apartments.updateById() instead.
        "::updateById::tag::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.apartments.link() instead.
        "::link::tag::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.apartments.unlink() instead.
        "::unlink::tag::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.apartments.exists() instead.
        "::exists::tag::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.apartments() instead.
        "::get::tag::apartments": {
          isArray: true,
          url: urlBase + "/tags/:id/apartments",
          method: "GET"
        },

        // INTERNAL. Use Tag.apartments.create() instead.
        "::create::tag::apartments": {
          url: urlBase + "/tags/:id/apartments",
          method: "POST"
        },

        // INTERNAL. Use Tag.apartments.createMany() instead.
        "::createMany::tag::apartments": {
          isArray: true,
          url: urlBase + "/tags/:id/apartments",
          method: "POST"
        },

        // INTERNAL. Use Tag.apartments.destroyAll() instead.
        "::delete::tag::apartments": {
          url: urlBase + "/tags/:id/apartments",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.apartments.count() instead.
        "::count::tag::apartments": {
          url: urlBase + "/tags/:id/apartments/count",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.apartment() instead.
        "::get::floorPlan::apartment": {
          url: urlBase + "/floorPlans/:id/apartment",
          method: "GET"
        },

        // INTERNAL. Use VisitApartment.apartment() instead.
        "::get::visitApartment::apartment": {
          url: urlBase + "/visitApartments/:id/apartment",
          method: "GET"
        },

        // INTERNAL. Use RedirectApartment.apartment() instead.
        "::get::redirectApartment::apartment": {
          url: urlBase + "/redirectApartments/:id/apartment",
          method: "GET"
        },

        // INTERNAL. Use University.apartments.findById() instead.
        "::findById::university::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use University.apartments.destroyById() instead.
        "::destroyById::university::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use University.apartments.updateById() instead.
        "::updateById::university::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use University.apartments.link() instead.
        "::link::university::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use University.apartments.unlink() instead.
        "::unlink::university::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use University.apartments.exists() instead.
        "::exists::university::apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use University.apartments() instead.
        "::get::university::apartments": {
          isArray: true,
          url: urlBase + "/universities/:id/apartments",
          method: "GET"
        },

        // INTERNAL. Use University.apartments.create() instead.
        "::create::university::apartments": {
          url: urlBase + "/universities/:id/apartments",
          method: "POST"
        },

        // INTERNAL. Use University.apartments.createMany() instead.
        "::createMany::university::apartments": {
          isArray: true,
          url: urlBase + "/universities/:id/apartments",
          method: "POST"
        },

        // INTERNAL. Use University.apartments.destroyAll() instead.
        "::delete::university::apartments": {
          url: urlBase + "/universities/:id/apartments",
          method: "DELETE"
        },

        // INTERNAL. Use University.apartments.count() instead.
        "::count::university::apartments": {
          url: urlBase + "/universities/:id/apartments/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#updateOrCreate
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#update
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#destroyById
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#removeById
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.Apartment#modelName
    * @propertyOf housingApiServices.Apartment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Apartment`.
    */
    R.modelName = "Apartment";

    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.floorPlans
     * @header housingApiServices.Apartment.floorPlans
     * @object
     * @description
     *
     * The object `Apartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#floorPlans Apartment.floorPlans()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#floorPlans
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries floorPlans of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#count
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Counts floorPlans of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#create
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#createMany
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#destroyAll
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Deletes all floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#destroyById
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Delete a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#findById
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Find a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::apartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.floorPlans#updateById
         * @methodOf housingApiServices.Apartment.floorPlans
         *
         * @description
         *
         * Update a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::apartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.tags
     * @header housingApiServices.Apartment.tags
     * @object
     * @description
     *
     * The object `Apartment.tags` groups methods
     * manipulating `Tag` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#tags Apartment.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#tags
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries tags of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#count
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Counts tags of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#create
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#createMany
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#destroyAll
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#destroyById
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#exists
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#findById
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#link
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#unlink
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::apartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.tags#updateById
         * @methodOf housingApiServices.Apartment.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::apartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.likeUsers
     * @header housingApiServices.Apartment.likeUsers
     * @object
     * @description
     *
     * The object `Apartment.likeUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#likeUsers Apartment.likeUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#likeUsers
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries likeUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#count
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Counts likeUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#create
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#createMany
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#destroyAll
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Deletes all likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#destroyById
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Delete a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#exists
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Check the existence of likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#findById
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Find a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#link
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Add a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#unlink
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Remove the likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::apartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.likeUsers#updateById
         * @methodOf housingApiServices.Apartment.likeUsers
         *
         * @description
         *
         * Update a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::apartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.couponUsers
     * @header housingApiServices.Apartment.couponUsers
     * @object
     * @description
     *
     * The object `Apartment.couponUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#couponUsers Apartment.couponUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#couponUsers
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries couponUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#count
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Counts couponUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#create
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#createMany
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#destroyAll
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Deletes all couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#destroyById
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Delete a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#exists
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Check the existence of couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#findById
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Find a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#link
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Add a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#unlink
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Remove the couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::apartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.couponUsers#updateById
         * @methodOf housingApiServices.Apartment.couponUsers
         *
         * @description
         *
         * Update a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::apartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.visitUsers
     * @header housingApiServices.Apartment.visitUsers
     * @object
     * @description
     *
     * The object `Apartment.visitUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#visitUsers Apartment.visitUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#visitUsers
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries visitUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#count
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Counts visitUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#create
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#createMany
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#destroyAll
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Deletes all visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#destroyById
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Delete a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#exists
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Check the existence of visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#findById
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Find a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#link
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Add a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#unlink
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Remove the visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::apartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.visitUsers#updateById
         * @methodOf housingApiServices.Apartment.visitUsers
         *
         * @description
         *
         * Update a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::apartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.redirectUsers
     * @header housingApiServices.Apartment.redirectUsers
     * @object
     * @description
     *
     * The object `Apartment.redirectUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#redirectUsers Apartment.redirectUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#redirectUsers
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries redirectUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#count
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Counts redirectUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#create
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#createMany
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#destroyAll
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Deletes all redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#destroyById
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Delete a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#exists
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Check the existence of redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#findById
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Find a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#link
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Add a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#unlink
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Remove the redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.redirectUsers#updateById
         * @methodOf housingApiServices.Apartment.redirectUsers
         *
         * @description
         *
         * Update a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::apartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.universities
     * @header housingApiServices.Apartment.universities
     * @object
     * @description
     *
     * The object `Apartment.universities` groups methods
     * manipulating `University` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#universities Apartment.universities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#universities
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries universities of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#count
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Counts universities of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#create
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#createMany
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#destroyAll
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Deletes all universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#destroyById
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Delete a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#exists
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Check the existence of universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#findById
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Find a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#link
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Add a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#unlink
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Remove the universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::apartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.universities#updateById
         * @methodOf housingApiServices.Apartment.universities
         *
         * @description
         *
         * Update a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::apartment::universities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.roommateUsers
     * @header housingApiServices.Apartment.roommateUsers
     * @object
     * @description
     *
     * The object `Apartment.roommateUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#roommateUsers Apartment.roommateUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Apartment#roommateUsers
         * @methodOf housingApiServices.Apartment
         *
         * @description
         *
         * Queries roommateUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#count
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Counts roommateUsers of apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#create
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#createMany
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#destroyAll
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Deletes all roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#destroyById
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Delete a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#exists
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Check the existence of roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#findById
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Find a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#link
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Add a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#unlink
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Remove the roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Apartment.roommateUsers#updateById
         * @methodOf housingApiServices.Apartment.roommateUsers
         *
         * @description
         *
         * Update a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.Tag
 * @header housingApiServices.Tag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Tag",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/tags/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Tag.apartments.findById() instead.
        "prototype$__findById__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.apartments.destroyById() instead.
        "prototype$__destroyById__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.apartments.updateById() instead.
        "prototype$__updateById__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.apartments.link() instead.
        "prototype$__link__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.apartments.unlink() instead.
        "prototype$__unlink__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.apartments.exists() instead.
        "prototype$__exists__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/apartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.apartments() instead.
        "prototype$__get__apartments": {
          isArray: true,
          url: urlBase + "/tags/:id/apartments",
          method: "GET"
        },

        // INTERNAL. Use Tag.apartments.create() instead.
        "prototype$__create__apartments": {
          url: urlBase + "/tags/:id/apartments",
          method: "POST"
        },

        // INTERNAL. Use Tag.apartments.destroyAll() instead.
        "prototype$__delete__apartments": {
          url: urlBase + "/tags/:id/apartments",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.apartments.count() instead.
        "prototype$__count__apartments": {
          url: urlBase + "/tags/:id/apartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#create
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/tags",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#createMany
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/tags",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#upsert
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/tags",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#exists
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/tags/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#findById
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/tags/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#find
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/tags",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#findOne
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/tags/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#updateAll
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/tags/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#deleteById
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/tags/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#count
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/tags/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#prototype$updateAttributes
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/tags/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#createChangeStream
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/tags/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Apartment.tags.findById() instead.
        "::findById::apartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.tags.destroyById() instead.
        "::destroyById::apartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.tags.updateById() instead.
        "::updateById::apartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.tags.link() instead.
        "::link::apartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.tags.unlink() instead.
        "::unlink::apartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.tags.exists() instead.
        "::exists::apartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.tags() instead.
        "::get::apartment::tags": {
          isArray: true,
          url: urlBase + "/apartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Apartment.tags.create() instead.
        "::create::apartment::tags": {
          url: urlBase + "/apartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Apartment.tags.createMany() instead.
        "::createMany::apartment::tags": {
          isArray: true,
          url: urlBase + "/apartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Apartment.tags.destroyAll() instead.
        "::delete::apartment::tags": {
          url: urlBase + "/apartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.tags.count() instead.
        "::count::apartment::tags": {
          url: urlBase + "/apartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.tags.findById() instead.
        "::findById::crawledApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.tags.destroyById() instead.
        "::destroyById::crawledApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.tags.updateById() instead.
        "::updateById::crawledApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.tags.link() instead.
        "::link::crawledApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.tags.unlink() instead.
        "::unlink::crawledApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.tags.exists() instead.
        "::exists::crawledApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.tags() instead.
        "::get::crawledApartment::tags": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.tags.create() instead.
        "::create::crawledApartment::tags": {
          url: urlBase + "/crawledApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.tags.createMany() instead.
        "::createMany::crawledApartment::tags": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.tags.destroyAll() instead.
        "::delete::crawledApartment::tags": {
          url: urlBase + "/crawledApartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.tags.count() instead.
        "::count::crawledApartment::tags": {
          url: urlBase + "/crawledApartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.tags.findById() instead.
        "::findById::submittedApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.tags.destroyById() instead.
        "::destroyById::submittedApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.tags.updateById() instead.
        "::updateById::submittedApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.tags.link() instead.
        "::link::submittedApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.tags.unlink() instead.
        "::unlink::submittedApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.tags.exists() instead.
        "::exists::submittedApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.tags() instead.
        "::get::submittedApartment::tags": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.tags.create() instead.
        "::create::submittedApartment::tags": {
          url: urlBase + "/submittedApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.tags.createMany() instead.
        "::createMany::submittedApartment::tags": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.tags.destroyAll() instead.
        "::delete::submittedApartment::tags": {
          url: urlBase + "/submittedApartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.tags.count() instead.
        "::count::submittedApartment::tags": {
          url: urlBase + "/submittedApartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.tags.findById() instead.
        "::findById::prospectiveApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.tags.destroyById() instead.
        "::destroyById::prospectiveApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.updateById() instead.
        "::updateById::prospectiveApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.tags.link() instead.
        "::link::prospectiveApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.tags.unlink() instead.
        "::unlink::prospectiveApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.exists() instead.
        "::exists::prospectiveApartment::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.tags() instead.
        "::get::prospectiveApartment::tags": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.tags.create() instead.
        "::create::prospectiveApartment::tags": {
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.tags.createMany() instead.
        "::createMany::prospectiveApartment::tags": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.tags.destroyAll() instead.
        "::delete::prospectiveApartment::tags": {
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.count() instead.
        "::count::prospectiveApartment::tags": {
          url: urlBase + "/prospectiveApartments/:id/tags/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.Tag#updateOrCreate
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#update
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#destroyById
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.Tag#removeById
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.Tag#modelName
    * @propertyOf housingApiServices.Tag
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Tag`.
    */
    R.modelName = "Tag";

    /**
     * @ngdoc object
     * @name housingApiServices.Tag.apartments
     * @header housingApiServices.Tag.apartments
     * @object
     * @description
     *
     * The object `Tag.apartments` groups methods
     * manipulating `Apartment` instances related to `Tag`.
     *
     * Call {@link housingApiServices.Tag#apartments Tag.apartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.Tag#apartments
         * @methodOf housingApiServices.Tag
         *
         * @description
         *
         * Queries apartments of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#count
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Counts apartments of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#create
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Creates a new instance in apartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#createMany
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Creates a new instance in apartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#destroyAll
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Deletes all apartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#destroyById
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Delete a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#exists
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Check the existence of apartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#findById
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Find a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#link
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Add a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#unlink
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Remove the apartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::tag::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.Tag.apartments#updateById
         * @methodOf housingApiServices.Tag.apartments
         *
         * @description
         *
         * Update a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::tag::apartments"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.FloorPlan
 * @header housingApiServices.FloorPlan
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FloorPlan` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "FloorPlan",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/floorPlans/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use FloorPlan.apartment() instead.
        "prototype$__get__apartment": {
          url: urlBase + "/floorPlans/:id/apartment",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.findById() instead.
        "prototype$__findById__floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyById() instead.
        "prototype$__destroyById__floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.updateById() instead.
        "prototype$__updateById__floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
          method: "PUT"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.link() instead.
        "prototype$__link__floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.unlink() instead.
        "prototype$__unlink__floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.exists() instead.
        "prototype$__exists__floorPlanApplicants": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants() instead.
        "prototype$__get__floorPlanApplicants": {
          isArray: true,
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "GET"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.create() instead.
        "prototype$__create__floorPlanApplicants": {
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "POST"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyAll() instead.
        "prototype$__delete__floorPlanApplicants": {
          url: urlBase + "/floorPlans/:id/floorPlanApplicants",
          method: "DELETE"
        },

        // INTERNAL. Use FloorPlan.floorPlanApplicants.count() instead.
        "prototype$__count__floorPlanApplicants": {
          url: urlBase + "/floorPlans/:id/floorPlanApplicants/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#create
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/floorPlans",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#createMany
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/floorPlans",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#upsert
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/floorPlans",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#exists
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/floorPlans/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#findById
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/floorPlans/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#find
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/floorPlans",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#findOne
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/floorPlans/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#updateAll
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/floorPlans/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#deleteById
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/floorPlans/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#count
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/floorPlans/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#prototype$updateAttributes
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/floorPlans/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#createChangeStream
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/floorPlans/change-stream",
          method: "POST"
        },

        // INTERNAL. Use User.applyFloorPlans.findById() instead.
        "::findById::user::applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.applyFloorPlans.destroyById() instead.
        "::destroyById::user::applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.applyFloorPlans.updateById() instead.
        "::updateById::user::applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.applyFloorPlans.link() instead.
        "::link::user::applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.applyFloorPlans.unlink() instead.
        "::unlink::user::applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.applyFloorPlans.exists() instead.
        "::exists::user::applyFloorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.applyFloorPlans() instead.
        "::get::user::applyFloorPlans": {
          isArray: true,
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "GET"
        },

        // INTERNAL. Use User.applyFloorPlans.create() instead.
        "::create::user::applyFloorPlans": {
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "POST"
        },

        // INTERNAL. Use User.applyFloorPlans.createMany() instead.
        "::createMany::user::applyFloorPlans": {
          isArray: true,
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "POST"
        },

        // INTERNAL. Use User.applyFloorPlans.destroyAll() instead.
        "::delete::user::applyFloorPlans": {
          url: urlBase + "/users/:id/applyFloorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use User.applyFloorPlans.count() instead.
        "::count::user::applyFloorPlans": {
          url: urlBase + "/users/:id/applyFloorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use Apartment.floorPlans.findById() instead.
        "::findById::apartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.floorPlans.destroyById() instead.
        "::destroyById::apartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.floorPlans.updateById() instead.
        "::updateById::apartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.floorPlans() instead.
        "::get::apartment::floorPlans": {
          isArray: true,
          url: urlBase + "/apartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use Apartment.floorPlans.create() instead.
        "::create::apartment::floorPlans": {
          url: urlBase + "/apartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use Apartment.floorPlans.createMany() instead.
        "::createMany::apartment::floorPlans": {
          isArray: true,
          url: urlBase + "/apartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use Apartment.floorPlans.destroyAll() instead.
        "::delete::apartment::floorPlans": {
          url: urlBase + "/apartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.floorPlans.count() instead.
        "::count::apartment::floorPlans": {
          url: urlBase + "/apartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.findById() instead.
        "::findById::crawledApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.destroyById() instead.
        "::destroyById::crawledApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.updateById() instead.
        "::updateById::crawledApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.floorPlans() instead.
        "::get::crawledApartment::floorPlans": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.create() instead.
        "::create::crawledApartment::floorPlans": {
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.createMany() instead.
        "::createMany::crawledApartment::floorPlans": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.destroyAll() instead.
        "::delete::crawledApartment::floorPlans": {
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.count() instead.
        "::count::crawledApartment::floorPlans": {
          url: urlBase + "/crawledApartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.findById() instead.
        "::findById::submittedApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.destroyById() instead.
        "::destroyById::submittedApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.updateById() instead.
        "::updateById::submittedApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans() instead.
        "::get::submittedApartment::floorPlans": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.create() instead.
        "::create::submittedApartment::floorPlans": {
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.createMany() instead.
        "::createMany::submittedApartment::floorPlans": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.destroyAll() instead.
        "::delete::submittedApartment::floorPlans": {
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.count() instead.
        "::count::submittedApartment::floorPlans": {
          url: urlBase + "/submittedApartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.findById() instead.
        "::findById::prospectiveApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.destroyById() instead.
        "::destroyById::prospectiveApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.updateById() instead.
        "::updateById::prospectiveApartment::floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans() instead.
        "::get::prospectiveApartment::floorPlans": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.create() instead.
        "::create::prospectiveApartment::floorPlans": {
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.createMany() instead.
        "::createMany::prospectiveApartment::floorPlans": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.destroyAll() instead.
        "::delete::prospectiveApartment::floorPlans": {
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.count() instead.
        "::count::prospectiveApartment::floorPlans": {
          url: urlBase + "/prospectiveApartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use ApplyForFloorPlan.floorPlan() instead.
        "::get::applyForFloorPlan::floorPlan": {
          url: urlBase + "/applyForFloorPlans/:id/floorPlan",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#updateOrCreate
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#update
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#destroyById
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#removeById
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.FloorPlan#modelName
    * @propertyOf housingApiServices.FloorPlan
    * @description
    * The name of the model represented by this $resource,
    * i.e. `FloorPlan`.
    */
    R.modelName = "FloorPlan";


        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#apartment
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Fetches belongsTo relation apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::floorPlan::apartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.FloorPlan.floorPlanApplicants
     * @header housingApiServices.FloorPlan.floorPlanApplicants
     * @object
     * @description
     *
     * The object `FloorPlan.floorPlanApplicants` groups methods
     * manipulating `User` instances related to `FloorPlan`.
     *
     * Call {@link housingApiServices.FloorPlan#floorPlanApplicants FloorPlan.floorPlanApplicants()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan#floorPlanApplicants
         * @methodOf housingApiServices.FloorPlan
         *
         * @description
         *
         * Queries floorPlanApplicants of floorPlan.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#count
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Counts floorPlanApplicants of floorPlan.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.floorPlanApplicants.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#create
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Creates a new instance in floorPlanApplicants of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#createMany
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Creates a new instance in floorPlanApplicants of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#destroyAll
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Deletes all floorPlanApplicants of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlanApplicants.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#destroyById
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Delete a related item by id for floorPlanApplicants.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlanApplicants.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#exists
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Check the existence of floorPlanApplicants relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#findById
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Find a related item by id for floorPlanApplicants.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#link
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Add a related item by id for floorPlanApplicants.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#unlink
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Remove the floorPlanApplicants relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlanApplicants.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.FloorPlan.floorPlanApplicants#updateById
         * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
         *
         * @description
         *
         * Update a related item by id for floorPlanApplicants.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.floorPlanApplicants.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::floorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.VisitApartment
 * @header housingApiServices.VisitApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `VisitApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "VisitApartment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/visitApartments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use VisitApartment.apartment() instead.
        "prototype$__get__apartment": {
          url: urlBase + "/visitApartments/:id/apartment",
          method: "GET"
        },

        // INTERNAL. Use VisitApartment.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/visitApartments/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#create
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/visitApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#createMany
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/visitApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#upsert
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/visitApartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#exists
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/visitApartments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#findById
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/visitApartments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#find
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/visitApartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#findOne
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/visitApartments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#updateAll
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/visitApartments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#deleteById
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/visitApartments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#count
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/visitApartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#prototype$updateAttributes
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/visitApartments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#createChangeStream
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/visitApartments/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#updateOrCreate
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#update
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#destroyById
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#removeById
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `VisitApartment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.VisitApartment#modelName
    * @propertyOf housingApiServices.VisitApartment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `VisitApartment`.
    */
    R.modelName = "VisitApartment";


        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#apartment
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Fetches belongsTo relation apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::visitApartment::apartment"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.VisitApartment#user
         * @methodOf housingApiServices.VisitApartment
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::visitApartment::user"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.RedirectApartment
 * @header housingApiServices.RedirectApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RedirectApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "RedirectApartment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/redirectApartments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use RedirectApartment.apartment() instead.
        "prototype$__get__apartment": {
          url: urlBase + "/redirectApartments/:id/apartment",
          method: "GET"
        },

        // INTERNAL. Use RedirectApartment.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/redirectApartments/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#create
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/redirectApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#createMany
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/redirectApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#upsert
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/redirectApartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#exists
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/redirectApartments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#findById
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/redirectApartments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#find
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/redirectApartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#findOne
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/redirectApartments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#updateAll
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/redirectApartments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#deleteById
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/redirectApartments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#count
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/redirectApartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#prototype$updateAttributes
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/redirectApartments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#createChangeStream
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/redirectApartments/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#updateOrCreate
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#update
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#destroyById
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#removeById
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RedirectApartment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.RedirectApartment#modelName
    * @propertyOf housingApiServices.RedirectApartment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `RedirectApartment`.
    */
    R.modelName = "RedirectApartment";


        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#apartment
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Fetches belongsTo relation apartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::redirectApartment::apartment"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.RedirectApartment#user
         * @methodOf housingApiServices.RedirectApartment
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::redirectApartment::user"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.EmailTemplate
 * @header housingApiServices.EmailTemplate
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EmailTemplate` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EmailTemplate",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/emailTemplates/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#create
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/emailTemplates",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#createMany
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/emailTemplates",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#upsert
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/emailTemplates",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#exists
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/emailTemplates/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#findById
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/emailTemplates/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#find
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/emailTemplates",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#findOne
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/emailTemplates/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#updateAll
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/emailTemplates/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#deleteById
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/emailTemplates/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#count
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/emailTemplates/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#prototype$updateAttributes
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/emailTemplates/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#createChangeStream
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/emailTemplates/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#updateOrCreate
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#update
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#destroyById
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.EmailTemplate#removeById
         * @methodOf housingApiServices.EmailTemplate
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EmailTemplate` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.EmailTemplate#modelName
    * @propertyOf housingApiServices.EmailTemplate
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EmailTemplate`.
    */
    R.modelName = "EmailTemplate";


    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.University
 * @header housingApiServices.University
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `University` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "University",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/universities/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use University.apartments.findById() instead.
        "prototype$__findById__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use University.apartments.destroyById() instead.
        "prototype$__destroyById__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use University.apartments.updateById() instead.
        "prototype$__updateById__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use University.apartments.link() instead.
        "prototype$__link__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use University.apartments.unlink() instead.
        "prototype$__unlink__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use University.apartments.exists() instead.
        "prototype$__exists__apartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/universities/:id/apartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use University.apartments() instead.
        "prototype$__get__apartments": {
          isArray: true,
          url: urlBase + "/universities/:id/apartments",
          method: "GET"
        },

        // INTERNAL. Use University.apartments.create() instead.
        "prototype$__create__apartments": {
          url: urlBase + "/universities/:id/apartments",
          method: "POST"
        },

        // INTERNAL. Use University.apartments.destroyAll() instead.
        "prototype$__delete__apartments": {
          url: urlBase + "/universities/:id/apartments",
          method: "DELETE"
        },

        // INTERNAL. Use University.apartments.count() instead.
        "prototype$__count__apartments": {
          url: urlBase + "/universities/:id/apartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#create
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/universities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#createMany
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/universities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#upsert
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/universities",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#exists
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/universities/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#findById
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/universities/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#find
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/universities",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#findOne
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/universities/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#updateAll
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/universities/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#deleteById
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/universities/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#count
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/universities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#prototype$updateAttributes
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/universities/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.University#createChangeStream
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/universities/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Apartment.universities.findById() instead.
        "::findById::apartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Apartment.universities.destroyById() instead.
        "::destroyById::apartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.universities.updateById() instead.
        "::updateById::apartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.universities.link() instead.
        "::link::apartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Apartment.universities.unlink() instead.
        "::unlink::apartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.universities.exists() instead.
        "::exists::apartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/apartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Apartment.universities() instead.
        "::get::apartment::universities": {
          isArray: true,
          url: urlBase + "/apartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use Apartment.universities.create() instead.
        "::create::apartment::universities": {
          url: urlBase + "/apartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use Apartment.universities.createMany() instead.
        "::createMany::apartment::universities": {
          isArray: true,
          url: urlBase + "/apartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use Apartment.universities.destroyAll() instead.
        "::delete::apartment::universities": {
          url: urlBase + "/apartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use Apartment.universities.count() instead.
        "::count::apartment::universities": {
          url: urlBase + "/apartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.universities.findById() instead.
        "::findById::crawledApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.universities.destroyById() instead.
        "::destroyById::crawledApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.universities.updateById() instead.
        "::updateById::crawledApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.universities.link() instead.
        "::link::crawledApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.universities.unlink() instead.
        "::unlink::crawledApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.universities.exists() instead.
        "::exists::crawledApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.universities() instead.
        "::get::crawledApartment::universities": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.universities.create() instead.
        "::create::crawledApartment::universities": {
          url: urlBase + "/crawledApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.universities.createMany() instead.
        "::createMany::crawledApartment::universities": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.universities.destroyAll() instead.
        "::delete::crawledApartment::universities": {
          url: urlBase + "/crawledApartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.universities.count() instead.
        "::count::crawledApartment::universities": {
          url: urlBase + "/crawledApartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.universities.findById() instead.
        "::findById::submittedApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.universities.destroyById() instead.
        "::destroyById::submittedApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.universities.updateById() instead.
        "::updateById::submittedApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.universities.link() instead.
        "::link::submittedApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.universities.unlink() instead.
        "::unlink::submittedApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.universities.exists() instead.
        "::exists::submittedApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.universities() instead.
        "::get::submittedApartment::universities": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.universities.create() instead.
        "::create::submittedApartment::universities": {
          url: urlBase + "/submittedApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.universities.createMany() instead.
        "::createMany::submittedApartment::universities": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.universities.destroyAll() instead.
        "::delete::submittedApartment::universities": {
          url: urlBase + "/submittedApartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.universities.count() instead.
        "::count::submittedApartment::universities": {
          url: urlBase + "/submittedApartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.universities.findById() instead.
        "::findById::prospectiveApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.universities.destroyById() instead.
        "::destroyById::prospectiveApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.universities.updateById() instead.
        "::updateById::prospectiveApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.universities.link() instead.
        "::link::prospectiveApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.universities.unlink() instead.
        "::unlink::prospectiveApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.universities.exists() instead.
        "::exists::prospectiveApartment::universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.universities() instead.
        "::get::prospectiveApartment::universities": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.universities.create() instead.
        "::create::prospectiveApartment::universities": {
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.universities.createMany() instead.
        "::createMany::prospectiveApartment::universities": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.universities.destroyAll() instead.
        "::delete::prospectiveApartment::universities": {
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.universities.count() instead.
        "::count::prospectiveApartment::universities": {
          url: urlBase + "/prospectiveApartments/:id/universities/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.University#updateOrCreate
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.University#update
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.University#destroyById
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.University#removeById
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.University#modelName
    * @propertyOf housingApiServices.University
    * @description
    * The name of the model represented by this $resource,
    * i.e. `University`.
    */
    R.modelName = "University";

    /**
     * @ngdoc object
     * @name housingApiServices.University.apartments
     * @header housingApiServices.University.apartments
     * @object
     * @description
     *
     * The object `University.apartments` groups methods
     * manipulating `Apartment` instances related to `University`.
     *
     * Call {@link housingApiServices.University#apartments University.apartments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.University#apartments
         * @methodOf housingApiServices.University
         *
         * @description
         *
         * Queries apartments of university.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#count
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Counts apartments of university.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#create
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Creates a new instance in apartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#createMany
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Creates a new instance in apartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#destroyAll
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Deletes all apartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#destroyById
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Delete a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#exists
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Check the existence of apartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#findById
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Find a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#link
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Add a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#unlink
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Remove the apartments relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::university::apartments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.University.apartments#updateById
         * @methodOf housingApiServices.University.apartments
         *
         * @description
         *
         * Update a related item by id for apartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for apartments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Apartment` object.)
         * </em>
         */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::university::apartments"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.CrawledApartment
 * @header housingApiServices.CrawledApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CrawledApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "CrawledApartment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/crawledApartments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use CrawledApartment.floorPlans.findById() instead.
        "prototype$__findById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.destroyById() instead.
        "prototype$__destroyById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.updateById() instead.
        "prototype$__updateById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.findById() instead.
        "prototype$__findById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.destroyById() instead.
        "prototype$__destroyById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.updateById() instead.
        "prototype$__updateById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.link() instead.
        "prototype$__link__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.unlink() instead.
        "prototype$__unlink__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.exists() instead.
        "prototype$__exists__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.findById() instead.
        "prototype$__findById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.destroyById() instead.
        "prototype$__destroyById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.updateById() instead.
        "prototype$__updateById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.link() instead.
        "prototype$__link__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.unlink() instead.
        "prototype$__unlink__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.exists() instead.
        "prototype$__exists__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.findById() instead.
        "prototype$__findById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.destroyById() instead.
        "prototype$__destroyById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.updateById() instead.
        "prototype$__updateById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.link() instead.
        "prototype$__link__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.unlink() instead.
        "prototype$__unlink__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.exists() instead.
        "prototype$__exists__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.findById() instead.
        "prototype$__findById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.destroyById() instead.
        "prototype$__destroyById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.updateById() instead.
        "prototype$__updateById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.link() instead.
        "prototype$__link__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.unlink() instead.
        "prototype$__unlink__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.exists() instead.
        "prototype$__exists__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.universities.findById() instead.
        "prototype$__findById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.universities.destroyById() instead.
        "prototype$__destroyById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.universities.updateById() instead.
        "prototype$__updateById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.universities.link() instead.
        "prototype$__link__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.universities.unlink() instead.
        "prototype$__unlink__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.universities.exists() instead.
        "prototype$__exists__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.findById() instead.
        "prototype$__findById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.destroyById() instead.
        "prototype$__destroyById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.updateById() instead.
        "prototype$__updateById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.link() instead.
        "prototype$__link__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.unlink() instead.
        "prototype$__unlink__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.exists() instead.
        "prototype$__exists__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use CrawledApartment.floorPlans() instead.
        "prototype$__get__floorPlans": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.create() instead.
        "prototype$__create__floorPlans": {
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.destroyAll() instead.
        "prototype$__delete__floorPlans": {
          url: urlBase + "/crawledApartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.floorPlans.count() instead.
        "prototype$__count__floorPlans": {
          url: urlBase + "/crawledApartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.likeUsers() instead.
        "prototype$__get__likeUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.create() instead.
        "prototype$__create__likeUsers": {
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.destroyAll() instead.
        "prototype$__delete__likeUsers": {
          url: urlBase + "/crawledApartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.likeUsers.count() instead.
        "prototype$__count__likeUsers": {
          url: urlBase + "/crawledApartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.couponUsers() instead.
        "prototype$__get__couponUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.create() instead.
        "prototype$__create__couponUsers": {
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.destroyAll() instead.
        "prototype$__delete__couponUsers": {
          url: urlBase + "/crawledApartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.couponUsers.count() instead.
        "prototype$__count__couponUsers": {
          url: urlBase + "/crawledApartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.visitUsers() instead.
        "prototype$__get__visitUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.create() instead.
        "prototype$__create__visitUsers": {
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.destroyAll() instead.
        "prototype$__delete__visitUsers": {
          url: urlBase + "/crawledApartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.visitUsers.count() instead.
        "prototype$__count__visitUsers": {
          url: urlBase + "/crawledApartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers() instead.
        "prototype$__get__redirectUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.create() instead.
        "prototype$__create__redirectUsers": {
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.destroyAll() instead.
        "prototype$__delete__redirectUsers": {
          url: urlBase + "/crawledApartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.redirectUsers.count() instead.
        "prototype$__count__redirectUsers": {
          url: urlBase + "/crawledApartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/crawledApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/crawledApartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/crawledApartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.universities() instead.
        "prototype$__get__universities": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.universities.create() instead.
        "prototype$__create__universities": {
          url: urlBase + "/crawledApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.universities.destroyAll() instead.
        "prototype$__delete__universities": {
          url: urlBase + "/crawledApartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.universities.count() instead.
        "prototype$__count__universities": {
          url: urlBase + "/crawledApartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers() instead.
        "prototype$__get__roommateUsers": {
          isArray: true,
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.create() instead.
        "prototype$__create__roommateUsers": {
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.destroyAll() instead.
        "prototype$__delete__roommateUsers": {
          url: urlBase + "/crawledApartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use CrawledApartment.roommateUsers.count() instead.
        "prototype$__count__roommateUsers": {
          url: urlBase + "/crawledApartments/:id/roommateUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#create
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/crawledApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#createMany
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/crawledApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#upsert
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/crawledApartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#exists
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/crawledApartments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#findById
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/crawledApartments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#find
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/crawledApartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#findOne
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/crawledApartments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#updateAll
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/crawledApartments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#deleteById
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/crawledApartments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#count
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/crawledApartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#prototype$updateAttributes
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/crawledApartments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#createChangeStream
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/crawledApartments/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#updateOrCreate
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#update
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#destroyById
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#removeById
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CrawledApartment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.CrawledApartment#modelName
    * @propertyOf housingApiServices.CrawledApartment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `CrawledApartment`.
    */
    R.modelName = "CrawledApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.floorPlans
     * @header housingApiServices.CrawledApartment.floorPlans
     * @object
     * @description
     *
     * The object `CrawledApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#floorPlans CrawledApartment.floorPlans()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#floorPlans
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries floorPlans of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#count
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Counts floorPlans of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#create
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#createMany
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#destroyAll
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Deletes all floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#destroyById
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Delete a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#findById
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Find a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.floorPlans#updateById
         * @methodOf housingApiServices.CrawledApartment.floorPlans
         *
         * @description
         *
         * Update a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::crawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.likeUsers
     * @header housingApiServices.CrawledApartment.likeUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.likeUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#likeUsers CrawledApartment.likeUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#likeUsers
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries likeUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#count
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Counts likeUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#create
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#createMany
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#destroyAll
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Deletes all likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#destroyById
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Delete a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#exists
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Check the existence of likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#findById
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Find a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#link
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Add a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#unlink
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Remove the likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.likeUsers#updateById
         * @methodOf housingApiServices.CrawledApartment.likeUsers
         *
         * @description
         *
         * Update a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::crawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.couponUsers
     * @header housingApiServices.CrawledApartment.couponUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.couponUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#couponUsers CrawledApartment.couponUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#couponUsers
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries couponUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#count
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Counts couponUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#create
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#createMany
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#destroyAll
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Deletes all couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#destroyById
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Delete a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#exists
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Check the existence of couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#findById
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Find a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#link
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Add a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#unlink
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Remove the couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.couponUsers#updateById
         * @methodOf housingApiServices.CrawledApartment.couponUsers
         *
         * @description
         *
         * Update a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::crawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.visitUsers
     * @header housingApiServices.CrawledApartment.visitUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.visitUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#visitUsers CrawledApartment.visitUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#visitUsers
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries visitUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#count
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Counts visitUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#create
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#createMany
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#destroyAll
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Deletes all visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#destroyById
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Delete a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#exists
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Check the existence of visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#findById
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Find a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#link
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Add a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#unlink
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Remove the visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.visitUsers#updateById
         * @methodOf housingApiServices.CrawledApartment.visitUsers
         *
         * @description
         *
         * Update a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::crawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.redirectUsers
     * @header housingApiServices.CrawledApartment.redirectUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#redirectUsers CrawledApartment.redirectUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#redirectUsers
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries redirectUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#count
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Counts redirectUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#create
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#createMany
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#destroyAll
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Deletes all redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#destroyById
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Delete a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#exists
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Check the existence of redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#findById
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Find a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#link
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Add a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#unlink
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Remove the redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.redirectUsers#updateById
         * @methodOf housingApiServices.CrawledApartment.redirectUsers
         *
         * @description
         *
         * Update a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::crawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.tags
     * @header housingApiServices.CrawledApartment.tags
     * @object
     * @description
     *
     * The object `CrawledApartment.tags` groups methods
     * manipulating `Tag` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#tags CrawledApartment.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#tags
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries tags of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#count
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Counts tags of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#create
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#createMany
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#destroyAll
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#destroyById
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#exists
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#findById
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#link
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#unlink
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::crawledApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.tags#updateById
         * @methodOf housingApiServices.CrawledApartment.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::crawledApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.universities
     * @header housingApiServices.CrawledApartment.universities
     * @object
     * @description
     *
     * The object `CrawledApartment.universities` groups methods
     * manipulating `University` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#universities CrawledApartment.universities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#universities
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries universities of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#count
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Counts universities of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#create
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#createMany
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#destroyAll
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Deletes all universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#destroyById
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Delete a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#exists
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Check the existence of universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#findById
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Find a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#link
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Add a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#unlink
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Remove the universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::crawledApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.universities#updateById
         * @methodOf housingApiServices.CrawledApartment.universities
         *
         * @description
         *
         * Update a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::crawledApartment::universities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.roommateUsers
     * @header housingApiServices.CrawledApartment.roommateUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#roommateUsers CrawledApartment.roommateUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment#roommateUsers
         * @methodOf housingApiServices.CrawledApartment
         *
         * @description
         *
         * Queries roommateUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#count
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Counts roommateUsers of crawledApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#create
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#createMany
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#destroyAll
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Deletes all roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#destroyById
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Delete a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#exists
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Check the existence of roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#findById
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Find a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#link
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Add a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#unlink
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Remove the roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.CrawledApartment.roommateUsers#updateById
         * @methodOf housingApiServices.CrawledApartment.roommateUsers
         *
         * @description
         *
         * Update a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::crawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.SubmittedApartment
 * @header housingApiServices.SubmittedApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SubmittedApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SubmittedApartment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/submittedApartments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SubmittedApartment.floorPlans.findById() instead.
        "prototype$__findById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.destroyById() instead.
        "prototype$__destroyById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.updateById() instead.
        "prototype$__updateById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.findById() instead.
        "prototype$__findById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.destroyById() instead.
        "prototype$__destroyById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.updateById() instead.
        "prototype$__updateById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.link() instead.
        "prototype$__link__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.unlink() instead.
        "prototype$__unlink__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.exists() instead.
        "prototype$__exists__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.findById() instead.
        "prototype$__findById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.destroyById() instead.
        "prototype$__destroyById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.updateById() instead.
        "prototype$__updateById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.link() instead.
        "prototype$__link__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.unlink() instead.
        "prototype$__unlink__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.exists() instead.
        "prototype$__exists__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.findById() instead.
        "prototype$__findById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.destroyById() instead.
        "prototype$__destroyById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.updateById() instead.
        "prototype$__updateById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.link() instead.
        "prototype$__link__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.unlink() instead.
        "prototype$__unlink__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.exists() instead.
        "prototype$__exists__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.findById() instead.
        "prototype$__findById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.destroyById() instead.
        "prototype$__destroyById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.updateById() instead.
        "prototype$__updateById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.link() instead.
        "prototype$__link__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.unlink() instead.
        "prototype$__unlink__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.exists() instead.
        "prototype$__exists__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.universities.findById() instead.
        "prototype$__findById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.universities.destroyById() instead.
        "prototype$__destroyById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.universities.updateById() instead.
        "prototype$__updateById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.universities.link() instead.
        "prototype$__link__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.universities.unlink() instead.
        "prototype$__unlink__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.universities.exists() instead.
        "prototype$__exists__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.prospectiveApartment() instead.
        "prototype$__get__prospectiveApartment": {
          url: urlBase + "/submittedApartments/:id/prospectiveApartment",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.findById() instead.
        "prototype$__findById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.destroyById() instead.
        "prototype$__destroyById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.updateById() instead.
        "prototype$__updateById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.link() instead.
        "prototype$__link__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.unlink() instead.
        "prototype$__unlink__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.exists() instead.
        "prototype$__exists__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans() instead.
        "prototype$__get__floorPlans": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.create() instead.
        "prototype$__create__floorPlans": {
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.destroyAll() instead.
        "prototype$__delete__floorPlans": {
          url: urlBase + "/submittedApartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.floorPlans.count() instead.
        "prototype$__count__floorPlans": {
          url: urlBase + "/submittedApartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers() instead.
        "prototype$__get__likeUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.create() instead.
        "prototype$__create__likeUsers": {
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.destroyAll() instead.
        "prototype$__delete__likeUsers": {
          url: urlBase + "/submittedApartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.likeUsers.count() instead.
        "prototype$__count__likeUsers": {
          url: urlBase + "/submittedApartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers() instead.
        "prototype$__get__couponUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.create() instead.
        "prototype$__create__couponUsers": {
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.destroyAll() instead.
        "prototype$__delete__couponUsers": {
          url: urlBase + "/submittedApartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.couponUsers.count() instead.
        "prototype$__count__couponUsers": {
          url: urlBase + "/submittedApartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers() instead.
        "prototype$__get__visitUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.create() instead.
        "prototype$__create__visitUsers": {
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.destroyAll() instead.
        "prototype$__delete__visitUsers": {
          url: urlBase + "/submittedApartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.visitUsers.count() instead.
        "prototype$__count__visitUsers": {
          url: urlBase + "/submittedApartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers() instead.
        "prototype$__get__redirectUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.create() instead.
        "prototype$__create__redirectUsers": {
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.destroyAll() instead.
        "prototype$__delete__redirectUsers": {
          url: urlBase + "/submittedApartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.redirectUsers.count() instead.
        "prototype$__count__redirectUsers": {
          url: urlBase + "/submittedApartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/submittedApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/submittedApartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/submittedApartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.universities() instead.
        "prototype$__get__universities": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.universities.create() instead.
        "prototype$__create__universities": {
          url: urlBase + "/submittedApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.universities.destroyAll() instead.
        "prototype$__delete__universities": {
          url: urlBase + "/submittedApartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.universities.count() instead.
        "prototype$__count__universities": {
          url: urlBase + "/submittedApartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers() instead.
        "prototype$__get__roommateUsers": {
          isArray: true,
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.create() instead.
        "prototype$__create__roommateUsers": {
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.destroyAll() instead.
        "prototype$__delete__roommateUsers": {
          url: urlBase + "/submittedApartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use SubmittedApartment.roommateUsers.count() instead.
        "prototype$__count__roommateUsers": {
          url: urlBase + "/submittedApartments/:id/roommateUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#create
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/submittedApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#createMany
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/submittedApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#upsert
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/submittedApartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#exists
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/submittedApartments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#findById
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/submittedApartments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#find
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/submittedApartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#findOne
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/submittedApartments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#updateAll
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/submittedApartments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#deleteById
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/submittedApartments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#count
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/submittedApartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#prototype$updateAttributes
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/submittedApartments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#createChangeStream
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/submittedApartments/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#getSubmittedApartmentByUser
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `userId` – `{string}` - 
         *
         *  - `prospectiveApartmentId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `pendingApartment` – `{object=}` - 
         */
        "getSubmittedApartmentByUser": {
          url: urlBase + "/submittedApartments/getSubmittedApartmentByUser",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#updateSubmittedApartmentByUser
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `userId` – `{string}` - 
         *
         *  - `prospectiveApartmentId` – `{string}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `submittedApartment` – `{object=}` - 
         */
        "updateSubmittedApartmentByUser": {
          url: urlBase + "/submittedApartments/updateSubmittedApartmentByUser",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#updateOrCreate
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#update
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#destroyById
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#removeById
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SubmittedApartment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.SubmittedApartment#modelName
    * @propertyOf housingApiServices.SubmittedApartment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SubmittedApartment`.
    */
    R.modelName = "SubmittedApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.floorPlans
     * @header housingApiServices.SubmittedApartment.floorPlans
     * @object
     * @description
     *
     * The object `SubmittedApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#floorPlans SubmittedApartment.floorPlans()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#floorPlans
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries floorPlans of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#count
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Counts floorPlans of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#create
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#createMany
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Deletes all floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#destroyById
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Delete a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#findById
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Find a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.floorPlans#updateById
         * @methodOf housingApiServices.SubmittedApartment.floorPlans
         *
         * @description
         *
         * Update a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::submittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.likeUsers
     * @header housingApiServices.SubmittedApartment.likeUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.likeUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#likeUsers SubmittedApartment.likeUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#likeUsers
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries likeUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#count
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Counts likeUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#create
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#createMany
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Deletes all likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#destroyById
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Delete a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#exists
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Check the existence of likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#findById
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Find a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#link
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Add a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#unlink
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Remove the likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.likeUsers#updateById
         * @methodOf housingApiServices.SubmittedApartment.likeUsers
         *
         * @description
         *
         * Update a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::submittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.couponUsers
     * @header housingApiServices.SubmittedApartment.couponUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.couponUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#couponUsers SubmittedApartment.couponUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#couponUsers
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries couponUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#count
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Counts couponUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#create
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#createMany
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Deletes all couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#destroyById
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Delete a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#exists
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Check the existence of couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#findById
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Find a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#link
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Add a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#unlink
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Remove the couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.couponUsers#updateById
         * @methodOf housingApiServices.SubmittedApartment.couponUsers
         *
         * @description
         *
         * Update a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::submittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.visitUsers
     * @header housingApiServices.SubmittedApartment.visitUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.visitUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#visitUsers SubmittedApartment.visitUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#visitUsers
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries visitUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#count
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Counts visitUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#create
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#createMany
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Deletes all visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#destroyById
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Delete a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#exists
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Check the existence of visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#findById
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Find a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#link
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Add a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#unlink
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Remove the visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.visitUsers#updateById
         * @methodOf housingApiServices.SubmittedApartment.visitUsers
         *
         * @description
         *
         * Update a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::submittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.redirectUsers
     * @header housingApiServices.SubmittedApartment.redirectUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#redirectUsers SubmittedApartment.redirectUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#redirectUsers
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries redirectUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#count
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Counts redirectUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#create
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#createMany
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Deletes all redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#destroyById
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Delete a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#exists
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Check the existence of redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#findById
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Find a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#link
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Add a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#unlink
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Remove the redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.redirectUsers#updateById
         * @methodOf housingApiServices.SubmittedApartment.redirectUsers
         *
         * @description
         *
         * Update a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::submittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.tags
     * @header housingApiServices.SubmittedApartment.tags
     * @object
     * @description
     *
     * The object `SubmittedApartment.tags` groups methods
     * manipulating `Tag` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#tags SubmittedApartment.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#tags
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries tags of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#count
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Counts tags of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#create
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#createMany
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#destroyById
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#exists
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#findById
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#link
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#unlink
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::submittedApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.tags#updateById
         * @methodOf housingApiServices.SubmittedApartment.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::submittedApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.universities
     * @header housingApiServices.SubmittedApartment.universities
     * @object
     * @description
     *
     * The object `SubmittedApartment.universities` groups methods
     * manipulating `University` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#universities SubmittedApartment.universities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#universities
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries universities of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#count
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Counts universities of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#create
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#createMany
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Deletes all universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#destroyById
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Delete a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#exists
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Check the existence of universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#findById
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Find a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#link
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Add a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#unlink
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Remove the universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.universities#updateById
         * @methodOf housingApiServices.SubmittedApartment.universities
         *
         * @description
         *
         * Update a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::submittedApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#prospectiveApartment
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Fetches belongsTo relation prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R.prospectiveApartment = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::get::submittedApartment::prospectiveApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.roommateUsers
     * @header housingApiServices.SubmittedApartment.roommateUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#roommateUsers SubmittedApartment.roommateUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment#roommateUsers
         * @methodOf housingApiServices.SubmittedApartment
         *
         * @description
         *
         * Queries roommateUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#count
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Counts roommateUsers of submittedApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#create
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#createMany
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#destroyAll
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Deletes all roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#destroyById
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Delete a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#exists
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Check the existence of roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#findById
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Find a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#link
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Add a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#unlink
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Remove the roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.SubmittedApartment.roommateUsers#updateById
         * @methodOf housingApiServices.SubmittedApartment.roommateUsers
         *
         * @description
         *
         * Update a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::submittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.ProspectiveApartment
 * @header housingApiServices.ProspectiveApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ProspectiveApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "ProspectiveApartment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/prospectiveApartments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use ProspectiveApartment.floorPlans.findById() instead.
        "prototype$__findById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.destroyById() instead.
        "prototype$__destroyById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.updateById() instead.
        "prototype$__updateById__floorPlans": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.findById() instead.
        "prototype$__findById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.destroyById() instead.
        "prototype$__destroyById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.updateById() instead.
        "prototype$__updateById__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.link() instead.
        "prototype$__link__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.unlink() instead.
        "prototype$__unlink__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.exists() instead.
        "prototype$__exists__likeUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.findById() instead.
        "prototype$__findById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.destroyById() instead.
        "prototype$__destroyById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.updateById() instead.
        "prototype$__updateById__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.link() instead.
        "prototype$__link__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.unlink() instead.
        "prototype$__unlink__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.exists() instead.
        "prototype$__exists__couponUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.findById() instead.
        "prototype$__findById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.destroyById() instead.
        "prototype$__destroyById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.updateById() instead.
        "prototype$__updateById__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.link() instead.
        "prototype$__link__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.unlink() instead.
        "prototype$__unlink__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.exists() instead.
        "prototype$__exists__visitUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.findById() instead.
        "prototype$__findById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyById() instead.
        "prototype$__destroyById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.updateById() instead.
        "prototype$__updateById__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.link() instead.
        "prototype$__link__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.unlink() instead.
        "prototype$__unlink__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.exists() instead.
        "prototype$__exists__redirectUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#prototype$__get__pendingApartments
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Fetches hasOne relation pendingApartments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "prototype$__get__pendingApartments": {
          url: urlBase + "/prospectiveApartments/:id/pendingApartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#prototype$__create__pendingApartments
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Creates a new instance in pendingApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "prototype$__create__pendingApartments": {
          url: urlBase + "/prospectiveApartments/:id/pendingApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#prototype$__update__pendingApartments
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Update pendingApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "prototype$__update__pendingApartments": {
          url: urlBase + "/prospectiveApartments/:id/pendingApartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#prototype$__destroy__pendingApartments
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Deletes pendingApartments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__pendingApartments": {
          url: urlBase + "/prospectiveApartments/:id/pendingApartments",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.universities.findById() instead.
        "prototype$__findById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.universities.destroyById() instead.
        "prototype$__destroyById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.universities.updateById() instead.
        "prototype$__updateById__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.universities.link() instead.
        "prototype$__link__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.universities.unlink() instead.
        "prototype$__unlink__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.universities.exists() instead.
        "prototype$__exists__universities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.findById() instead.
        "prototype$__findById__manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.destroyById() instead.
        "prototype$__destroyById__manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.updateById() instead.
        "prototype$__updateById__manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.link() instead.
        "prototype$__link__manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.unlink() instead.
        "prototype$__unlink__manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.exists() instead.
        "prototype$__exists__manageUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.findById() instead.
        "prototype$__findById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyById() instead.
        "prototype$__destroyById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.updateById() instead.
        "prototype$__updateById__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.link() instead.
        "prototype$__link__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.unlink() instead.
        "prototype$__unlink__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.exists() instead.
        "prototype$__exists__roommateUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans() instead.
        "prototype$__get__floorPlans": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.create() instead.
        "prototype$__create__floorPlans": {
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.destroyAll() instead.
        "prototype$__delete__floorPlans": {
          url: urlBase + "/prospectiveApartments/:id/floorPlans",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.floorPlans.count() instead.
        "prototype$__count__floorPlans": {
          url: urlBase + "/prospectiveApartments/:id/floorPlans/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers() instead.
        "prototype$__get__likeUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.create() instead.
        "prototype$__create__likeUsers": {
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.destroyAll() instead.
        "prototype$__delete__likeUsers": {
          url: urlBase + "/prospectiveApartments/:id/likeUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.likeUsers.count() instead.
        "prototype$__count__likeUsers": {
          url: urlBase + "/prospectiveApartments/:id/likeUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers() instead.
        "prototype$__get__couponUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.create() instead.
        "prototype$__create__couponUsers": {
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.destroyAll() instead.
        "prototype$__delete__couponUsers": {
          url: urlBase + "/prospectiveApartments/:id/couponUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.couponUsers.count() instead.
        "prototype$__count__couponUsers": {
          url: urlBase + "/prospectiveApartments/:id/couponUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers() instead.
        "prototype$__get__visitUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.create() instead.
        "prototype$__create__visitUsers": {
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.destroyAll() instead.
        "prototype$__delete__visitUsers": {
          url: urlBase + "/prospectiveApartments/:id/visitUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.visitUsers.count() instead.
        "prototype$__count__visitUsers": {
          url: urlBase + "/prospectiveApartments/:id/visitUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers() instead.
        "prototype$__get__redirectUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.create() instead.
        "prototype$__create__redirectUsers": {
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyAll() instead.
        "prototype$__delete__redirectUsers": {
          url: urlBase + "/prospectiveApartments/:id/redirectUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.redirectUsers.count() instead.
        "prototype$__count__redirectUsers": {
          url: urlBase + "/prospectiveApartments/:id/redirectUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/prospectiveApartments/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/prospectiveApartments/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.universities() instead.
        "prototype$__get__universities": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.universities.create() instead.
        "prototype$__create__universities": {
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.universities.destroyAll() instead.
        "prototype$__delete__universities": {
          url: urlBase + "/prospectiveApartments/:id/universities",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.universities.count() instead.
        "prototype$__count__universities": {
          url: urlBase + "/prospectiveApartments/:id/universities/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers() instead.
        "prototype$__get__manageUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.create() instead.
        "prototype$__create__manageUsers": {
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.destroyAll() instead.
        "prototype$__delete__manageUsers": {
          url: urlBase + "/prospectiveApartments/:id/manageUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.manageUsers.count() instead.
        "prototype$__count__manageUsers": {
          url: urlBase + "/prospectiveApartments/:id/manageUsers/count",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers() instead.
        "prototype$__get__roommateUsers": {
          isArray: true,
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "GET"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.create() instead.
        "prototype$__create__roommateUsers": {
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "POST"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyAll() instead.
        "prototype$__delete__roommateUsers": {
          url: urlBase + "/prospectiveApartments/:id/roommateUsers",
          method: "DELETE"
        },

        // INTERNAL. Use ProspectiveApartment.roommateUsers.count() instead.
        "prototype$__count__roommateUsers": {
          url: urlBase + "/prospectiveApartments/:id/roommateUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#create
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/prospectiveApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#createMany
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/prospectiveApartments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#upsert
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/prospectiveApartments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#exists
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/prospectiveApartments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#findById
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/prospectiveApartments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#find
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/prospectiveApartments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#findOne
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/prospectiveApartments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#updateAll
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/prospectiveApartments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#deleteById
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/prospectiveApartments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#count
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/prospectiveApartments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#prototype$updateAttributes
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/prospectiveApartments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#createChangeStream
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/prospectiveApartments/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#sendEmail
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `to` – `{string}` - email to
         *
         *  - `html` – `{string}` - email html
         *
         *  - `subject` – `{string}` - email subject
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "sendEmail": {
          url: urlBase + "/prospectiveApartments/send-email",
          method: "POST"
        },

        // INTERNAL. Use User.manageProspectiveApartments.findById() instead.
        "::findById::user::manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
          method: "GET"
        },

        // INTERNAL. Use User.manageProspectiveApartments.destroyById() instead.
        "::destroyById::user::manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.manageProspectiveApartments.updateById() instead.
        "::updateById::user::manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.manageProspectiveApartments.link() instead.
        "::link::user::manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use User.manageProspectiveApartments.unlink() instead.
        "::unlink::user::manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use User.manageProspectiveApartments.exists() instead.
        "::exists::user::manageProspectiveApartments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use User.manageProspectiveApartments() instead.
        "::get::user::manageProspectiveApartments": {
          isArray: true,
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "GET"
        },

        // INTERNAL. Use User.manageProspectiveApartments.create() instead.
        "::create::user::manageProspectiveApartments": {
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "POST"
        },

        // INTERNAL. Use User.manageProspectiveApartments.createMany() instead.
        "::createMany::user::manageProspectiveApartments": {
          isArray: true,
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "POST"
        },

        // INTERNAL. Use User.manageProspectiveApartments.destroyAll() instead.
        "::delete::user::manageProspectiveApartments": {
          url: urlBase + "/users/:id/manageProspectiveApartments",
          method: "DELETE"
        },

        // INTERNAL. Use User.manageProspectiveApartments.count() instead.
        "::count::user::manageProspectiveApartments": {
          url: urlBase + "/users/:id/manageProspectiveApartments/count",
          method: "GET"
        },

        // INTERNAL. Use SubmittedApartment.prospectiveApartment() instead.
        "::get::submittedApartment::prospectiveApartment": {
          url: urlBase + "/submittedApartments/:id/prospectiveApartment",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#updateOrCreate
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#update
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#destroyById
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#removeById
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ProspectiveApartment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.ProspectiveApartment#modelName
    * @propertyOf housingApiServices.ProspectiveApartment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `ProspectiveApartment`.
    */
    R.modelName = "ProspectiveApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.floorPlans
     * @header housingApiServices.ProspectiveApartment.floorPlans
     * @object
     * @description
     *
     * The object `ProspectiveApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#floorPlans ProspectiveApartment.floorPlans()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#floorPlans
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries floorPlans of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#count
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Counts floorPlans of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#create
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#createMany
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Creates a new instance in floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Deletes all floorPlans of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Delete a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#findById
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Find a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.floorPlans#updateById
         * @methodOf housingApiServices.ProspectiveApartment.floorPlans
         *
         * @description
         *
         * Update a related item by id for floorPlans.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for floorPlans
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::prospectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.likeUsers
     * @header housingApiServices.ProspectiveApartment.likeUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.likeUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#likeUsers ProspectiveApartment.likeUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#likeUsers
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries likeUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#count
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Counts likeUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#create
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#createMany
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Creates a new instance in likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Deletes all likeUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Delete a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#exists
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Check the existence of likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#findById
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Find a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#link
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Add a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#unlink
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Remove the likeUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.likeUsers#updateById
         * @methodOf housingApiServices.ProspectiveApartment.likeUsers
         *
         * @description
         *
         * Update a related item by id for likeUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for likeUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::prospectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.couponUsers
     * @header housingApiServices.ProspectiveApartment.couponUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.couponUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#couponUsers ProspectiveApartment.couponUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#couponUsers
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries couponUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#count
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Counts couponUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#create
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#createMany
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Creates a new instance in couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Deletes all couponUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Delete a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#exists
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Check the existence of couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#findById
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Find a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#link
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Add a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#unlink
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Remove the couponUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.couponUsers#updateById
         * @methodOf housingApiServices.ProspectiveApartment.couponUsers
         *
         * @description
         *
         * Update a related item by id for couponUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for couponUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::prospectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.visitUsers
     * @header housingApiServices.ProspectiveApartment.visitUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.visitUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#visitUsers ProspectiveApartment.visitUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#visitUsers
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries visitUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#count
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Counts visitUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#create
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#createMany
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Creates a new instance in visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Deletes all visitUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Delete a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#exists
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Check the existence of visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#findById
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Find a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#link
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Add a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#unlink
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Remove the visitUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.visitUsers#updateById
         * @methodOf housingApiServices.ProspectiveApartment.visitUsers
         *
         * @description
         *
         * Update a related item by id for visitUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for visitUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::prospectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.redirectUsers
     * @header housingApiServices.ProspectiveApartment.redirectUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#redirectUsers ProspectiveApartment.redirectUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#redirectUsers
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries redirectUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#count
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Counts redirectUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#create
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#createMany
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Creates a new instance in redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Deletes all redirectUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Delete a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#exists
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Check the existence of redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#findById
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Find a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#link
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Add a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#unlink
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Remove the redirectUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.redirectUsers#updateById
         * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
         *
         * @description
         *
         * Update a related item by id for redirectUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for redirectUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::prospectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.tags
     * @header housingApiServices.ProspectiveApartment.tags
     * @object
     * @description
     *
     * The object `ProspectiveApartment.tags` groups methods
     * manipulating `Tag` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#tags ProspectiveApartment.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#tags
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries tags of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#count
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Counts tags of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#create
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#createMany
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#exists
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#findById
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#link
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#unlink
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.tags#updateById
         * @methodOf housingApiServices.ProspectiveApartment.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::prospectiveApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.universities
     * @header housingApiServices.ProspectiveApartment.universities
     * @object
     * @description
     *
     * The object `ProspectiveApartment.universities` groups methods
     * manipulating `University` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#universities ProspectiveApartment.universities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#universities
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries universities of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#count
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Counts universities of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#create
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#createMany
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Creates a new instance in universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Deletes all universities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Delete a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#exists
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Check the existence of universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#findById
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Find a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#link
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Add a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#unlink
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Remove the universities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.universities#updateById
         * @methodOf housingApiServices.ProspectiveApartment.universities
         *
         * @description
         *
         * Update a related item by id for universities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for universities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `University` object.)
         * </em>
         */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::prospectiveApartment::universities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.manageUsers
     * @header housingApiServices.ProspectiveApartment.manageUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.manageUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#manageUsers ProspectiveApartment.manageUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#manageUsers
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries manageUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#count
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Counts manageUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.manageUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#create
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Creates a new instance in manageUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#createMany
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Creates a new instance in manageUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Deletes all manageUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.manageUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Delete a related item by id for manageUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for manageUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.manageUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#exists
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Check the existence of manageUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for manageUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#findById
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Find a related item by id for manageUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for manageUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#link
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Add a related item by id for manageUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for manageUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#unlink
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Remove the manageUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for manageUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.manageUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.manageUsers#updateById
         * @methodOf housingApiServices.ProspectiveApartment.manageUsers
         *
         * @description
         *
         * Update a related item by id for manageUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for manageUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.manageUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::prospectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.roommateUsers
     * @header housingApiServices.ProspectiveApartment.roommateUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#roommateUsers ProspectiveApartment.roommateUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment#roommateUsers
         * @methodOf housingApiServices.ProspectiveApartment
         *
         * @description
         *
         * Queries roommateUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#count
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Counts roommateUsers of prospectiveApartment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#create
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#createMany
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Creates a new instance in roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#destroyAll
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Deletes all roommateUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#destroyById
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Delete a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#exists
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Check the existence of roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#findById
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Find a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#link
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Add a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#unlink
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Remove the roommateUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ProspectiveApartment.roommateUsers#updateById
         * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
         *
         * @description
         *
         * Update a related item by id for roommateUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - apartment id
         *
         *  - `fk` – `{*}` - Foreign key for roommateUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::prospectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.Container
 * @header housingApiServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Container",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/containers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name housingApiServices.Container#getContainers
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#createContainer
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createContainer": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#destroyContainer
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "destroyContainer": {
          url: urlBase + "/containers/:container",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#getContainer
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/containers/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#getFiles
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/containers/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#getFile
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#removeFile
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "removeFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#upload
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/containers/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.Container#download
         * @methodOf housingApiServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/containers/:container/download/:file",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name housingApiServices.Container#modelName
    * @propertyOf housingApiServices.Container
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Container`.
    */
    R.modelName = "Container";


    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.Email
 * @header housingApiServices.Email
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Email` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Email",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Emails/:id",
      { 'id': '@id' },
      {
      }
    );




    /**
    * @ngdoc property
    * @name housingApiServices.Email#modelName
    * @propertyOf housingApiServices.Email
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Email`.
    */
    R.modelName = "Email";


    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.ApplyForFloorPlan
 * @header housingApiServices.ApplyForFloorPlan
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ApplyForFloorPlan` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "ApplyForFloorPlan",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/applyForFloorPlans/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use ApplyForFloorPlan.floorPlan() instead.
        "prototype$__get__floorPlan": {
          url: urlBase + "/applyForFloorPlans/:id/floorPlan",
          method: "GET"
        },

        // INTERNAL. Use ApplyForFloorPlan.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/applyForFloorPlans/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#create
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/applyForFloorPlans",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#createMany
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/applyForFloorPlans",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#upsert
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/applyForFloorPlans",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#exists
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/applyForFloorPlans/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#findById
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/applyForFloorPlans/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#find
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/applyForFloorPlans",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#findOne
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/applyForFloorPlans/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#updateAll
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/applyForFloorPlans/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#deleteById
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/applyForFloorPlans/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#count
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/applyForFloorPlans/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#prototype$updateAttributes
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/applyForFloorPlans/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#createChangeStream
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/applyForFloorPlans/change-stream",
          method: "POST"
        },

        // INTERNAL. Use InvitedRoommate.applyForFloorPlan() instead.
        "::get::invitedRoommate::applyForFloorPlan": {
          url: urlBase + "/invitedRoommates/:id/applyForFloorPlan",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#updateOrCreate
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#update
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#destroyById
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#removeById
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.ApplyForFloorPlan#modelName
    * @propertyOf housingApiServices.ApplyForFloorPlan
    * @description
    * The name of the model represented by this $resource,
    * i.e. `ApplyForFloorPlan`.
    */
    R.modelName = "ApplyForFloorPlan";


        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#floorPlan
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Fetches belongsTo relation floorPlan.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `FloorPlan` object.)
         * </em>
         */
        R.floorPlan = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::applyForFloorPlan::floorPlan"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name housingApiServices.ApplyForFloorPlan#user
         * @methodOf housingApiServices.ApplyForFloorPlan
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::applyForFloorPlan::user"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name housingApiServices.InvitedRoommate
 * @header housingApiServices.InvitedRoommate
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InvitedRoommate` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "InvitedRoommate",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/invitedRoommates/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use InvitedRoommate.applyForFloorPlan() instead.
        "prototype$__get__applyForFloorPlan": {
          url: urlBase + "/invitedRoommates/:id/applyForFloorPlan",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#create
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/invitedRoommates",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#createMany
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/invitedRoommates",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#upsert
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/invitedRoommates",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#exists
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/invitedRoommates/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#findById
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/invitedRoommates/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#find
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/invitedRoommates",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#findOne
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/invitedRoommates/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#updateAll
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/invitedRoommates/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#deleteById
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/invitedRoommates/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#count
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/invitedRoommates/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#prototype$updateAttributes
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/invitedRoommates/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#createChangeStream
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/invitedRoommates/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#updateOrCreate
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#update
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#destroyById
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#removeById
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InvitedRoommate` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name housingApiServices.InvitedRoommate#modelName
    * @propertyOf housingApiServices.InvitedRoommate
    * @description
    * The name of the model represented by this $resource,
    * i.e. `InvitedRoommate`.
    */
    R.modelName = "InvitedRoommate";


        /**
         * @ngdoc method
         * @name housingApiServices.InvitedRoommate#applyForFloorPlan
         * @methodOf housingApiServices.InvitedRoommate
         *
         * @description
         *
         * Fetches belongsTo relation applyForFloorPlan.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `ApplyForFloorPlan` object.)
         * </em>
         */
        R.applyForFloorPlan = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::get::invitedRoommate::applyForFloorPlan"];
          return action.apply(R, arguments);
        };

    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch(err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name housingApiServices.LoopBackResourceProvider
   * @header housingApiServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#setUrlBase
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#getUrlBase
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);
