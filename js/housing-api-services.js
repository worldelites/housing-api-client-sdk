// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "housingApiServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name housingApiServices
 * @module
 * @description
 *
 * The `housingApiServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("housingApiServices", ['ngResource']);

/**
 * @ngdoc object
 * @name housingApiServices.User
 * @header housingApiServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/users/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__findById__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__destroyById__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__updateById__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.likeApartments.findById() instead.
            "prototype$__findById__likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.likeApartments.destroyById() instead.
            "prototype$__destroyById__likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.likeApartments.updateById() instead.
            "prototype$__updateById__likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.likeApartments.link() instead.
            "prototype$__link__likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.likeApartments.unlink() instead.
            "prototype$__unlink__likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.likeApartments.exists() instead.
            "prototype$__exists__likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.couponApartments.findById() instead.
            "prototype$__findById__couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.couponApartments.destroyById() instead.
            "prototype$__destroyById__couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.couponApartments.updateById() instead.
            "prototype$__updateById__couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.couponApartments.link() instead.
            "prototype$__link__couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.couponApartments.unlink() instead.
            "prototype$__unlink__couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.couponApartments.exists() instead.
            "prototype$__exists__couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.visitApartments.findById() instead.
            "prototype$__findById__visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.visitApartments.destroyById() instead.
            "prototype$__destroyById__visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.visitApartments.updateById() instead.
            "prototype$__updateById__visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.visitApartments.link() instead.
            "prototype$__link__visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.visitApartments.unlink() instead.
            "prototype$__unlink__visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.visitApartments.exists() instead.
            "prototype$__exists__visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.redirectApartments.findById() instead.
            "prototype$__findById__redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.redirectApartments.destroyById() instead.
            "prototype$__destroyById__redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.redirectApartments.updateById() instead.
            "prototype$__updateById__redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.redirectApartments.link() instead.
            "prototype$__link__redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.redirectApartments.unlink() instead.
            "prototype$__unlink__redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.redirectApartments.exists() instead.
            "prototype$__exists__redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.manageProspectiveApartments.findById() instead.
            "prototype$__findById__manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.manageProspectiveApartments.destroyById() instead.
            "prototype$__destroyById__manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.manageProspectiveApartments.updateById() instead.
            "prototype$__updateById__manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.manageProspectiveApartments.link() instead.
            "prototype$__link__manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.manageProspectiveApartments.unlink() instead.
            "prototype$__unlink__manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.manageProspectiveApartments.exists() instead.
            "prototype$__exists__manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.roommateApartments.findById() instead.
            "prototype$__findById__roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roommateApartments.destroyById() instead.
            "prototype$__destroyById__roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roommateApartments.updateById() instead.
            "prototype$__updateById__roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roommateApartments.link() instead.
            "prototype$__link__roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roommateApartments.unlink() instead.
            "prototype$__unlink__roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roommateApartments.exists() instead.
            "prototype$__exists__roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.applyForFloorPlans.findById() instead.
            "prototype$__findById__applyForFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyForFloorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.applyForFloorPlans.destroyById() instead.
            "prototype$__destroyById__applyForFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyForFloorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyForFloorPlans.updateById() instead.
            "prototype$__updateById__applyForFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyForFloorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.applyFloorPlans.findById() instead.
            "prototype$__findById__applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.applyFloorPlans.destroyById() instead.
            "prototype$__destroyById__applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyFloorPlans.updateById() instead.
            "prototype$__updateById__applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.applyFloorPlans.link() instead.
            "prototype$__link__applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.applyFloorPlans.unlink() instead.
            "prototype$__unlink__applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyFloorPlans.exists() instead.
            "prototype$__exists__applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.wishedApartments.findById() instead.
            "prototype$__findById__wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.wishedApartments.destroyById() instead.
            "prototype$__destroyById__wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.wishedApartments.updateById() instead.
            "prototype$__updateById__wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.wishedApartments.link() instead.
            "prototype$__link__wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.wishedApartments.unlink() instead.
            "prototype$__unlink__wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.wishedApartments.exists() instead.
            "prototype$__exists__wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__get__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__create__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__delete__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$__count__accessTokens
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Counts accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/users/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use User.likeApartments() instead.
            "prototype$__get__likeApartments": {
              isArray: true,
              url: urlBase + "/users/:id/likeApartments",
              method: "GET",
            },

            // INTERNAL. Use User.likeApartments.create() instead.
            "prototype$__create__likeApartments": {
              url: urlBase + "/users/:id/likeApartments",
              method: "POST",
            },

            // INTERNAL. Use User.likeApartments.destroyAll() instead.
            "prototype$__delete__likeApartments": {
              url: urlBase + "/users/:id/likeApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.likeApartments.count() instead.
            "prototype$__count__likeApartments": {
              url: urlBase + "/users/:id/likeApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.couponApartments() instead.
            "prototype$__get__couponApartments": {
              isArray: true,
              url: urlBase + "/users/:id/couponApartments",
              method: "GET",
            },

            // INTERNAL. Use User.couponApartments.create() instead.
            "prototype$__create__couponApartments": {
              url: urlBase + "/users/:id/couponApartments",
              method: "POST",
            },

            // INTERNAL. Use User.couponApartments.destroyAll() instead.
            "prototype$__delete__couponApartments": {
              url: urlBase + "/users/:id/couponApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.couponApartments.count() instead.
            "prototype$__count__couponApartments": {
              url: urlBase + "/users/:id/couponApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.visitApartments() instead.
            "prototype$__get__visitApartments": {
              isArray: true,
              url: urlBase + "/users/:id/visitApartments",
              method: "GET",
            },

            // INTERNAL. Use User.visitApartments.create() instead.
            "prototype$__create__visitApartments": {
              url: urlBase + "/users/:id/visitApartments",
              method: "POST",
            },

            // INTERNAL. Use User.visitApartments.destroyAll() instead.
            "prototype$__delete__visitApartments": {
              url: urlBase + "/users/:id/visitApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.visitApartments.count() instead.
            "prototype$__count__visitApartments": {
              url: urlBase + "/users/:id/visitApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.redirectApartments() instead.
            "prototype$__get__redirectApartments": {
              isArray: true,
              url: urlBase + "/users/:id/redirectApartments",
              method: "GET",
            },

            // INTERNAL. Use User.redirectApartments.create() instead.
            "prototype$__create__redirectApartments": {
              url: urlBase + "/users/:id/redirectApartments",
              method: "POST",
            },

            // INTERNAL. Use User.redirectApartments.destroyAll() instead.
            "prototype$__delete__redirectApartments": {
              url: urlBase + "/users/:id/redirectApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.redirectApartments.count() instead.
            "prototype$__count__redirectApartments": {
              url: urlBase + "/users/:id/redirectApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.manageProspectiveApartments() instead.
            "prototype$__get__manageProspectiveApartments": {
              isArray: true,
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "GET",
            },

            // INTERNAL. Use User.manageProspectiveApartments.create() instead.
            "prototype$__create__manageProspectiveApartments": {
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "POST",
            },

            // INTERNAL. Use User.manageProspectiveApartments.destroyAll() instead.
            "prototype$__delete__manageProspectiveApartments": {
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.manageProspectiveApartments.count() instead.
            "prototype$__count__manageProspectiveApartments": {
              url: urlBase + "/users/:id/manageProspectiveApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.roommateApartments() instead.
            "prototype$__get__roommateApartments": {
              isArray: true,
              url: urlBase + "/users/:id/roommateApartments",
              method: "GET",
            },

            // INTERNAL. Use User.roommateApartments.create() instead.
            "prototype$__create__roommateApartments": {
              url: urlBase + "/users/:id/roommateApartments",
              method: "POST",
            },

            // INTERNAL. Use User.roommateApartments.destroyAll() instead.
            "prototype$__delete__roommateApartments": {
              url: urlBase + "/users/:id/roommateApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.roommateApartments.count() instead.
            "prototype$__count__roommateApartments": {
              url: urlBase + "/users/:id/roommateApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.applyForFloorPlans() instead.
            "prototype$__get__applyForFloorPlans": {
              isArray: true,
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "GET",
            },

            // INTERNAL. Use User.applyForFloorPlans.create() instead.
            "prototype$__create__applyForFloorPlans": {
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "POST",
            },

            // INTERNAL. Use User.applyForFloorPlans.destroyAll() instead.
            "prototype$__delete__applyForFloorPlans": {
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyForFloorPlans.count() instead.
            "prototype$__count__applyForFloorPlans": {
              url: urlBase + "/users/:id/applyForFloorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use User.applyFloorPlans() instead.
            "prototype$__get__applyFloorPlans": {
              isArray: true,
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "GET",
            },

            // INTERNAL. Use User.applyFloorPlans.create() instead.
            "prototype$__create__applyFloorPlans": {
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "POST",
            },

            // INTERNAL. Use User.applyFloorPlans.destroyAll() instead.
            "prototype$__delete__applyFloorPlans": {
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyFloorPlans.count() instead.
            "prototype$__count__applyFloorPlans": {
              url: urlBase + "/users/:id/applyFloorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use User.wishedApartments() instead.
            "prototype$__get__wishedApartments": {
              isArray: true,
              url: urlBase + "/users/:id/wishedApartments",
              method: "GET",
            },

            // INTERNAL. Use User.wishedApartments.create() instead.
            "prototype$__create__wishedApartments": {
              url: urlBase + "/users/:id/wishedApartments",
              method: "POST",
            },

            // INTERNAL. Use User.wishedApartments.destroyAll() instead.
            "prototype$__delete__wishedApartments": {
              url: urlBase + "/users/:id/wishedApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.wishedApartments.count() instead.
            "prototype$__count__wishedApartments": {
              url: urlBase + "/users/:id/wishedApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#create
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#createMany
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#upsert
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/users",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#replaceOrCreate
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/users/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#upsertWithWhere
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/users/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#exists
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#findById
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#replaceById
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/users/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#find
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#findOne
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#updateAll
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#deleteById
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#count
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#prototype$updateAttributes
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/users/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#createChangeStream
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#login
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#logout
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#confirm
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#resetPassword
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/users/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#export
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `type` – `{string}` - the exported file type.
             *
             *  - `include` – `{*=}` - the list of ids that will be exported
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "export": {
              url: urlBase + "/users/export",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#changePassword
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string}` - the user id
             *
             *  - `current` – `{string}` - the current password
             *
             *  - `new` – `{string}` - the new password
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/users/:id/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#createAccount
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `user` – `{object}` - the user need to signup
             *
             *  - `data` – `{object}` - the other signup information
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "createAccount": {
              url: urlBase + "/users/create-account",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#reVerify
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             *  - `data` – `{object=}` - stateName and stateParams information
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "reVerify": {
              url: urlBase + "/users/re-verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#sendEmail
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `to` – `{*}` - the emails to send to
             *
             *  - `subject` – `{string=}` - the subject of email
             *
             *  - `body` – `{string=}` - the body of email
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "sendEmail": {
              url: urlBase + "/users/sendEmail",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#passwordReset
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "passwordReset": {
              url: urlBase + "/users/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#activateUser
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string}` - the user id
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "activateUser": {
              url: urlBase + "/users/activate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#track
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `type` – `{string}` - the type of user action
             *
             *  - `userId` – `{string}` - the user id
             *
             *  - `apartmentId` – `{string}` - the apartment id
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "track": {
              url: urlBase + "/users/track",
              method: "POST",
            },

            // INTERNAL. Use Apartment.likeUsers.findById() instead.
            "::findById::Apartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.likeUsers.destroyById() instead.
            "::destroyById::Apartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.likeUsers.updateById() instead.
            "::updateById::Apartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.likeUsers.link() instead.
            "::link::Apartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.likeUsers.unlink() instead.
            "::unlink::Apartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.likeUsers.exists() instead.
            "::exists::Apartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.couponUsers.findById() instead.
            "::findById::Apartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.couponUsers.destroyById() instead.
            "::destroyById::Apartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.couponUsers.updateById() instead.
            "::updateById::Apartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.couponUsers.link() instead.
            "::link::Apartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.couponUsers.unlink() instead.
            "::unlink::Apartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.couponUsers.exists() instead.
            "::exists::Apartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.visitUsers.findById() instead.
            "::findById::Apartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.visitUsers.destroyById() instead.
            "::destroyById::Apartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.visitUsers.updateById() instead.
            "::updateById::Apartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.visitUsers.link() instead.
            "::link::Apartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.visitUsers.unlink() instead.
            "::unlink::Apartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.visitUsers.exists() instead.
            "::exists::Apartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.redirectUsers.findById() instead.
            "::findById::Apartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.redirectUsers.destroyById() instead.
            "::destroyById::Apartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.redirectUsers.updateById() instead.
            "::updateById::Apartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.redirectUsers.link() instead.
            "::link::Apartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.redirectUsers.unlink() instead.
            "::unlink::Apartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.redirectUsers.exists() instead.
            "::exists::Apartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.roommateUsers.findById() instead.
            "::findById::Apartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers.destroyById() instead.
            "::destroyById::Apartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.roommateUsers.updateById() instead.
            "::updateById::Apartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.roommateUsers.link() instead.
            "::link::Apartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.roommateUsers.unlink() instead.
            "::unlink::Apartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.roommateUsers.exists() instead.
            "::exists::Apartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.findById() instead.
            "::findById::Apartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.destroyById() instead.
            "::destroyById::Apartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.updateById() instead.
            "::updateById::Apartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.link() instead.
            "::link::Apartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.unlink() instead.
            "::unlink::Apartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.exists() instead.
            "::exists::Apartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.likeUsers() instead.
            "::get::Apartment::likeUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.likeUsers.create() instead.
            "::create::Apartment::likeUsers": {
              url: urlBase + "/apartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.likeUsers.createMany() instead.
            "::createMany::Apartment::likeUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.likeUsers.destroyAll() instead.
            "::delete::Apartment::likeUsers": {
              url: urlBase + "/apartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.likeUsers.count() instead.
            "::count::Apartment::likeUsers": {
              url: urlBase + "/apartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.couponUsers() instead.
            "::get::Apartment::couponUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.couponUsers.create() instead.
            "::create::Apartment::couponUsers": {
              url: urlBase + "/apartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.couponUsers.createMany() instead.
            "::createMany::Apartment::couponUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.couponUsers.destroyAll() instead.
            "::delete::Apartment::couponUsers": {
              url: urlBase + "/apartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.couponUsers.count() instead.
            "::count::Apartment::couponUsers": {
              url: urlBase + "/apartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.visitUsers() instead.
            "::get::Apartment::visitUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.visitUsers.create() instead.
            "::create::Apartment::visitUsers": {
              url: urlBase + "/apartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.visitUsers.createMany() instead.
            "::createMany::Apartment::visitUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.visitUsers.destroyAll() instead.
            "::delete::Apartment::visitUsers": {
              url: urlBase + "/apartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.visitUsers.count() instead.
            "::count::Apartment::visitUsers": {
              url: urlBase + "/apartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.redirectUsers() instead.
            "::get::Apartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.redirectUsers.create() instead.
            "::create::Apartment::redirectUsers": {
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.redirectUsers.createMany() instead.
            "::createMany::Apartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.redirectUsers.destroyAll() instead.
            "::delete::Apartment::redirectUsers": {
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.redirectUsers.count() instead.
            "::count::Apartment::redirectUsers": {
              url: urlBase + "/apartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers() instead.
            "::get::Apartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers.create() instead.
            "::create::Apartment::roommateUsers": {
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.roommateUsers.createMany() instead.
            "::createMany::Apartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.roommateUsers.destroyAll() instead.
            "::delete::Apartment::roommateUsers": {
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.roommateUsers.count() instead.
            "::count::Apartment::roommateUsers": {
              url: urlBase + "/apartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers() instead.
            "::get::Apartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.create() instead.
            "::create::Apartment::wishApartmentUsers": {
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.createMany() instead.
            "::createMany::Apartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.destroyAll() instead.
            "::delete::Apartment::wishApartmentUsers": {
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.count() instead.
            "::count::Apartment::wishApartmentUsers": {
              url: urlBase + "/apartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.findById() instead.
            "::findById::FloorPlan::floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyById() instead.
            "::destroyById::FloorPlan::floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.updateById() instead.
            "::updateById::FloorPlan::floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.link() instead.
            "::link::FloorPlan::floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.unlink() instead.
            "::unlink::FloorPlan::floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.exists() instead.
            "::exists::FloorPlan::floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.findById() instead.
            "::findById::FloorPlan::wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.destroyById() instead.
            "::destroyById::FloorPlan::wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.updateById() instead.
            "::updateById::FloorPlan::wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.link() instead.
            "::link::FloorPlan::wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.unlink() instead.
            "::unlink::FloorPlan::wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.exists() instead.
            "::exists::FloorPlan::wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants() instead.
            "::get::FloorPlan::floorPlanApplicants": {
              isArray: true,
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.create() instead.
            "::create::FloorPlan::floorPlanApplicants": {
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "POST",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.createMany() instead.
            "::createMany::FloorPlan::floorPlanApplicants": {
              isArray: true,
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "POST",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyAll() instead.
            "::delete::FloorPlan::floorPlanApplicants": {
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.count() instead.
            "::count::FloorPlan::floorPlanApplicants": {
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/count",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers() instead.
            "::get::FloorPlan::wishFloorPlanUsers": {
              isArray: true,
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.create() instead.
            "::create::FloorPlan::wishFloorPlanUsers": {
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "POST",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.createMany() instead.
            "::createMany::FloorPlan::wishFloorPlanUsers": {
              isArray: true,
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "POST",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.destroyAll() instead.
            "::delete::FloorPlan::wishFloorPlanUsers": {
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.count() instead.
            "::count::FloorPlan::wishFloorPlanUsers": {
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/count",
              method: "GET",
            },

            // INTERNAL. Use VisitApartment.user() instead.
            "::get::VisitApartment::user": {
              url: urlBase + "/visitApartments/:id/user",
              method: "GET",
            },

            // INTERNAL. Use RedirectApartment.user() instead.
            "::get::RedirectApartment::user": {
              url: urlBase + "/redirectApartments/:id/user",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.findById() instead.
            "::findById::CrawledApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.destroyById() instead.
            "::destroyById::CrawledApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.updateById() instead.
            "::updateById::CrawledApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.link() instead.
            "::link::CrawledApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.unlink() instead.
            "::unlink::CrawledApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.exists() instead.
            "::exists::CrawledApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.findById() instead.
            "::findById::CrawledApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.destroyById() instead.
            "::destroyById::CrawledApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.updateById() instead.
            "::updateById::CrawledApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.link() instead.
            "::link::CrawledApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.unlink() instead.
            "::unlink::CrawledApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.exists() instead.
            "::exists::CrawledApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.findById() instead.
            "::findById::CrawledApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.destroyById() instead.
            "::destroyById::CrawledApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.updateById() instead.
            "::updateById::CrawledApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.link() instead.
            "::link::CrawledApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.unlink() instead.
            "::unlink::CrawledApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.exists() instead.
            "::exists::CrawledApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.findById() instead.
            "::findById::CrawledApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.destroyById() instead.
            "::destroyById::CrawledApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.updateById() instead.
            "::updateById::CrawledApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.link() instead.
            "::link::CrawledApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.unlink() instead.
            "::unlink::CrawledApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.exists() instead.
            "::exists::CrawledApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.findById() instead.
            "::findById::CrawledApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.destroyById() instead.
            "::destroyById::CrawledApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.updateById() instead.
            "::updateById::CrawledApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.link() instead.
            "::link::CrawledApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.unlink() instead.
            "::unlink::CrawledApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.exists() instead.
            "::exists::CrawledApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.findById() instead.
            "::findById::CrawledApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.destroyById() instead.
            "::destroyById::CrawledApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.updateById() instead.
            "::updateById::CrawledApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.link() instead.
            "::link::CrawledApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.unlink() instead.
            "::unlink::CrawledApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.exists() instead.
            "::exists::CrawledApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.likeUsers() instead.
            "::get::CrawledApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.create() instead.
            "::create::CrawledApartment::likeUsers": {
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.createMany() instead.
            "::createMany::CrawledApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.destroyAll() instead.
            "::delete::CrawledApartment::likeUsers": {
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.count() instead.
            "::count::CrawledApartment::likeUsers": {
              url: urlBase + "/crawledApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.couponUsers() instead.
            "::get::CrawledApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.create() instead.
            "::create::CrawledApartment::couponUsers": {
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.createMany() instead.
            "::createMany::CrawledApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.destroyAll() instead.
            "::delete::CrawledApartment::couponUsers": {
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.count() instead.
            "::count::CrawledApartment::couponUsers": {
              url: urlBase + "/crawledApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.visitUsers() instead.
            "::get::CrawledApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.create() instead.
            "::create::CrawledApartment::visitUsers": {
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.createMany() instead.
            "::createMany::CrawledApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.destroyAll() instead.
            "::delete::CrawledApartment::visitUsers": {
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.count() instead.
            "::count::CrawledApartment::visitUsers": {
              url: urlBase + "/crawledApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers() instead.
            "::get::CrawledApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.create() instead.
            "::create::CrawledApartment::redirectUsers": {
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.createMany() instead.
            "::createMany::CrawledApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.destroyAll() instead.
            "::delete::CrawledApartment::redirectUsers": {
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.count() instead.
            "::count::CrawledApartment::redirectUsers": {
              url: urlBase + "/crawledApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers() instead.
            "::get::CrawledApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.create() instead.
            "::create::CrawledApartment::roommateUsers": {
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.createMany() instead.
            "::createMany::CrawledApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.destroyAll() instead.
            "::delete::CrawledApartment::roommateUsers": {
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.count() instead.
            "::count::CrawledApartment::roommateUsers": {
              url: urlBase + "/crawledApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers() instead.
            "::get::CrawledApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.create() instead.
            "::create::CrawledApartment::wishApartmentUsers": {
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.createMany() instead.
            "::createMany::CrawledApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.destroyAll() instead.
            "::delete::CrawledApartment::wishApartmentUsers": {
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.count() instead.
            "::count::CrawledApartment::wishApartmentUsers": {
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.likeUsers.findById() instead.
            "::findById::PendingApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.likeUsers.destroyById() instead.
            "::destroyById::PendingApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.likeUsers.updateById() instead.
            "::updateById::PendingApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.likeUsers.link() instead.
            "::link::PendingApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.likeUsers.unlink() instead.
            "::unlink::PendingApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.likeUsers.exists() instead.
            "::exists::PendingApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.couponUsers.findById() instead.
            "::findById::PendingApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.couponUsers.destroyById() instead.
            "::destroyById::PendingApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.couponUsers.updateById() instead.
            "::updateById::PendingApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.couponUsers.link() instead.
            "::link::PendingApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.couponUsers.unlink() instead.
            "::unlink::PendingApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.couponUsers.exists() instead.
            "::exists::PendingApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.visitUsers.findById() instead.
            "::findById::PendingApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.visitUsers.destroyById() instead.
            "::destroyById::PendingApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.visitUsers.updateById() instead.
            "::updateById::PendingApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.visitUsers.link() instead.
            "::link::PendingApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.visitUsers.unlink() instead.
            "::unlink::PendingApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.visitUsers.exists() instead.
            "::exists::PendingApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.findById() instead.
            "::findById::PendingApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.destroyById() instead.
            "::destroyById::PendingApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.updateById() instead.
            "::updateById::PendingApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.link() instead.
            "::link::PendingApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.unlink() instead.
            "::unlink::PendingApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.exists() instead.
            "::exists::PendingApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.findById() instead.
            "::findById::PendingApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.destroyById() instead.
            "::destroyById::PendingApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.updateById() instead.
            "::updateById::PendingApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.link() instead.
            "::link::PendingApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.unlink() instead.
            "::unlink::PendingApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.exists() instead.
            "::exists::PendingApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.findById() instead.
            "::findById::PendingApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.destroyById() instead.
            "::destroyById::PendingApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.updateById() instead.
            "::updateById::PendingApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.link() instead.
            "::link::PendingApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.unlink() instead.
            "::unlink::PendingApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.exists() instead.
            "::exists::PendingApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.likeUsers() instead.
            "::get::PendingApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.likeUsers.create() instead.
            "::create::PendingApartment::likeUsers": {
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.likeUsers.createMany() instead.
            "::createMany::PendingApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.likeUsers.destroyAll() instead.
            "::delete::PendingApartment::likeUsers": {
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.likeUsers.count() instead.
            "::count::PendingApartment::likeUsers": {
              url: urlBase + "/pendingApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.couponUsers() instead.
            "::get::PendingApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.couponUsers.create() instead.
            "::create::PendingApartment::couponUsers": {
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.couponUsers.createMany() instead.
            "::createMany::PendingApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.couponUsers.destroyAll() instead.
            "::delete::PendingApartment::couponUsers": {
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.couponUsers.count() instead.
            "::count::PendingApartment::couponUsers": {
              url: urlBase + "/pendingApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.visitUsers() instead.
            "::get::PendingApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.visitUsers.create() instead.
            "::create::PendingApartment::visitUsers": {
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.visitUsers.createMany() instead.
            "::createMany::PendingApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.visitUsers.destroyAll() instead.
            "::delete::PendingApartment::visitUsers": {
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.visitUsers.count() instead.
            "::count::PendingApartment::visitUsers": {
              url: urlBase + "/pendingApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.redirectUsers() instead.
            "::get::PendingApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.create() instead.
            "::create::PendingApartment::redirectUsers": {
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.createMany() instead.
            "::createMany::PendingApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.destroyAll() instead.
            "::delete::PendingApartment::redirectUsers": {
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.count() instead.
            "::count::PendingApartment::redirectUsers": {
              url: urlBase + "/pendingApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers() instead.
            "::get::PendingApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.create() instead.
            "::create::PendingApartment::roommateUsers": {
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.createMany() instead.
            "::createMany::PendingApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.destroyAll() instead.
            "::delete::PendingApartment::roommateUsers": {
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.count() instead.
            "::count::PendingApartment::roommateUsers": {
              url: urlBase + "/pendingApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers() instead.
            "::get::PendingApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.create() instead.
            "::create::PendingApartment::wishApartmentUsers": {
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.createMany() instead.
            "::createMany::PendingApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.destroyAll() instead.
            "::delete::PendingApartment::wishApartmentUsers": {
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.count() instead.
            "::count::PendingApartment::wishApartmentUsers": {
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.findById() instead.
            "::findById::SubmittedApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.destroyById() instead.
            "::destroyById::SubmittedApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.updateById() instead.
            "::updateById::SubmittedApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.link() instead.
            "::link::SubmittedApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.unlink() instead.
            "::unlink::SubmittedApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.exists() instead.
            "::exists::SubmittedApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.findById() instead.
            "::findById::SubmittedApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.destroyById() instead.
            "::destroyById::SubmittedApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.updateById() instead.
            "::updateById::SubmittedApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.link() instead.
            "::link::SubmittedApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.unlink() instead.
            "::unlink::SubmittedApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.exists() instead.
            "::exists::SubmittedApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.findById() instead.
            "::findById::SubmittedApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.destroyById() instead.
            "::destroyById::SubmittedApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.updateById() instead.
            "::updateById::SubmittedApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.link() instead.
            "::link::SubmittedApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.unlink() instead.
            "::unlink::SubmittedApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.exists() instead.
            "::exists::SubmittedApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.findById() instead.
            "::findById::SubmittedApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.destroyById() instead.
            "::destroyById::SubmittedApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.updateById() instead.
            "::updateById::SubmittedApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.link() instead.
            "::link::SubmittedApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.unlink() instead.
            "::unlink::SubmittedApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.exists() instead.
            "::exists::SubmittedApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.findById() instead.
            "::findById::SubmittedApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.destroyById() instead.
            "::destroyById::SubmittedApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.updateById() instead.
            "::updateById::SubmittedApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.link() instead.
            "::link::SubmittedApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.unlink() instead.
            "::unlink::SubmittedApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.exists() instead.
            "::exists::SubmittedApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.findById() instead.
            "::findById::SubmittedApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.destroyById() instead.
            "::destroyById::SubmittedApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.updateById() instead.
            "::updateById::SubmittedApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.link() instead.
            "::link::SubmittedApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.unlink() instead.
            "::unlink::SubmittedApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.exists() instead.
            "::exists::SubmittedApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers() instead.
            "::get::SubmittedApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.create() instead.
            "::create::SubmittedApartment::likeUsers": {
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.createMany() instead.
            "::createMany::SubmittedApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.destroyAll() instead.
            "::delete::SubmittedApartment::likeUsers": {
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.count() instead.
            "::count::SubmittedApartment::likeUsers": {
              url: urlBase + "/submittedApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers() instead.
            "::get::SubmittedApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.create() instead.
            "::create::SubmittedApartment::couponUsers": {
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.createMany() instead.
            "::createMany::SubmittedApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.destroyAll() instead.
            "::delete::SubmittedApartment::couponUsers": {
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.count() instead.
            "::count::SubmittedApartment::couponUsers": {
              url: urlBase + "/submittedApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers() instead.
            "::get::SubmittedApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.create() instead.
            "::create::SubmittedApartment::visitUsers": {
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.createMany() instead.
            "::createMany::SubmittedApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.destroyAll() instead.
            "::delete::SubmittedApartment::visitUsers": {
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.count() instead.
            "::count::SubmittedApartment::visitUsers": {
              url: urlBase + "/submittedApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers() instead.
            "::get::SubmittedApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.create() instead.
            "::create::SubmittedApartment::redirectUsers": {
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.createMany() instead.
            "::createMany::SubmittedApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.destroyAll() instead.
            "::delete::SubmittedApartment::redirectUsers": {
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.count() instead.
            "::count::SubmittedApartment::redirectUsers": {
              url: urlBase + "/submittedApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers() instead.
            "::get::SubmittedApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.create() instead.
            "::create::SubmittedApartment::roommateUsers": {
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.createMany() instead.
            "::createMany::SubmittedApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.destroyAll() instead.
            "::delete::SubmittedApartment::roommateUsers": {
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.count() instead.
            "::count::SubmittedApartment::roommateUsers": {
              url: urlBase + "/submittedApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers() instead.
            "::get::SubmittedApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.create() instead.
            "::create::SubmittedApartment::wishApartmentUsers": {
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.createMany() instead.
            "::createMany::SubmittedApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.destroyAll() instead.
            "::delete::SubmittedApartment::wishApartmentUsers": {
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.count() instead.
            "::count::SubmittedApartment::wishApartmentUsers": {
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.findById() instead.
            "::findById::ProspectiveApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.updateById() instead.
            "::updateById::ProspectiveApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.link() instead.
            "::link::ProspectiveApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.unlink() instead.
            "::unlink::ProspectiveApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.exists() instead.
            "::exists::ProspectiveApartment::likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.findById() instead.
            "::findById::ProspectiveApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.updateById() instead.
            "::updateById::ProspectiveApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.link() instead.
            "::link::ProspectiveApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.unlink() instead.
            "::unlink::ProspectiveApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.exists() instead.
            "::exists::ProspectiveApartment::couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.findById() instead.
            "::findById::ProspectiveApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.updateById() instead.
            "::updateById::ProspectiveApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.link() instead.
            "::link::ProspectiveApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.unlink() instead.
            "::unlink::ProspectiveApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.exists() instead.
            "::exists::ProspectiveApartment::visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.findById() instead.
            "::findById::ProspectiveApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.updateById() instead.
            "::updateById::ProspectiveApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.link() instead.
            "::link::ProspectiveApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.unlink() instead.
            "::unlink::ProspectiveApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.exists() instead.
            "::exists::ProspectiveApartment::redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.findById() instead.
            "::findById::ProspectiveApartment::manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.updateById() instead.
            "::updateById::ProspectiveApartment::manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.link() instead.
            "::link::ProspectiveApartment::manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.unlink() instead.
            "::unlink::ProspectiveApartment::manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.exists() instead.
            "::exists::ProspectiveApartment::manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.findById() instead.
            "::findById::ProspectiveApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.updateById() instead.
            "::updateById::ProspectiveApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.link() instead.
            "::link::ProspectiveApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.unlink() instead.
            "::unlink::ProspectiveApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.exists() instead.
            "::exists::ProspectiveApartment::roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.findById() instead.
            "::findById::ProspectiveApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.destroyById() instead.
            "::destroyById::ProspectiveApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.updateById() instead.
            "::updateById::ProspectiveApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.link() instead.
            "::link::ProspectiveApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.unlink() instead.
            "::unlink::ProspectiveApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.exists() instead.
            "::exists::ProspectiveApartment::wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers() instead.
            "::get::ProspectiveApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.create() instead.
            "::create::ProspectiveApartment::likeUsers": {
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.createMany() instead.
            "::createMany::ProspectiveApartment::likeUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::likeUsers": {
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.count() instead.
            "::count::ProspectiveApartment::likeUsers": {
              url: urlBase + "/prospectiveApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers() instead.
            "::get::ProspectiveApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.create() instead.
            "::create::ProspectiveApartment::couponUsers": {
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.createMany() instead.
            "::createMany::ProspectiveApartment::couponUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::couponUsers": {
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.count() instead.
            "::count::ProspectiveApartment::couponUsers": {
              url: urlBase + "/prospectiveApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers() instead.
            "::get::ProspectiveApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.create() instead.
            "::create::ProspectiveApartment::visitUsers": {
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.createMany() instead.
            "::createMany::ProspectiveApartment::visitUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::visitUsers": {
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.count() instead.
            "::count::ProspectiveApartment::visitUsers": {
              url: urlBase + "/prospectiveApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers() instead.
            "::get::ProspectiveApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.create() instead.
            "::create::ProspectiveApartment::redirectUsers": {
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.createMany() instead.
            "::createMany::ProspectiveApartment::redirectUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::redirectUsers": {
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.count() instead.
            "::count::ProspectiveApartment::redirectUsers": {
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers() instead.
            "::get::ProspectiveApartment::manageUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.create() instead.
            "::create::ProspectiveApartment::manageUsers": {
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.createMany() instead.
            "::createMany::ProspectiveApartment::manageUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::manageUsers": {
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.count() instead.
            "::count::ProspectiveApartment::manageUsers": {
              url: urlBase + "/prospectiveApartments/:id/manageUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers() instead.
            "::get::ProspectiveApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.create() instead.
            "::create::ProspectiveApartment::roommateUsers": {
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.createMany() instead.
            "::createMany::ProspectiveApartment::roommateUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::roommateUsers": {
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.count() instead.
            "::count::ProspectiveApartment::roommateUsers": {
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers() instead.
            "::get::ProspectiveApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.create() instead.
            "::create::ProspectiveApartment::wishApartmentUsers": {
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.createMany() instead.
            "::createMany::ProspectiveApartment::wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.destroyAll() instead.
            "::delete::ProspectiveApartment::wishApartmentUsers": {
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.count() instead.
            "::count::ProspectiveApartment::wishApartmentUsers": {
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.user() instead.
            "::get::ApplyForFloorPlan::user": {
              url: urlBase + "/applyForFloorPlans/:id/user",
              method: "GET",
            },

            // INTERNAL. Use WishList.user() instead.
            "::get::WishList::user": {
              url: urlBase + "/wishLists/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.User#getCurrent
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.User#patchOrCreate
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.User#updateOrCreate
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.User#patchOrCreateWithWhere
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.User#update
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.User#destroyById
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.User#removeById
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.User#patchAttributes
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name housingApiServices.User#getCachedCurrent
         * @methodOf housingApiServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link housingApiServices.User#login} or
         * {@link housingApiServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User#isAuthenticated
         * @methodOf housingApiServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name housingApiServices.User#getCurrentId
         * @methodOf housingApiServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name housingApiServices.User#modelName
        * @propertyOf housingApiServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";

    /**
     * @ngdoc object
     * @name housingApiServices.User.likeApartments
     * @header housingApiServices.User.likeApartments
     * @object
     * @description
     *
     * The object `User.likeApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#likeApartments User.likeApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#likeApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries likeApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#count
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Counts likeApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#create
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Creates a new instance in likeApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#createMany
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Creates a new instance in likeApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#destroyAll
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Deletes all likeApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#destroyById
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Delete a related item by id for likeApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for likeApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#exists
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Check the existence of likeApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for likeApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#findById
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Find a related item by id for likeApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for likeApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#link
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Add a related item by id for likeApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for likeApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#unlink
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Remove the likeApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for likeApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::User::likeApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.likeApartments#updateById
             * @methodOf housingApiServices.User.likeApartments
             *
             * @description
             *
             * Update a related item by id for likeApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for likeApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.likeApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::User::likeApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.couponApartments
     * @header housingApiServices.User.couponApartments
     * @object
     * @description
     *
     * The object `User.couponApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#couponApartments User.couponApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#couponApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries couponApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#count
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Counts couponApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.couponApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#create
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Creates a new instance in couponApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#createMany
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Creates a new instance in couponApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#destroyAll
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Deletes all couponApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#destroyById
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Delete a related item by id for couponApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for couponApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#exists
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Check the existence of couponApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for couponApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#findById
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Find a related item by id for couponApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for couponApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#link
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Add a related item by id for couponApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for couponApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#unlink
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Remove the couponApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for couponApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::User::couponApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.couponApartments#updateById
             * @methodOf housingApiServices.User.couponApartments
             *
             * @description
             *
             * Update a related item by id for couponApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for couponApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.couponApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::User::couponApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.visitApartments
     * @header housingApiServices.User.visitApartments
     * @object
     * @description
     *
     * The object `User.visitApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#visitApartments User.visitApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#visitApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries visitApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#count
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Counts visitApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.visitApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#create
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Creates a new instance in visitApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#createMany
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Creates a new instance in visitApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#destroyAll
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Deletes all visitApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#destroyById
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Delete a related item by id for visitApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for visitApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#exists
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Check the existence of visitApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for visitApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#findById
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Find a related item by id for visitApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for visitApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#link
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Add a related item by id for visitApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for visitApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#unlink
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Remove the visitApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for visitApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::User::visitApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.visitApartments#updateById
             * @methodOf housingApiServices.User.visitApartments
             *
             * @description
             *
             * Update a related item by id for visitApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for visitApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.visitApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::User::visitApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.redirectApartments
     * @header housingApiServices.User.redirectApartments
     * @object
     * @description
     *
     * The object `User.redirectApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#redirectApartments User.redirectApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#redirectApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries redirectApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#count
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Counts redirectApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.redirectApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#create
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Creates a new instance in redirectApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#createMany
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Creates a new instance in redirectApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#destroyAll
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Deletes all redirectApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#destroyById
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Delete a related item by id for redirectApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for redirectApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#exists
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Check the existence of redirectApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for redirectApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#findById
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Find a related item by id for redirectApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for redirectApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#link
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Add a related item by id for redirectApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for redirectApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#unlink
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Remove the redirectApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for redirectApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::User::redirectApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.redirectApartments#updateById
             * @methodOf housingApiServices.User.redirectApartments
             *
             * @description
             *
             * Update a related item by id for redirectApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for redirectApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.redirectApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::User::redirectApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.manageProspectiveApartments
     * @header housingApiServices.User.manageProspectiveApartments
     * @object
     * @description
     *
     * The object `User.manageProspectiveApartments` groups methods
     * manipulating `ProspectiveApartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#manageProspectiveApartments User.manageProspectiveApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#manageProspectiveApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries manageProspectiveApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::get::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#count
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Counts manageProspectiveApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.manageProspectiveApartments.count = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::count::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#create
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Creates a new instance in manageProspectiveApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments.create = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::create::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#createMany
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Creates a new instance in manageProspectiveApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments.createMany = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::createMany::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#destroyAll
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Deletes all manageProspectiveApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.manageProspectiveApartments.destroyAll = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::delete::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#destroyById
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Delete a related item by id for manageProspectiveApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.manageProspectiveApartments.destroyById = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::destroyById::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#exists
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Check the existence of manageProspectiveApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments.exists = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::exists::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#findById
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Find a related item by id for manageProspectiveApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments.findById = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::findById::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#link
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Add a related item by id for manageProspectiveApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments.link = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::link::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#unlink
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Remove the manageProspectiveApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.manageProspectiveApartments.unlink = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::unlink::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.manageProspectiveApartments#updateById
             * @methodOf housingApiServices.User.manageProspectiveApartments
             *
             * @description
             *
             * Update a related item by id for manageProspectiveApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for manageProspectiveApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.manageProspectiveApartments.updateById = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::updateById::User::manageProspectiveApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.roommateApartments
     * @header housingApiServices.User.roommateApartments
     * @object
     * @description
     *
     * The object `User.roommateApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#roommateApartments User.roommateApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#roommateApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries roommateApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#count
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Counts roommateApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roommateApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#create
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Creates a new instance in roommateApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#createMany
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Creates a new instance in roommateApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#destroyAll
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Deletes all roommateApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#destroyById
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Delete a related item by id for roommateApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for roommateApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#exists
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Check the existence of roommateApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for roommateApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#findById
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Find a related item by id for roommateApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for roommateApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#link
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Add a related item by id for roommateApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for roommateApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#unlink
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Remove the roommateApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for roommateApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::User::roommateApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.roommateApartments#updateById
             * @methodOf housingApiServices.User.roommateApartments
             *
             * @description
             *
             * Update a related item by id for roommateApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for roommateApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.roommateApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::User::roommateApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.applyForFloorPlans
     * @header housingApiServices.User.applyForFloorPlans
     * @object
     * @description
     *
     * The object `User.applyForFloorPlans` groups methods
     * manipulating `ApplyForFloorPlan` instances related to `User`.
     *
     * Call {@link housingApiServices.User#applyForFloorPlans User.applyForFloorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#applyForFloorPlans
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries applyForFloorPlans of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlans = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::get::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#count
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Counts applyForFloorPlans of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.applyForFloorPlans.count = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::count::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#create
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Creates a new instance in applyForFloorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlans.create = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::create::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#createMany
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Creates a new instance in applyForFloorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlans.createMany = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::createMany::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#destroyAll
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Deletes all applyForFloorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyForFloorPlans.destroyAll = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::delete::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#destroyById
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Delete a related item by id for applyForFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyForFloorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyForFloorPlans.destroyById = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::destroyById::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#findById
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Find a related item by id for applyForFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyForFloorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlans.findById = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::findById::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyForFloorPlans#updateById
             * @methodOf housingApiServices.User.applyForFloorPlans
             *
             * @description
             *
             * Update a related item by id for applyForFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyForFloorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlans.updateById = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::updateById::User::applyForFloorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.applyFloorPlans
     * @header housingApiServices.User.applyFloorPlans
     * @object
     * @description
     *
     * The object `User.applyFloorPlans` groups methods
     * manipulating `FloorPlan` instances related to `User`.
     *
     * Call {@link housingApiServices.User#applyFloorPlans User.applyFloorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#applyFloorPlans
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries applyFloorPlans of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#count
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Counts applyFloorPlans of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.applyFloorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#create
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Creates a new instance in applyFloorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#createMany
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Creates a new instance in applyFloorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#destroyAll
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Deletes all applyFloorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyFloorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#destroyById
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Delete a related item by id for applyFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyFloorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyFloorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#exists
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Check the existence of applyFloorPlans relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyFloorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans.exists = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::exists::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#findById
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Find a related item by id for applyFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyFloorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#link
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Add a related item by id for applyFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyFloorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans.link = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::link::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#unlink
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Remove the applyFloorPlans relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyFloorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyFloorPlans.unlink = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::unlink::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.applyFloorPlans#updateById
             * @methodOf housingApiServices.User.applyFloorPlans
             *
             * @description
             *
             * Update a related item by id for applyFloorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for applyFloorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.applyFloorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::User::applyFloorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.User.wishedApartments
     * @header housingApiServices.User.wishedApartments
     * @object
     * @description
     *
     * The object `User.wishedApartments` groups methods
     * manipulating `Apartment` instances related to `User`.
     *
     * Call {@link housingApiServices.User#wishedApartments User.wishedApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.User#wishedApartments
             * @methodOf housingApiServices.User
             *
             * @description
             *
             * Queries wishedApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#count
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Counts wishedApartments of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishedApartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#create
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Creates a new instance in wishedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#createMany
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Creates a new instance in wishedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#destroyAll
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Deletes all wishedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishedApartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#destroyById
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Delete a related item by id for wishedApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for wishedApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishedApartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#exists
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Check the existence of wishedApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for wishedApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#findById
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Find a related item by id for wishedApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for wishedApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#link
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Add a related item by id for wishedApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for wishedApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#unlink
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Remove the wishedApartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for wishedApartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishedApartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::User::wishedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.User.wishedApartments#updateById
             * @methodOf housingApiServices.User.wishedApartments
             *
             * @description
             *
             * Update a related item by id for wishedApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - user id
             *
             *  - `fk` – `{*}` - Foreign key for wishedApartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.wishedApartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::User::wishedApartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Apartment
 * @header housingApiServices.Apartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Apartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Apartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/apartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Apartment.floorPlans.findById() instead.
            "prototype$__findById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.floorPlans.destroyById() instead.
            "prototype$__destroyById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.floorPlans.updateById() instead.
            "prototype$__updateById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.tags.findById() instead.
            "prototype$__findById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.tags.destroyById() instead.
            "prototype$__destroyById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.tags.updateById() instead.
            "prototype$__updateById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.tags.link() instead.
            "prototype$__link__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.tags.unlink() instead.
            "prototype$__unlink__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.tags.exists() instead.
            "prototype$__exists__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.features.findById() instead.
            "prototype$__findById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.features.destroyById() instead.
            "prototype$__destroyById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.features.updateById() instead.
            "prototype$__updateById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.features.link() instead.
            "prototype$__link__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.features.unlink() instead.
            "prototype$__unlink__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.features.exists() instead.
            "prototype$__exists__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.amenities.findById() instead.
            "prototype$__findById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.amenities.destroyById() instead.
            "prototype$__destroyById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.amenities.updateById() instead.
            "prototype$__updateById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.amenities.link() instead.
            "prototype$__link__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.amenities.unlink() instead.
            "prototype$__unlink__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.amenities.exists() instead.
            "prototype$__exists__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.safeties.findById() instead.
            "prototype$__findById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.safeties.destroyById() instead.
            "prototype$__destroyById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.safeties.updateById() instead.
            "prototype$__updateById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.safeties.link() instead.
            "prototype$__link__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.safeties.unlink() instead.
            "prototype$__unlink__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.safeties.exists() instead.
            "prototype$__exists__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.utilities.findById() instead.
            "prototype$__findById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.utilities.destroyById() instead.
            "prototype$__destroyById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.utilities.updateById() instead.
            "prototype$__updateById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.utilities.link() instead.
            "prototype$__link__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.utilities.unlink() instead.
            "prototype$__unlink__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.utilities.exists() instead.
            "prototype$__exists__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.distance2Campus.findById() instead.
            "prototype$__findById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2Campus.destroyById() instead.
            "prototype$__destroyById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2Campus.updateById() instead.
            "prototype$__updateById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.distance2City.findById() instead.
            "prototype$__findById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2City.destroyById() instead.
            "prototype$__destroyById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2City.updateById() instead.
            "prototype$__updateById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2City/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__findById__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Find a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$__findById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/similarListings/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__destroyById__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Delete a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/similarListings/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__updateById__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Update a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$__updateById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/similarListings/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__link__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Add a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$__link__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/similarListings/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__unlink__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Remove the similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/similarListings/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__exists__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Check the existence of similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$__exists__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/similarListings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.likeUsers.findById() instead.
            "prototype$__findById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.likeUsers.destroyById() instead.
            "prototype$__destroyById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.likeUsers.updateById() instead.
            "prototype$__updateById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.likeUsers.link() instead.
            "prototype$__link__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.likeUsers.unlink() instead.
            "prototype$__unlink__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.likeUsers.exists() instead.
            "prototype$__exists__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.couponUsers.findById() instead.
            "prototype$__findById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.couponUsers.destroyById() instead.
            "prototype$__destroyById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.couponUsers.updateById() instead.
            "prototype$__updateById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.couponUsers.link() instead.
            "prototype$__link__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.couponUsers.unlink() instead.
            "prototype$__unlink__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.couponUsers.exists() instead.
            "prototype$__exists__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.visitUsers.findById() instead.
            "prototype$__findById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.visitUsers.destroyById() instead.
            "prototype$__destroyById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.visitUsers.updateById() instead.
            "prototype$__updateById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.visitUsers.link() instead.
            "prototype$__link__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.visitUsers.unlink() instead.
            "prototype$__unlink__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.visitUsers.exists() instead.
            "prototype$__exists__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.redirectUsers.findById() instead.
            "prototype$__findById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.redirectUsers.destroyById() instead.
            "prototype$__destroyById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.redirectUsers.updateById() instead.
            "prototype$__updateById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.redirectUsers.link() instead.
            "prototype$__link__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.redirectUsers.unlink() instead.
            "prototype$__unlink__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.redirectUsers.exists() instead.
            "prototype$__exists__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.universities.findById() instead.
            "prototype$__findById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.universities.destroyById() instead.
            "prototype$__destroyById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.universities.updateById() instead.
            "prototype$__updateById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.universities.link() instead.
            "prototype$__link__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.universities.unlink() instead.
            "prototype$__unlink__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.universities.exists() instead.
            "prototype$__exists__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.cities.findById() instead.
            "prototype$__findById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.cities.destroyById() instead.
            "prototype$__destroyById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.cities.updateById() instead.
            "prototype$__updateById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.cities.link() instead.
            "prototype$__link__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.cities.unlink() instead.
            "prototype$__unlink__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.cities.exists() instead.
            "prototype$__exists__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.submittedApartment() instead.
            "prototype$__get__submittedApartment": {
              url: urlBase + "/apartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers.findById() instead.
            "prototype$__findById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers.destroyById() instead.
            "prototype$__destroyById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.roommateUsers.updateById() instead.
            "prototype$__updateById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.roommateUsers.link() instead.
            "prototype$__link__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.roommateUsers.unlink() instead.
            "prototype$__unlink__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.roommateUsers.exists() instead.
            "prototype$__exists__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.findById() instead.
            "prototype$__findById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.destroyById() instead.
            "prototype$__destroyById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.updateById() instead.
            "prototype$__updateById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.link() instead.
            "prototype$__link__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.unlink() instead.
            "prototype$__unlink__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.exists() instead.
            "prototype$__exists__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.floorPlans() instead.
            "prototype$__get__floorPlans": {
              isArray: true,
              url: urlBase + "/apartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use Apartment.floorPlans.create() instead.
            "prototype$__create__floorPlans": {
              url: urlBase + "/apartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use Apartment.floorPlans.destroyAll() instead.
            "prototype$__delete__floorPlans": {
              url: urlBase + "/apartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.floorPlans.count() instead.
            "prototype$__count__floorPlans": {
              url: urlBase + "/apartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.tags() instead.
            "prototype$__get__tags": {
              isArray: true,
              url: urlBase + "/apartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use Apartment.tags.create() instead.
            "prototype$__create__tags": {
              url: urlBase + "/apartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use Apartment.tags.destroyAll() instead.
            "prototype$__delete__tags": {
              url: urlBase + "/apartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.tags.count() instead.
            "prototype$__count__tags": {
              url: urlBase + "/apartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.features() instead.
            "prototype$__get__features": {
              isArray: true,
              url: urlBase + "/apartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use Apartment.features.create() instead.
            "prototype$__create__features": {
              url: urlBase + "/apartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use Apartment.features.destroyAll() instead.
            "prototype$__delete__features": {
              url: urlBase + "/apartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.features.count() instead.
            "prototype$__count__features": {
              url: urlBase + "/apartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.amenities() instead.
            "prototype$__get__amenities": {
              isArray: true,
              url: urlBase + "/apartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.amenities.create() instead.
            "prototype$__create__amenities": {
              url: urlBase + "/apartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.amenities.destroyAll() instead.
            "prototype$__delete__amenities": {
              url: urlBase + "/apartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.amenities.count() instead.
            "prototype$__count__amenities": {
              url: urlBase + "/apartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.safeties() instead.
            "prototype$__get__safeties": {
              isArray: true,
              url: urlBase + "/apartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use Apartment.safeties.create() instead.
            "prototype$__create__safeties": {
              url: urlBase + "/apartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use Apartment.safeties.destroyAll() instead.
            "prototype$__delete__safeties": {
              url: urlBase + "/apartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.safeties.count() instead.
            "prototype$__count__safeties": {
              url: urlBase + "/apartments/:id/safeties/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.utilities() instead.
            "prototype$__get__utilities": {
              isArray: true,
              url: urlBase + "/apartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.utilities.create() instead.
            "prototype$__create__utilities": {
              url: urlBase + "/apartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.utilities.destroyAll() instead.
            "prototype$__delete__utilities": {
              url: urlBase + "/apartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.utilities.count() instead.
            "prototype$__count__utilities": {
              url: urlBase + "/apartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2Campus() instead.
            "prototype$__get__distance2Campus": {
              isArray: true,
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2Campus.create() instead.
            "prototype$__create__distance2Campus": {
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2Campus.destroyAll() instead.
            "prototype$__delete__distance2Campus": {
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2Campus.count() instead.
            "prototype$__count__distance2Campus": {
              url: urlBase + "/apartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2City() instead.
            "prototype$__get__distance2City": {
              isArray: true,
              url: urlBase + "/apartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2City.create() instead.
            "prototype$__create__distance2City": {
              url: urlBase + "/apartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2City.destroyAll() instead.
            "prototype$__delete__distance2City": {
              url: urlBase + "/apartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2City.count() instead.
            "prototype$__count__distance2City": {
              url: urlBase + "/apartments/:id/distance2City/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__get__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries similarListings of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$__get__similarListings": {
              isArray: true,
              url: urlBase + "/apartments/:id/similarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__create__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Creates a new instance in similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$__create__similarListings": {
              url: urlBase + "/apartments/:id/similarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__delete__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Deletes all similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__similarListings": {
              url: urlBase + "/apartments/:id/similarListings",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$__count__similarListings
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Counts similarListings of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__similarListings": {
              url: urlBase + "/apartments/:id/similarListings/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.likeUsers() instead.
            "prototype$__get__likeUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.likeUsers.create() instead.
            "prototype$__create__likeUsers": {
              url: urlBase + "/apartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.likeUsers.destroyAll() instead.
            "prototype$__delete__likeUsers": {
              url: urlBase + "/apartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.likeUsers.count() instead.
            "prototype$__count__likeUsers": {
              url: urlBase + "/apartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.couponUsers() instead.
            "prototype$__get__couponUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.couponUsers.create() instead.
            "prototype$__create__couponUsers": {
              url: urlBase + "/apartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.couponUsers.destroyAll() instead.
            "prototype$__delete__couponUsers": {
              url: urlBase + "/apartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.couponUsers.count() instead.
            "prototype$__count__couponUsers": {
              url: urlBase + "/apartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.visitUsers() instead.
            "prototype$__get__visitUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.visitUsers.create() instead.
            "prototype$__create__visitUsers": {
              url: urlBase + "/apartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.visitUsers.destroyAll() instead.
            "prototype$__delete__visitUsers": {
              url: urlBase + "/apartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.visitUsers.count() instead.
            "prototype$__count__visitUsers": {
              url: urlBase + "/apartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.redirectUsers() instead.
            "prototype$__get__redirectUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.redirectUsers.create() instead.
            "prototype$__create__redirectUsers": {
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.redirectUsers.destroyAll() instead.
            "prototype$__delete__redirectUsers": {
              url: urlBase + "/apartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.redirectUsers.count() instead.
            "prototype$__count__redirectUsers": {
              url: urlBase + "/apartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.universities() instead.
            "prototype$__get__universities": {
              isArray: true,
              url: urlBase + "/apartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.universities.create() instead.
            "prototype$__create__universities": {
              url: urlBase + "/apartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.universities.destroyAll() instead.
            "prototype$__delete__universities": {
              url: urlBase + "/apartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.universities.count() instead.
            "prototype$__count__universities": {
              url: urlBase + "/apartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.cities() instead.
            "prototype$__get__cities": {
              isArray: true,
              url: urlBase + "/apartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.cities.create() instead.
            "prototype$__create__cities": {
              url: urlBase + "/apartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.cities.destroyAll() instead.
            "prototype$__delete__cities": {
              url: urlBase + "/apartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.cities.count() instead.
            "prototype$__count__cities": {
              url: urlBase + "/apartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers() instead.
            "prototype$__get__roommateUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.roommateUsers.create() instead.
            "prototype$__create__roommateUsers": {
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.roommateUsers.destroyAll() instead.
            "prototype$__delete__roommateUsers": {
              url: urlBase + "/apartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.roommateUsers.count() instead.
            "prototype$__count__roommateUsers": {
              url: urlBase + "/apartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers() instead.
            "prototype$__get__wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.create() instead.
            "prototype$__create__wishApartmentUsers": {
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.destroyAll() instead.
            "prototype$__delete__wishApartmentUsers": {
              url: urlBase + "/apartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.wishApartmentUsers.count() instead.
            "prototype$__count__wishApartmentUsers": {
              url: urlBase + "/apartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#create
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/apartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#createMany
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/apartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#upsert
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/apartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#replaceOrCreate
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/apartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#upsertWithWhere
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/apartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#exists
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/apartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#findById
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/apartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#replaceById
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/apartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#find
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/apartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#findOne
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/apartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#updateAll
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/apartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#deleteById
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/apartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#count
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#prototype$updateAttributes
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/apartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#createChangeStream
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/apartments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#export
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `type` – `{string}` - the exported file type.
             *
             *  - `include` – `{*=}` - the list of ids that will be exported
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "export": {
              url: urlBase + "/apartments/export",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#exportUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `type` – `{string}` - the exported file type.
             *
             *  - `include` – `{*=}` - the list of ids that will be exported
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "exportUsers": {
              url: urlBase + "/apartments/exportUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#gaExtract
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `category` – `{string}` - the category
             *
             *  - `startDate` – `{string}` - the start date to query google analytics
             *
             *  - `endDate` – `{string}` - the end date to query google analytics
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "gaExtract": {
              url: urlBase + "/apartments/gaExtract",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#gaExtractImpression
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `category` – `{string}` - the category
             *
             *  - `startDate` – `{string}` - the start date to query google analytics
             *
             *  - `endDate` – `{string}` - the end date to query google analytics
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "gaExtractImpression": {
              url: urlBase + "/apartments/gaExtractImpression",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#gaExtractPortal
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `category` – `{string}` - the category
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "gaExtractPortal": {
              url: urlBase + "/apartments/gaExtractPortal",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#sendEmail
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `to` – `{*}` - the emails to send to
             *
             *  - `apartmentName` – `{string}` - the name of apartment
             *
             *  - `userId` – `{string}` - the id of user
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "sendEmail": {
              url: urlBase + "/apartments/sendEmail",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#coupon
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{string}` - the id of apartment
             *
             *  - `userId` – `{string}` - the user id
             *
             *  - `action` – `{string=}` - the user action
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "coupon": {
              url: urlBase + "/apartments/:id/coupon",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#getCouponSubscribeNum
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{string}` - the apartment id
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "getCouponSubscribeNum": {
              url: urlBase + "/apartments/:id/get-couponSubscribeNum",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#sendCouponSubscribeNotification
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string}` - the apartment id
             *
             *  - `name` – `{string}` - the apartment name
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "sendCouponSubscribeNotification": {
              url: urlBase + "/apartments/:id/send-couponSubscribeNotification",
              method: "POST",
            },

            // INTERNAL. Use User.likeApartments.findById() instead.
            "::findById::User::likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.likeApartments.destroyById() instead.
            "::destroyById::User::likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.likeApartments.updateById() instead.
            "::updateById::User::likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.likeApartments.link() instead.
            "::link::User::likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.likeApartments.unlink() instead.
            "::unlink::User::likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.likeApartments.exists() instead.
            "::exists::User::likeApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/likeApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.couponApartments.findById() instead.
            "::findById::User::couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.couponApartments.destroyById() instead.
            "::destroyById::User::couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.couponApartments.updateById() instead.
            "::updateById::User::couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.couponApartments.link() instead.
            "::link::User::couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.couponApartments.unlink() instead.
            "::unlink::User::couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.couponApartments.exists() instead.
            "::exists::User::couponApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/couponApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.visitApartments.findById() instead.
            "::findById::User::visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.visitApartments.destroyById() instead.
            "::destroyById::User::visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.visitApartments.updateById() instead.
            "::updateById::User::visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.visitApartments.link() instead.
            "::link::User::visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.visitApartments.unlink() instead.
            "::unlink::User::visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.visitApartments.exists() instead.
            "::exists::User::visitApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/visitApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.redirectApartments.findById() instead.
            "::findById::User::redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.redirectApartments.destroyById() instead.
            "::destroyById::User::redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.redirectApartments.updateById() instead.
            "::updateById::User::redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.redirectApartments.link() instead.
            "::link::User::redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.redirectApartments.unlink() instead.
            "::unlink::User::redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.redirectApartments.exists() instead.
            "::exists::User::redirectApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/redirectApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.roommateApartments.findById() instead.
            "::findById::User::roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roommateApartments.destroyById() instead.
            "::destroyById::User::roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roommateApartments.updateById() instead.
            "::updateById::User::roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roommateApartments.link() instead.
            "::link::User::roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roommateApartments.unlink() instead.
            "::unlink::User::roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roommateApartments.exists() instead.
            "::exists::User::roommateApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roommateApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.wishedApartments.findById() instead.
            "::findById::User::wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.wishedApartments.destroyById() instead.
            "::destroyById::User::wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.wishedApartments.updateById() instead.
            "::updateById::User::wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.wishedApartments.link() instead.
            "::link::User::wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.wishedApartments.unlink() instead.
            "::unlink::User::wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.wishedApartments.exists() instead.
            "::exists::User::wishedApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/wishedApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.likeApartments() instead.
            "::get::User::likeApartments": {
              isArray: true,
              url: urlBase + "/users/:id/likeApartments",
              method: "GET",
            },

            // INTERNAL. Use User.likeApartments.create() instead.
            "::create::User::likeApartments": {
              url: urlBase + "/users/:id/likeApartments",
              method: "POST",
            },

            // INTERNAL. Use User.likeApartments.createMany() instead.
            "::createMany::User::likeApartments": {
              isArray: true,
              url: urlBase + "/users/:id/likeApartments",
              method: "POST",
            },

            // INTERNAL. Use User.likeApartments.destroyAll() instead.
            "::delete::User::likeApartments": {
              url: urlBase + "/users/:id/likeApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.likeApartments.count() instead.
            "::count::User::likeApartments": {
              url: urlBase + "/users/:id/likeApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.couponApartments() instead.
            "::get::User::couponApartments": {
              isArray: true,
              url: urlBase + "/users/:id/couponApartments",
              method: "GET",
            },

            // INTERNAL. Use User.couponApartments.create() instead.
            "::create::User::couponApartments": {
              url: urlBase + "/users/:id/couponApartments",
              method: "POST",
            },

            // INTERNAL. Use User.couponApartments.createMany() instead.
            "::createMany::User::couponApartments": {
              isArray: true,
              url: urlBase + "/users/:id/couponApartments",
              method: "POST",
            },

            // INTERNAL. Use User.couponApartments.destroyAll() instead.
            "::delete::User::couponApartments": {
              url: urlBase + "/users/:id/couponApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.couponApartments.count() instead.
            "::count::User::couponApartments": {
              url: urlBase + "/users/:id/couponApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.visitApartments() instead.
            "::get::User::visitApartments": {
              isArray: true,
              url: urlBase + "/users/:id/visitApartments",
              method: "GET",
            },

            // INTERNAL. Use User.visitApartments.create() instead.
            "::create::User::visitApartments": {
              url: urlBase + "/users/:id/visitApartments",
              method: "POST",
            },

            // INTERNAL. Use User.visitApartments.createMany() instead.
            "::createMany::User::visitApartments": {
              isArray: true,
              url: urlBase + "/users/:id/visitApartments",
              method: "POST",
            },

            // INTERNAL. Use User.visitApartments.destroyAll() instead.
            "::delete::User::visitApartments": {
              url: urlBase + "/users/:id/visitApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.visitApartments.count() instead.
            "::count::User::visitApartments": {
              url: urlBase + "/users/:id/visitApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.redirectApartments() instead.
            "::get::User::redirectApartments": {
              isArray: true,
              url: urlBase + "/users/:id/redirectApartments",
              method: "GET",
            },

            // INTERNAL. Use User.redirectApartments.create() instead.
            "::create::User::redirectApartments": {
              url: urlBase + "/users/:id/redirectApartments",
              method: "POST",
            },

            // INTERNAL. Use User.redirectApartments.createMany() instead.
            "::createMany::User::redirectApartments": {
              isArray: true,
              url: urlBase + "/users/:id/redirectApartments",
              method: "POST",
            },

            // INTERNAL. Use User.redirectApartments.destroyAll() instead.
            "::delete::User::redirectApartments": {
              url: urlBase + "/users/:id/redirectApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.redirectApartments.count() instead.
            "::count::User::redirectApartments": {
              url: urlBase + "/users/:id/redirectApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.roommateApartments() instead.
            "::get::User::roommateApartments": {
              isArray: true,
              url: urlBase + "/users/:id/roommateApartments",
              method: "GET",
            },

            // INTERNAL. Use User.roommateApartments.create() instead.
            "::create::User::roommateApartments": {
              url: urlBase + "/users/:id/roommateApartments",
              method: "POST",
            },

            // INTERNAL. Use User.roommateApartments.createMany() instead.
            "::createMany::User::roommateApartments": {
              isArray: true,
              url: urlBase + "/users/:id/roommateApartments",
              method: "POST",
            },

            // INTERNAL. Use User.roommateApartments.destroyAll() instead.
            "::delete::User::roommateApartments": {
              url: urlBase + "/users/:id/roommateApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.roommateApartments.count() instead.
            "::count::User::roommateApartments": {
              url: urlBase + "/users/:id/roommateApartments/count",
              method: "GET",
            },

            // INTERNAL. Use User.wishedApartments() instead.
            "::get::User::wishedApartments": {
              isArray: true,
              url: urlBase + "/users/:id/wishedApartments",
              method: "GET",
            },

            // INTERNAL. Use User.wishedApartments.create() instead.
            "::create::User::wishedApartments": {
              url: urlBase + "/users/:id/wishedApartments",
              method: "POST",
            },

            // INTERNAL. Use User.wishedApartments.createMany() instead.
            "::createMany::User::wishedApartments": {
              isArray: true,
              url: urlBase + "/users/:id/wishedApartments",
              method: "POST",
            },

            // INTERNAL. Use User.wishedApartments.destroyAll() instead.
            "::delete::User::wishedApartments": {
              url: urlBase + "/users/:id/wishedApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.wishedApartments.count() instead.
            "::count::User::wishedApartments": {
              url: urlBase + "/users/:id/wishedApartments/count",
              method: "GET",
            },

            // INTERNAL. Use Tag.apartments.findById() instead.
            "::findById::Tag::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Tag.apartments.destroyById() instead.
            "::destroyById::Tag::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tag.apartments.updateById() instead.
            "::updateById::Tag::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tag.apartments.link() instead.
            "::link::Tag::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tag.apartments.unlink() instead.
            "::unlink::Tag::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tag.apartments.exists() instead.
            "::exists::Tag::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Tag.apartments() instead.
            "::get::Tag::apartments": {
              isArray: true,
              url: urlBase + "/tags/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Tag.apartments.create() instead.
            "::create::Tag::apartments": {
              url: urlBase + "/tags/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Tag.apartments.createMany() instead.
            "::createMany::Tag::apartments": {
              isArray: true,
              url: urlBase + "/tags/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Tag.apartments.destroyAll() instead.
            "::delete::Tag::apartments": {
              url: urlBase + "/tags/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Tag.apartments.count() instead.
            "::count::Tag::apartments": {
              url: urlBase + "/tags/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use Feature.apartments.findById() instead.
            "::findById::Feature::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Feature.apartments.destroyById() instead.
            "::destroyById::Feature::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Feature.apartments.updateById() instead.
            "::updateById::Feature::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Feature.apartments.link() instead.
            "::link::Feature::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Feature.apartments.unlink() instead.
            "::unlink::Feature::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Feature.apartments.exists() instead.
            "::exists::Feature::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Feature.apartments() instead.
            "::get::Feature::apartments": {
              isArray: true,
              url: urlBase + "/features/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Feature.apartments.create() instead.
            "::create::Feature::apartments": {
              url: urlBase + "/features/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Feature.apartments.createMany() instead.
            "::createMany::Feature::apartments": {
              isArray: true,
              url: urlBase + "/features/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Feature.apartments.destroyAll() instead.
            "::delete::Feature::apartments": {
              url: urlBase + "/features/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Feature.apartments.count() instead.
            "::count::Feature::apartments": {
              url: urlBase + "/features/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use Amenity.apartments.findById() instead.
            "::findById::Amenity::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Amenity.apartments.destroyById() instead.
            "::destroyById::Amenity::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Amenity.apartments.updateById() instead.
            "::updateById::Amenity::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Amenity.apartments.link() instead.
            "::link::Amenity::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Amenity.apartments.unlink() instead.
            "::unlink::Amenity::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Amenity.apartments.exists() instead.
            "::exists::Amenity::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Amenity.apartments() instead.
            "::get::Amenity::apartments": {
              isArray: true,
              url: urlBase + "/amenities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Amenity.apartments.create() instead.
            "::create::Amenity::apartments": {
              url: urlBase + "/amenities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Amenity.apartments.createMany() instead.
            "::createMany::Amenity::apartments": {
              isArray: true,
              url: urlBase + "/amenities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Amenity.apartments.destroyAll() instead.
            "::delete::Amenity::apartments": {
              url: urlBase + "/amenities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Amenity.apartments.count() instead.
            "::count::Amenity::apartments": {
              url: urlBase + "/amenities/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use Safety.apartments.findById() instead.
            "::findById::Safety::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Safety.apartments.destroyById() instead.
            "::destroyById::Safety::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Safety.apartments.updateById() instead.
            "::updateById::Safety::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Safety.apartments.link() instead.
            "::link::Safety::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Safety.apartments.unlink() instead.
            "::unlink::Safety::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Safety.apartments.exists() instead.
            "::exists::Safety::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Safety.apartments() instead.
            "::get::Safety::apartments": {
              isArray: true,
              url: urlBase + "/safety/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Safety.apartments.create() instead.
            "::create::Safety::apartments": {
              url: urlBase + "/safety/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Safety.apartments.createMany() instead.
            "::createMany::Safety::apartments": {
              isArray: true,
              url: urlBase + "/safety/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Safety.apartments.destroyAll() instead.
            "::delete::Safety::apartments": {
              url: urlBase + "/safety/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Safety.apartments.count() instead.
            "::count::Safety::apartments": {
              url: urlBase + "/safety/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use Utility.apartments.findById() instead.
            "::findById::Utility::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Utility.apartments.destroyById() instead.
            "::destroyById::Utility::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Utility.apartments.updateById() instead.
            "::updateById::Utility::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Utility.apartments.link() instead.
            "::link::Utility::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Utility.apartments.unlink() instead.
            "::unlink::Utility::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Utility.apartments.exists() instead.
            "::exists::Utility::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Utility.apartments() instead.
            "::get::Utility::apartments": {
              isArray: true,
              url: urlBase + "/utilities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Utility.apartments.create() instead.
            "::create::Utility::apartments": {
              url: urlBase + "/utilities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Utility.apartments.createMany() instead.
            "::createMany::Utility::apartments": {
              isArray: true,
              url: urlBase + "/utilities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Utility.apartments.destroyAll() instead.
            "::delete::Utility::apartments": {
              url: urlBase + "/utilities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Utility.apartments.count() instead.
            "::count::Utility::apartments": {
              url: urlBase + "/utilities/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.apartment() instead.
            "::get::FloorPlan::apartment": {
              url: urlBase + "/floorPlans/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentUniv.apartment() instead.
            "::get::ApartmentUniv::apartment": {
              url: urlBase + "/apartmentUnivs/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentCity.apartment() instead.
            "::get::ApartmentCity::apartment": {
              url: urlBase + "/apartmentCities/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentSimilarListing.apartment() instead.
            "::get::ApartmentSimilarListing::apartment": {
              url: urlBase + "/apartmentSimilarListings/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentSimilarListing.similarListing() instead.
            "::get::ApartmentSimilarListing::similarListing": {
              url: urlBase + "/apartmentSimilarListings/:id/similarListing",
              method: "GET",
            },

            // INTERNAL. Use VisitApartment.apartment() instead.
            "::get::VisitApartment::apartment": {
              url: urlBase + "/visitApartments/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use RedirectApartment.apartment() instead.
            "::get::RedirectApartment::apartment": {
              url: urlBase + "/redirectApartments/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use University.apartments.findById() instead.
            "::findById::University::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use University.apartments.destroyById() instead.
            "::destroyById::University::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use University.apartments.updateById() instead.
            "::updateById::University::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use University.apartments.link() instead.
            "::link::University::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use University.apartments.unlink() instead.
            "::unlink::University::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use University.apartments.exists() instead.
            "::exists::University::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use University.apartments() instead.
            "::get::University::apartments": {
              isArray: true,
              url: urlBase + "/universities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use University.apartments.create() instead.
            "::create::University::apartments": {
              url: urlBase + "/universities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use University.apartments.createMany() instead.
            "::createMany::University::apartments": {
              isArray: true,
              url: urlBase + "/universities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use University.apartments.destroyAll() instead.
            "::delete::University::apartments": {
              url: urlBase + "/universities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use University.apartments.count() instead.
            "::count::University::apartments": {
              url: urlBase + "/universities/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use City.apartments.findById() instead.
            "::findById::City::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use City.apartments.destroyById() instead.
            "::destroyById::City::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use City.apartments.updateById() instead.
            "::updateById::City::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use City.apartments.link() instead.
            "::link::City::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use City.apartments.unlink() instead.
            "::unlink::City::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use City.apartments.exists() instead.
            "::exists::City::apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use City.apartments() instead.
            "::get::City::apartments": {
              isArray: true,
              url: urlBase + "/cities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use City.apartments.create() instead.
            "::create::City::apartments": {
              url: urlBase + "/cities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use City.apartments.createMany() instead.
            "::createMany::City::apartments": {
              isArray: true,
              url: urlBase + "/cities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use City.apartments.destroyAll() instead.
            "::delete::City::apartments": {
              url: urlBase + "/cities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use City.apartments.count() instead.
            "::count::City::apartments": {
              url: urlBase + "/cities/:id/apartments/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartmentSimilarListing.similarListing() instead.
            "::get::PendingApartmentSimilarListing::similarListing": {
              url: urlBase + "/pendingApartmentSimilarListings/:id/similarListing",
              method: "GET",
            },

            // INTERNAL. Use WishList.apartment() instead.
            "::get::WishList::apartment": {
              url: urlBase + "/wishLists/:id/apartment",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#patchOrCreate
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#updateOrCreate
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#update
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#destroyById
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#removeById
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#patchAttributes
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Apartment#modelName
        * @propertyOf housingApiServices.Apartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Apartment`.
        */
        R.modelName = "Apartment";

    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.floorPlans
     * @header housingApiServices.Apartment.floorPlans
     * @object
     * @description
     *
     * The object `Apartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#floorPlans Apartment.floorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#floorPlans
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries floorPlans of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#count
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Counts floorPlans of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#create
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#createMany
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#destroyAll
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Deletes all floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#destroyById
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Delete a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#findById
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Find a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.floorPlans#updateById
             * @methodOf housingApiServices.Apartment.floorPlans
             *
             * @description
             *
             * Update a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::Apartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.tags
     * @header housingApiServices.Apartment.tags
     * @object
     * @description
     *
     * The object `Apartment.tags` groups methods
     * manipulating `Tag` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#tags Apartment.tags()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#tags
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries tags of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#count
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Counts tags of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#create
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#createMany
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#destroyAll
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Deletes all tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#destroyById
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Delete a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#exists
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Check the existence of tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#findById
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Find a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#link
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Add a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#unlink
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Remove the tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::Apartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.tags#updateById
             * @methodOf housingApiServices.Apartment.tags
             *
             * @description
             *
             * Update a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::Apartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.features
     * @header housingApiServices.Apartment.features
     * @object
     * @description
     *
     * The object `Apartment.features` groups methods
     * manipulating `Feature` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#features Apartment.features()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#features
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries features of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::get::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#count
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Counts features of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.features.count = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::count::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#create
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.create = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::create::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#createMany
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.createMany = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::createMany::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#destroyAll
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Deletes all features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyAll = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::delete::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#destroyById
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Delete a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::destroyById::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#exists
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Check the existence of features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.exists = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::exists::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#findById
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Find a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.findById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::findById::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#link
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Add a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.link = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::link::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#unlink
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Remove the features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.unlink = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::unlink::Apartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.features#updateById
             * @methodOf housingApiServices.Apartment.features
             *
             * @description
             *
             * Update a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.updateById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::updateById::Apartment::features"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.amenities
     * @header housingApiServices.Apartment.amenities
     * @object
     * @description
     *
     * The object `Apartment.amenities` groups methods
     * manipulating `Amenity` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#amenities Apartment.amenities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#amenities
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries amenities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::get::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#count
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Counts amenities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.amenities.count = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::count::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#create
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.create = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::create::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#createMany
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.createMany = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::createMany::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#destroyAll
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Deletes all amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyAll = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::delete::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#destroyById
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Delete a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::destroyById::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#exists
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Check the existence of amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.exists = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::exists::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#findById
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Find a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.findById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::findById::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#link
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Add a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.link = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::link::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#unlink
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Remove the amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.unlink = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::unlink::Apartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.amenities#updateById
             * @methodOf housingApiServices.Apartment.amenities
             *
             * @description
             *
             * Update a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.updateById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::updateById::Apartment::amenities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.safeties
     * @header housingApiServices.Apartment.safeties
     * @object
     * @description
     *
     * The object `Apartment.safeties` groups methods
     * manipulating `Safety` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#safeties Apartment.safeties()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#safeties
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries safeties of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::get::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#count
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Counts safeties of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.safeties.count = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::count::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#create
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.create = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::create::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#createMany
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.createMany = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::createMany::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#destroyAll
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Deletes all safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyAll = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::delete::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#destroyById
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Delete a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::destroyById::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#exists
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Check the existence of safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.exists = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::exists::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#findById
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Find a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.findById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::findById::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#link
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Add a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.link = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::link::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#unlink
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Remove the safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.unlink = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::unlink::Apartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.safeties#updateById
             * @methodOf housingApiServices.Apartment.safeties
             *
             * @description
             *
             * Update a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.updateById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::updateById::Apartment::safeties"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.utilities
     * @header housingApiServices.Apartment.utilities
     * @object
     * @description
     *
     * The object `Apartment.utilities` groups methods
     * manipulating `Utility` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#utilities Apartment.utilities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#utilities
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries utilities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::get::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#count
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Counts utilities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.utilities.count = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::count::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#create
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.create = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::create::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#createMany
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.createMany = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::createMany::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#destroyAll
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Deletes all utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyAll = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::delete::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#destroyById
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Delete a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::destroyById::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#exists
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Check the existence of utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.exists = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::exists::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#findById
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Find a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.findById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::findById::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#link
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Add a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.link = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::link::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#unlink
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Remove the utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.unlink = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::unlink::Apartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.utilities#updateById
             * @methodOf housingApiServices.Apartment.utilities
             *
             * @description
             *
             * Update a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.updateById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::updateById::Apartment::utilities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.distance2Campus
     * @header housingApiServices.Apartment.distance2Campus
     * @object
     * @description
     *
     * The object `Apartment.distance2Campus` groups methods
     * manipulating `ApartmentUniv` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#distance2Campus Apartment.distance2Campus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#distance2Campus
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries distance2Campus of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::get::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#count
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Counts distance2Campus of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2Campus.count = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::count::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#create
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.create = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::create::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#createMany
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.createMany = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::createMany::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#destroyAll
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Deletes all distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::delete::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#destroyById
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Delete a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::destroyById::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#findById
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Find a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.findById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::findById::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2Campus#updateById
             * @methodOf housingApiServices.Apartment.distance2Campus
             *
             * @description
             *
             * Update a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.updateById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::updateById::Apartment::distance2Campus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.distance2City
     * @header housingApiServices.Apartment.distance2City
     * @object
     * @description
     *
     * The object `Apartment.distance2City` groups methods
     * manipulating `ApartmentCity` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#distance2City Apartment.distance2City()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#distance2City
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries distance2City of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::get::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#count
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Counts distance2City of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2City.count = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::count::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#create
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.create = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::create::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#createMany
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.createMany = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::createMany::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#destroyAll
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Deletes all distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::delete::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#destroyById
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Delete a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::destroyById::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#findById
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Find a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.findById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::findById::Apartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.distance2City#updateById
             * @methodOf housingApiServices.Apartment.distance2City
             *
             * @description
             *
             * Update a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.updateById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::updateById::Apartment::distance2City"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.likeUsers
     * @header housingApiServices.Apartment.likeUsers
     * @object
     * @description
     *
     * The object `Apartment.likeUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#likeUsers Apartment.likeUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#likeUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries likeUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#count
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Counts likeUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#create
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#createMany
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#destroyAll
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Deletes all likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#destroyById
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Delete a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#exists
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Check the existence of likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#findById
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Find a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#link
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Add a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#unlink
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Remove the likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.likeUsers#updateById
             * @methodOf housingApiServices.Apartment.likeUsers
             *
             * @description
             *
             * Update a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Apartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.couponUsers
     * @header housingApiServices.Apartment.couponUsers
     * @object
     * @description
     *
     * The object `Apartment.couponUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#couponUsers Apartment.couponUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#couponUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries couponUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#count
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Counts couponUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#create
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#createMany
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#destroyAll
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Deletes all couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#destroyById
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Delete a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#exists
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Check the existence of couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#findById
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Find a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#link
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Add a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#unlink
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Remove the couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.couponUsers#updateById
             * @methodOf housingApiServices.Apartment.couponUsers
             *
             * @description
             *
             * Update a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Apartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.visitUsers
     * @header housingApiServices.Apartment.visitUsers
     * @object
     * @description
     *
     * The object `Apartment.visitUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#visitUsers Apartment.visitUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#visitUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries visitUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#count
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Counts visitUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#create
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#createMany
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#destroyAll
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Deletes all visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#destroyById
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Delete a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#exists
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Check the existence of visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#findById
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Find a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#link
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Add a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#unlink
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Remove the visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.visitUsers#updateById
             * @methodOf housingApiServices.Apartment.visitUsers
             *
             * @description
             *
             * Update a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Apartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.redirectUsers
     * @header housingApiServices.Apartment.redirectUsers
     * @object
     * @description
     *
     * The object `Apartment.redirectUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#redirectUsers Apartment.redirectUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#redirectUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries redirectUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#count
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Counts redirectUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#create
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#createMany
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#destroyAll
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Deletes all redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#destroyById
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Delete a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#exists
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Check the existence of redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#findById
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Find a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#link
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Add a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#unlink
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Remove the redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.redirectUsers#updateById
             * @methodOf housingApiServices.Apartment.redirectUsers
             *
             * @description
             *
             * Update a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Apartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.universities
     * @header housingApiServices.Apartment.universities
     * @object
     * @description
     *
     * The object `Apartment.universities` groups methods
     * manipulating `University` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#universities Apartment.universities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#universities
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries universities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#count
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Counts universities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#create
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#createMany
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#destroyAll
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Deletes all universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#destroyById
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Delete a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#exists
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Check the existence of universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#findById
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Find a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#link
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Add a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#unlink
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Remove the universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::Apartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.universities#updateById
             * @methodOf housingApiServices.Apartment.universities
             *
             * @description
             *
             * Update a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::Apartment::universities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.cities
     * @header housingApiServices.Apartment.cities
     * @object
     * @description
     *
     * The object `Apartment.cities` groups methods
     * manipulating `City` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#cities Apartment.cities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#cities
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries cities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::get::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#count
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Counts cities of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.cities.count = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::count::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#create
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.create = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::create::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#createMany
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.createMany = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::createMany::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#destroyAll
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Deletes all cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyAll = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::delete::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#destroyById
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Delete a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::destroyById::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#exists
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Check the existence of cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.exists = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::exists::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#findById
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Find a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.findById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::findById::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#link
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Add a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.link = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::link::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#unlink
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Remove the cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.unlink = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::unlink::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.cities#updateById
             * @methodOf housingApiServices.Apartment.cities
             *
             * @description
             *
             * Update a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.updateById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::updateById::Apartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#submittedApartment
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Fetches belongsTo relation submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartment = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::get::Apartment::submittedApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.roommateUsers
     * @header housingApiServices.Apartment.roommateUsers
     * @object
     * @description
     *
     * The object `Apartment.roommateUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#roommateUsers Apartment.roommateUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#roommateUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries roommateUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#count
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Counts roommateUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#create
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#createMany
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#destroyAll
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Deletes all roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#destroyById
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Delete a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#exists
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Check the existence of roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#findById
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Find a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#link
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Add a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#unlink
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Remove the roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.roommateUsers#updateById
             * @methodOf housingApiServices.Apartment.roommateUsers
             *
             * @description
             *
             * Update a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Apartment::roommateUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.Apartment.wishApartmentUsers
     * @header housingApiServices.Apartment.wishApartmentUsers
     * @object
     * @description
     *
     * The object `Apartment.wishApartmentUsers` groups methods
     * manipulating `User` instances related to `Apartment`.
     *
     * Call {@link housingApiServices.Apartment#wishApartmentUsers Apartment.wishApartmentUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Apartment#wishApartmentUsers
             * @methodOf housingApiServices.Apartment
             *
             * @description
             *
             * Queries wishApartmentUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#count
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Counts wishApartmentUsers of apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishApartmentUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#create
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#createMany
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#destroyAll
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Deletes all wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#destroyById
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Delete a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#exists
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Check the existence of wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#findById
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Find a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#link
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Add a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#unlink
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Remove the wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Apartment.wishApartmentUsers#updateById
             * @methodOf housingApiServices.Apartment.wishApartmentUsers
             *
             * @description
             *
             * Update a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Apartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Tag
 * @header housingApiServices.Tag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Tag",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/tags/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Tag.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Tag.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tag.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tag.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tag.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tag.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tags/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Tag.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/tags/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Tag.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/tags/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Tag.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/tags/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Tag.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/tags/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#create
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/tags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#createMany
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/tags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#upsert
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/tags",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#replaceOrCreate
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/tags/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#upsertWithWhere
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/tags/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#exists
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/tags/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#findById
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/tags/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#replaceById
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/tags/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#find
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/tags",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#findOne
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/tags/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#updateAll
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/tags/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#deleteById
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/tags/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#count
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/tags/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#prototype$updateAttributes
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/tags/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#createChangeStream
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/tags/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.tags.findById() instead.
            "::findById::Apartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.tags.destroyById() instead.
            "::destroyById::Apartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.tags.updateById() instead.
            "::updateById::Apartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.tags.link() instead.
            "::link::Apartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.tags.unlink() instead.
            "::unlink::Apartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.tags.exists() instead.
            "::exists::Apartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.tags() instead.
            "::get::Apartment::tags": {
              isArray: true,
              url: urlBase + "/apartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use Apartment.tags.create() instead.
            "::create::Apartment::tags": {
              url: urlBase + "/apartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use Apartment.tags.createMany() instead.
            "::createMany::Apartment::tags": {
              isArray: true,
              url: urlBase + "/apartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use Apartment.tags.destroyAll() instead.
            "::delete::Apartment::tags": {
              url: urlBase + "/apartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.tags.count() instead.
            "::count::Apartment::tags": {
              url: urlBase + "/apartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.tags.findById() instead.
            "::findById::CrawledApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.tags.destroyById() instead.
            "::destroyById::CrawledApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.tags.updateById() instead.
            "::updateById::CrawledApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.tags.link() instead.
            "::link::CrawledApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.tags.unlink() instead.
            "::unlink::CrawledApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.tags.exists() instead.
            "::exists::CrawledApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.tags() instead.
            "::get::CrawledApartment::tags": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.tags.create() instead.
            "::create::CrawledApartment::tags": {
              url: urlBase + "/crawledApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.tags.createMany() instead.
            "::createMany::CrawledApartment::tags": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.tags.destroyAll() instead.
            "::delete::CrawledApartment::tags": {
              url: urlBase + "/crawledApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.tags.count() instead.
            "::count::CrawledApartment::tags": {
              url: urlBase + "/crawledApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.tags.findById() instead.
            "::findById::PendingApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.tags.destroyById() instead.
            "::destroyById::PendingApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.tags.updateById() instead.
            "::updateById::PendingApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.tags.link() instead.
            "::link::PendingApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.tags.unlink() instead.
            "::unlink::PendingApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.tags.exists() instead.
            "::exists::PendingApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.features.findById() instead.
            "::findById::PendingApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.features.destroyById() instead.
            "::destroyById::PendingApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.features.updateById() instead.
            "::updateById::PendingApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.features.link() instead.
            "::link::PendingApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.features.unlink() instead.
            "::unlink::PendingApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.features.exists() instead.
            "::exists::PendingApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.amenities.findById() instead.
            "::findById::PendingApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.amenities.destroyById() instead.
            "::destroyById::PendingApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.amenities.updateById() instead.
            "::updateById::PendingApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.amenities.link() instead.
            "::link::PendingApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.amenities.unlink() instead.
            "::unlink::PendingApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.amenities.exists() instead.
            "::exists::PendingApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.safeties.findById() instead.
            "::findById::PendingApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.safeties.destroyById() instead.
            "::destroyById::PendingApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.safeties.updateById() instead.
            "::updateById::PendingApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.safeties.link() instead.
            "::link::PendingApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.safeties.unlink() instead.
            "::unlink::PendingApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.safeties.exists() instead.
            "::exists::PendingApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.utilities.findById() instead.
            "::findById::PendingApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.utilities.destroyById() instead.
            "::destroyById::PendingApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.utilities.updateById() instead.
            "::updateById::PendingApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.utilities.link() instead.
            "::link::PendingApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.utilities.unlink() instead.
            "::unlink::PendingApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.utilities.exists() instead.
            "::exists::PendingApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.tags() instead.
            "::get::PendingApartment::tags": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.tags.create() instead.
            "::create::PendingApartment::tags": {
              url: urlBase + "/pendingApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.tags.createMany() instead.
            "::createMany::PendingApartment::tags": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.tags.destroyAll() instead.
            "::delete::PendingApartment::tags": {
              url: urlBase + "/pendingApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.tags.count() instead.
            "::count::PendingApartment::tags": {
              url: urlBase + "/pendingApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.features() instead.
            "::get::PendingApartment::features": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.features.create() instead.
            "::create::PendingApartment::features": {
              url: urlBase + "/pendingApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.features.createMany() instead.
            "::createMany::PendingApartment::features": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.features.destroyAll() instead.
            "::delete::PendingApartment::features": {
              url: urlBase + "/pendingApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.features.count() instead.
            "::count::PendingApartment::features": {
              url: urlBase + "/pendingApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.amenities() instead.
            "::get::PendingApartment::amenities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.amenities.create() instead.
            "::create::PendingApartment::amenities": {
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.amenities.createMany() instead.
            "::createMany::PendingApartment::amenities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.amenities.destroyAll() instead.
            "::delete::PendingApartment::amenities": {
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.amenities.count() instead.
            "::count::PendingApartment::amenities": {
              url: urlBase + "/pendingApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.safeties() instead.
            "::get::PendingApartment::safeties": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.safeties.create() instead.
            "::create::PendingApartment::safeties": {
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.safeties.createMany() instead.
            "::createMany::PendingApartment::safeties": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.safeties.destroyAll() instead.
            "::delete::PendingApartment::safeties": {
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.safeties.count() instead.
            "::count::PendingApartment::safeties": {
              url: urlBase + "/pendingApartments/:id/safeties/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.utilities() instead.
            "::get::PendingApartment::utilities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.utilities.create() instead.
            "::create::PendingApartment::utilities": {
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.utilities.createMany() instead.
            "::createMany::PendingApartment::utilities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.utilities.destroyAll() instead.
            "::delete::PendingApartment::utilities": {
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.utilities.count() instead.
            "::count::PendingApartment::utilities": {
              url: urlBase + "/pendingApartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags.findById() instead.
            "::findById::SubmittedApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags.destroyById() instead.
            "::destroyById::SubmittedApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.tags.updateById() instead.
            "::updateById::SubmittedApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.tags.link() instead.
            "::link::SubmittedApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.tags.unlink() instead.
            "::unlink::SubmittedApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.tags.exists() instead.
            "::exists::SubmittedApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.tags() instead.
            "::get::SubmittedApartment::tags": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags.create() instead.
            "::create::SubmittedApartment::tags": {
              url: urlBase + "/submittedApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.tags.createMany() instead.
            "::createMany::SubmittedApartment::tags": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.tags.destroyAll() instead.
            "::delete::SubmittedApartment::tags": {
              url: urlBase + "/submittedApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.tags.count() instead.
            "::count::SubmittedApartment::tags": {
              url: urlBase + "/submittedApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.tags.findById() instead.
            "::findById::ProspectiveApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.tags.destroyById() instead.
            "::destroyById::ProspectiveApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.updateById() instead.
            "::updateById::ProspectiveApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.tags.link() instead.
            "::link::ProspectiveApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.tags.unlink() instead.
            "::unlink::ProspectiveApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.exists() instead.
            "::exists::ProspectiveApartment::tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.tags() instead.
            "::get::ProspectiveApartment::tags": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.tags.create() instead.
            "::create::ProspectiveApartment::tags": {
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.tags.createMany() instead.
            "::createMany::ProspectiveApartment::tags": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.tags.destroyAll() instead.
            "::delete::ProspectiveApartment::tags": {
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.count() instead.
            "::count::ProspectiveApartment::tags": {
              url: urlBase + "/prospectiveApartments/:id/tags/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Tag#patchOrCreate
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#updateOrCreate
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#patchOrCreateWithWhere
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#update
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#destroyById
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#removeById
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Tag#patchAttributes
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Tag#modelName
        * @propertyOf housingApiServices.Tag
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Tag`.
        */
        R.modelName = "Tag";

    /**
     * @ngdoc object
     * @name housingApiServices.Tag.apartments
     * @header housingApiServices.Tag.apartments
     * @object
     * @description
     *
     * The object `Tag.apartments` groups methods
     * manipulating `Apartment` instances related to `Tag`.
     *
     * Call {@link housingApiServices.Tag#apartments Tag.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Tag#apartments
             * @methodOf housingApiServices.Tag
             *
             * @description
             *
             * Queries apartments of tag.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#count
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Counts apartments of tag.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#create
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#createMany
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#destroyAll
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#destroyById
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#exists
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#findById
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#link
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#unlink
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::Tag::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Tag.apartments#updateById
             * @methodOf housingApiServices.Tag.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - tag id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::Tag::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Feature
 * @header housingApiServices.Feature
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Feature` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Feature",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/features/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Feature.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Feature.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Feature.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Feature.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Feature.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Feature.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/features/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Feature.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/features/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Feature.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/features/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Feature.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/features/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Feature.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/features/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#create
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/features",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#createMany
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/features",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#upsert
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/features",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#replaceOrCreate
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/features/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#upsertWithWhere
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/features/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#exists
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/features/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#findById
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/features/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#replaceById
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/features/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#find
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/features",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#findOne
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/features/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#updateAll
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/features/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#deleteById
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/features/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#count
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/features/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#prototype$updateAttributes
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/features/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#createChangeStream
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/features/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.features.findById() instead.
            "::findById::Apartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.features.destroyById() instead.
            "::destroyById::Apartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.features.updateById() instead.
            "::updateById::Apartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.features.link() instead.
            "::link::Apartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.features.unlink() instead.
            "::unlink::Apartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.features.exists() instead.
            "::exists::Apartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.features() instead.
            "::get::Apartment::features": {
              isArray: true,
              url: urlBase + "/apartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use Apartment.features.create() instead.
            "::create::Apartment::features": {
              url: urlBase + "/apartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use Apartment.features.createMany() instead.
            "::createMany::Apartment::features": {
              isArray: true,
              url: urlBase + "/apartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use Apartment.features.destroyAll() instead.
            "::delete::Apartment::features": {
              url: urlBase + "/apartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.features.count() instead.
            "::count::Apartment::features": {
              url: urlBase + "/apartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.features.findById() instead.
            "::findById::CrawledApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.features.destroyById() instead.
            "::destroyById::CrawledApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.features.updateById() instead.
            "::updateById::CrawledApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.features.link() instead.
            "::link::CrawledApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.features.unlink() instead.
            "::unlink::CrawledApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.features.exists() instead.
            "::exists::CrawledApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.features() instead.
            "::get::CrawledApartment::features": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.features.create() instead.
            "::create::CrawledApartment::features": {
              url: urlBase + "/crawledApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.features.createMany() instead.
            "::createMany::CrawledApartment::features": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.features.destroyAll() instead.
            "::delete::CrawledApartment::features": {
              url: urlBase + "/crawledApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.features.count() instead.
            "::count::CrawledApartment::features": {
              url: urlBase + "/crawledApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.features.findById() instead.
            "::findById::SubmittedApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.features.destroyById() instead.
            "::destroyById::SubmittedApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.features.updateById() instead.
            "::updateById::SubmittedApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.features.link() instead.
            "::link::SubmittedApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.features.unlink() instead.
            "::unlink::SubmittedApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.features.exists() instead.
            "::exists::SubmittedApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.features() instead.
            "::get::SubmittedApartment::features": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.features.create() instead.
            "::create::SubmittedApartment::features": {
              url: urlBase + "/submittedApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.features.createMany() instead.
            "::createMany::SubmittedApartment::features": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.features.destroyAll() instead.
            "::delete::SubmittedApartment::features": {
              url: urlBase + "/submittedApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.features.count() instead.
            "::count::SubmittedApartment::features": {
              url: urlBase + "/submittedApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.features.findById() instead.
            "::findById::ProspectiveApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.features.destroyById() instead.
            "::destroyById::ProspectiveApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.features.updateById() instead.
            "::updateById::ProspectiveApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.features.link() instead.
            "::link::ProspectiveApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.features.unlink() instead.
            "::unlink::ProspectiveApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.features.exists() instead.
            "::exists::ProspectiveApartment::features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.features() instead.
            "::get::ProspectiveApartment::features": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.features.create() instead.
            "::create::ProspectiveApartment::features": {
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.features.createMany() instead.
            "::createMany::ProspectiveApartment::features": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.features.destroyAll() instead.
            "::delete::ProspectiveApartment::features": {
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.features.count() instead.
            "::count::ProspectiveApartment::features": {
              url: urlBase + "/prospectiveApartments/:id/features/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Feature#patchOrCreate
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#updateOrCreate
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#patchOrCreateWithWhere
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#update
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#destroyById
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#removeById
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Feature#patchAttributes
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Feature#modelName
        * @propertyOf housingApiServices.Feature
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Feature`.
        */
        R.modelName = "Feature";

    /**
     * @ngdoc object
     * @name housingApiServices.Feature.apartments
     * @header housingApiServices.Feature.apartments
     * @object
     * @description
     *
     * The object `Feature.apartments` groups methods
     * manipulating `Apartment` instances related to `Feature`.
     *
     * Call {@link housingApiServices.Feature#apartments Feature.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Feature#apartments
             * @methodOf housingApiServices.Feature
             *
             * @description
             *
             * Queries apartments of feature.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#count
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Counts apartments of feature.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#create
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#createMany
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#destroyAll
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#destroyById
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#exists
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#findById
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#link
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#unlink
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::Feature::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Feature.apartments#updateById
             * @methodOf housingApiServices.Feature.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - feature id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::Feature::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Amenity
 * @header housingApiServices.Amenity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Amenity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Amenity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/amenities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Amenity.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Amenity.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Amenity.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Amenity.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Amenity.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Amenity.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/amenities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Amenity.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/amenities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Amenity.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/amenities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Amenity.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/amenities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Amenity.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/amenities/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#create
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/amenities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#createMany
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/amenities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#upsert
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/amenities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#replaceOrCreate
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/amenities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#upsertWithWhere
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/amenities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#exists
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/amenities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#findById
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/amenities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#replaceById
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/amenities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#find
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/amenities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#findOne
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/amenities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#updateAll
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/amenities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#deleteById
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/amenities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#count
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/amenities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#prototype$updateAttributes
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/amenities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#createChangeStream
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/amenities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.amenities.findById() instead.
            "::findById::Apartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.amenities.destroyById() instead.
            "::destroyById::Apartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.amenities.updateById() instead.
            "::updateById::Apartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.amenities.link() instead.
            "::link::Apartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.amenities.unlink() instead.
            "::unlink::Apartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.amenities.exists() instead.
            "::exists::Apartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.amenities() instead.
            "::get::Apartment::amenities": {
              isArray: true,
              url: urlBase + "/apartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.amenities.create() instead.
            "::create::Apartment::amenities": {
              url: urlBase + "/apartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.amenities.createMany() instead.
            "::createMany::Apartment::amenities": {
              isArray: true,
              url: urlBase + "/apartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.amenities.destroyAll() instead.
            "::delete::Apartment::amenities": {
              url: urlBase + "/apartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.amenities.count() instead.
            "::count::Apartment::amenities": {
              url: urlBase + "/apartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.amenities.findById() instead.
            "::findById::CrawledApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.amenities.destroyById() instead.
            "::destroyById::CrawledApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.amenities.updateById() instead.
            "::updateById::CrawledApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.amenities.link() instead.
            "::link::CrawledApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.amenities.unlink() instead.
            "::unlink::CrawledApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.amenities.exists() instead.
            "::exists::CrawledApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.amenities() instead.
            "::get::CrawledApartment::amenities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.amenities.create() instead.
            "::create::CrawledApartment::amenities": {
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.amenities.createMany() instead.
            "::createMany::CrawledApartment::amenities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.amenities.destroyAll() instead.
            "::delete::CrawledApartment::amenities": {
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.amenities.count() instead.
            "::count::CrawledApartment::amenities": {
              url: urlBase + "/crawledApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.amenities.findById() instead.
            "::findById::SubmittedApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.amenities.destroyById() instead.
            "::destroyById::SubmittedApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.amenities.updateById() instead.
            "::updateById::SubmittedApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.amenities.link() instead.
            "::link::SubmittedApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.amenities.unlink() instead.
            "::unlink::SubmittedApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.amenities.exists() instead.
            "::exists::SubmittedApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.amenities() instead.
            "::get::SubmittedApartment::amenities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.amenities.create() instead.
            "::create::SubmittedApartment::amenities": {
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.amenities.createMany() instead.
            "::createMany::SubmittedApartment::amenities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.amenities.destroyAll() instead.
            "::delete::SubmittedApartment::amenities": {
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.amenities.count() instead.
            "::count::SubmittedApartment::amenities": {
              url: urlBase + "/submittedApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.findById() instead.
            "::findById::ProspectiveApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.destroyById() instead.
            "::destroyById::ProspectiveApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.updateById() instead.
            "::updateById::ProspectiveApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.link() instead.
            "::link::ProspectiveApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.unlink() instead.
            "::unlink::ProspectiveApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.exists() instead.
            "::exists::ProspectiveApartment::amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.amenities() instead.
            "::get::ProspectiveApartment::amenities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.create() instead.
            "::create::ProspectiveApartment::amenities": {
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.createMany() instead.
            "::createMany::ProspectiveApartment::amenities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.destroyAll() instead.
            "::delete::ProspectiveApartment::amenities": {
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.count() instead.
            "::count::ProspectiveApartment::amenities": {
              url: urlBase + "/prospectiveApartments/:id/amenities/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#patchOrCreate
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#updateOrCreate
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#patchOrCreateWithWhere
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#update
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#destroyById
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#removeById
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#patchAttributes
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Amenity#modelName
        * @propertyOf housingApiServices.Amenity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Amenity`.
        */
        R.modelName = "Amenity";

    /**
     * @ngdoc object
     * @name housingApiServices.Amenity.apartments
     * @header housingApiServices.Amenity.apartments
     * @object
     * @description
     *
     * The object `Amenity.apartments` groups methods
     * manipulating `Apartment` instances related to `Amenity`.
     *
     * Call {@link housingApiServices.Amenity#apartments Amenity.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Amenity#apartments
             * @methodOf housingApiServices.Amenity
             *
             * @description
             *
             * Queries apartments of amenity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#count
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Counts apartments of amenity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#create
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#createMany
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#destroyAll
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#destroyById
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#exists
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#findById
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#link
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#unlink
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::Amenity::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Amenity.apartments#updateById
             * @methodOf housingApiServices.Amenity.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - amenity id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::Amenity::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Safety
 * @header housingApiServices.Safety
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Safety` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Safety",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/safety/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Safety.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Safety.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Safety.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Safety.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Safety.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Safety.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/safety/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Safety.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/safety/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Safety.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/safety/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Safety.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/safety/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Safety.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/safety/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#create
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/safety",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#createMany
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/safety",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#upsert
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/safety",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#replaceOrCreate
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/safety/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#upsertWithWhere
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/safety/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#exists
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/safety/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#findById
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/safety/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#replaceById
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/safety/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#find
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/safety",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#findOne
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/safety/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#updateAll
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/safety/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#deleteById
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/safety/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#count
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/safety/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#prototype$updateAttributes
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/safety/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#createChangeStream
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/safety/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.safeties.findById() instead.
            "::findById::Apartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.safeties.destroyById() instead.
            "::destroyById::Apartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.safeties.updateById() instead.
            "::updateById::Apartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.safeties.link() instead.
            "::link::Apartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.safeties.unlink() instead.
            "::unlink::Apartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.safeties.exists() instead.
            "::exists::Apartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.safeties() instead.
            "::get::Apartment::safeties": {
              isArray: true,
              url: urlBase + "/apartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use Apartment.safeties.create() instead.
            "::create::Apartment::safeties": {
              url: urlBase + "/apartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use Apartment.safeties.createMany() instead.
            "::createMany::Apartment::safeties": {
              isArray: true,
              url: urlBase + "/apartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use Apartment.safeties.destroyAll() instead.
            "::delete::Apartment::safeties": {
              url: urlBase + "/apartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.safeties.count() instead.
            "::count::Apartment::safeties": {
              url: urlBase + "/apartments/:id/safeties/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.safeties.findById() instead.
            "::findById::CrawledApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.safeties.destroyById() instead.
            "::destroyById::CrawledApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.safeties.updateById() instead.
            "::updateById::CrawledApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.safeties.link() instead.
            "::link::CrawledApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.safeties.unlink() instead.
            "::unlink::CrawledApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.safeties.exists() instead.
            "::exists::CrawledApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.safeties() instead.
            "::get::CrawledApartment::safeties": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.safeties.create() instead.
            "::create::CrawledApartment::safeties": {
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.safeties.createMany() instead.
            "::createMany::CrawledApartment::safeties": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.safeties.destroyAll() instead.
            "::delete::CrawledApartment::safeties": {
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.safeties.count() instead.
            "::count::CrawledApartment::safeties": {
              url: urlBase + "/crawledApartments/:id/safeties/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.safeties.findById() instead.
            "::findById::SubmittedApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.safeties.destroyById() instead.
            "::destroyById::SubmittedApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.safeties.updateById() instead.
            "::updateById::SubmittedApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.safeties.link() instead.
            "::link::SubmittedApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.safeties.unlink() instead.
            "::unlink::SubmittedApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.safeties.exists() instead.
            "::exists::SubmittedApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.safeties() instead.
            "::get::SubmittedApartment::safeties": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.safeties.create() instead.
            "::create::SubmittedApartment::safeties": {
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.safeties.createMany() instead.
            "::createMany::SubmittedApartment::safeties": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.safeties.destroyAll() instead.
            "::delete::SubmittedApartment::safeties": {
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.safeties.count() instead.
            "::count::SubmittedApartment::safeties": {
              url: urlBase + "/submittedApartments/:id/safeties/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.findById() instead.
            "::findById::ProspectiveApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.destroyById() instead.
            "::destroyById::ProspectiveApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.updateById() instead.
            "::updateById::ProspectiveApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.link() instead.
            "::link::ProspectiveApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.unlink() instead.
            "::unlink::ProspectiveApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.exists() instead.
            "::exists::ProspectiveApartment::safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.safeties() instead.
            "::get::ProspectiveApartment::safeties": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.create() instead.
            "::create::ProspectiveApartment::safeties": {
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.createMany() instead.
            "::createMany::ProspectiveApartment::safeties": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.destroyAll() instead.
            "::delete::ProspectiveApartment::safeties": {
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.count() instead.
            "::count::ProspectiveApartment::safeties": {
              url: urlBase + "/prospectiveApartments/:id/safeties/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Safety#patchOrCreate
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#updateOrCreate
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#patchOrCreateWithWhere
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#update
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#destroyById
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#removeById
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Safety#patchAttributes
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Safety#modelName
        * @propertyOf housingApiServices.Safety
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Safety`.
        */
        R.modelName = "Safety";

    /**
     * @ngdoc object
     * @name housingApiServices.Safety.apartments
     * @header housingApiServices.Safety.apartments
     * @object
     * @description
     *
     * The object `Safety.apartments` groups methods
     * manipulating `Apartment` instances related to `Safety`.
     *
     * Call {@link housingApiServices.Safety#apartments Safety.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Safety#apartments
             * @methodOf housingApiServices.Safety
             *
             * @description
             *
             * Queries apartments of safety.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#count
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Counts apartments of safety.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#create
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#createMany
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#destroyAll
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#destroyById
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#exists
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#findById
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#link
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#unlink
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::Safety::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Safety.apartments#updateById
             * @methodOf housingApiServices.Safety.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - safety id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::Safety::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Utility
 * @header housingApiServices.Utility
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Utility` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Utility",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/utilities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Utility.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Utility.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Utility.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Utility.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Utility.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Utility.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/utilities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Utility.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/utilities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use Utility.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/utilities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use Utility.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/utilities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use Utility.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/utilities/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#create
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/utilities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#createMany
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/utilities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#upsert
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/utilities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#replaceOrCreate
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/utilities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#upsertWithWhere
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/utilities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#exists
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/utilities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#findById
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/utilities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#replaceById
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/utilities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#find
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/utilities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#findOne
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/utilities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#updateAll
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/utilities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#deleteById
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/utilities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#count
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/utilities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#prototype$updateAttributes
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/utilities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#createChangeStream
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/utilities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.utilities.findById() instead.
            "::findById::Apartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.utilities.destroyById() instead.
            "::destroyById::Apartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.utilities.updateById() instead.
            "::updateById::Apartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.utilities.link() instead.
            "::link::Apartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.utilities.unlink() instead.
            "::unlink::Apartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.utilities.exists() instead.
            "::exists::Apartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.utilities() instead.
            "::get::Apartment::utilities": {
              isArray: true,
              url: urlBase + "/apartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.utilities.create() instead.
            "::create::Apartment::utilities": {
              url: urlBase + "/apartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.utilities.createMany() instead.
            "::createMany::Apartment::utilities": {
              isArray: true,
              url: urlBase + "/apartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.utilities.destroyAll() instead.
            "::delete::Apartment::utilities": {
              url: urlBase + "/apartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.utilities.count() instead.
            "::count::Apartment::utilities": {
              url: urlBase + "/apartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.utilities.findById() instead.
            "::findById::CrawledApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.utilities.destroyById() instead.
            "::destroyById::CrawledApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.utilities.updateById() instead.
            "::updateById::CrawledApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.utilities.link() instead.
            "::link::CrawledApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.utilities.unlink() instead.
            "::unlink::CrawledApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.utilities.exists() instead.
            "::exists::CrawledApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.utilities() instead.
            "::get::CrawledApartment::utilities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.utilities.create() instead.
            "::create::CrawledApartment::utilities": {
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.utilities.createMany() instead.
            "::createMany::CrawledApartment::utilities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.utilities.destroyAll() instead.
            "::delete::CrawledApartment::utilities": {
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.utilities.count() instead.
            "::count::CrawledApartment::utilities": {
              url: urlBase + "/crawledApartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.utilities.findById() instead.
            "::findById::SubmittedApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.utilities.destroyById() instead.
            "::destroyById::SubmittedApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.utilities.updateById() instead.
            "::updateById::SubmittedApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.utilities.link() instead.
            "::link::SubmittedApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.utilities.unlink() instead.
            "::unlink::SubmittedApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.utilities.exists() instead.
            "::exists::SubmittedApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.utilities() instead.
            "::get::SubmittedApartment::utilities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.utilities.create() instead.
            "::create::SubmittedApartment::utilities": {
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.utilities.createMany() instead.
            "::createMany::SubmittedApartment::utilities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.utilities.destroyAll() instead.
            "::delete::SubmittedApartment::utilities": {
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.utilities.count() instead.
            "::count::SubmittedApartment::utilities": {
              url: urlBase + "/submittedApartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.findById() instead.
            "::findById::ProspectiveApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.destroyById() instead.
            "::destroyById::ProspectiveApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.updateById() instead.
            "::updateById::ProspectiveApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.link() instead.
            "::link::ProspectiveApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.unlink() instead.
            "::unlink::ProspectiveApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.exists() instead.
            "::exists::ProspectiveApartment::utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.utilities() instead.
            "::get::ProspectiveApartment::utilities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.create() instead.
            "::create::ProspectiveApartment::utilities": {
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.createMany() instead.
            "::createMany::ProspectiveApartment::utilities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.destroyAll() instead.
            "::delete::ProspectiveApartment::utilities": {
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.count() instead.
            "::count::ProspectiveApartment::utilities": {
              url: urlBase + "/prospectiveApartments/:id/utilities/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Utility#patchOrCreate
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#updateOrCreate
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#patchOrCreateWithWhere
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#update
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#destroyById
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#removeById
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Utility#patchAttributes
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Utility#modelName
        * @propertyOf housingApiServices.Utility
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Utility`.
        */
        R.modelName = "Utility";

    /**
     * @ngdoc object
     * @name housingApiServices.Utility.apartments
     * @header housingApiServices.Utility.apartments
     * @object
     * @description
     *
     * The object `Utility.apartments` groups methods
     * manipulating `Apartment` instances related to `Utility`.
     *
     * Call {@link housingApiServices.Utility#apartments Utility.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.Utility#apartments
             * @methodOf housingApiServices.Utility
             *
             * @description
             *
             * Queries apartments of utility.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#count
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Counts apartments of utility.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#create
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#createMany
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#destroyAll
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#destroyById
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#exists
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#findById
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#link
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#unlink
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::Utility::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.Utility.apartments#updateById
             * @methodOf housingApiServices.Utility.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - utility id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::Utility::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.FloorPlan
 * @header housingApiServices.FloorPlan
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FloorPlan` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FloorPlan",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/floorPlans/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FloorPlan.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/floorPlans/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.findById() instead.
            "prototype$__findById__floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyById() instead.
            "prototype$__destroyById__floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.updateById() instead.
            "prototype$__updateById__floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.link() instead.
            "prototype$__link__floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.unlink() instead.
            "prototype$__unlink__floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.exists() instead.
            "prototype$__exists__floorPlanApplicants": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.findById() instead.
            "prototype$__findById__wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.destroyById() instead.
            "prototype$__destroyById__wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.updateById() instead.
            "prototype$__updateById__wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.link() instead.
            "prototype$__link__wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.unlink() instead.
            "prototype$__unlink__wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.exists() instead.
            "prototype$__exists__wishFloorPlanUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants() instead.
            "prototype$__get__floorPlanApplicants": {
              isArray: true,
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.create() instead.
            "prototype$__create__floorPlanApplicants": {
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "POST",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.destroyAll() instead.
            "prototype$__delete__floorPlanApplicants": {
              url: urlBase + "/floorPlans/:id/floorPlanApplicants",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.floorPlanApplicants.count() instead.
            "prototype$__count__floorPlanApplicants": {
              url: urlBase + "/floorPlans/:id/floorPlanApplicants/count",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers() instead.
            "prototype$__get__wishFloorPlanUsers": {
              isArray: true,
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "GET",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.create() instead.
            "prototype$__create__wishFloorPlanUsers": {
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "POST",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.destroyAll() instead.
            "prototype$__delete__wishFloorPlanUsers": {
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers",
              method: "DELETE",
            },

            // INTERNAL. Use FloorPlan.wishFloorPlanUsers.count() instead.
            "prototype$__count__wishFloorPlanUsers": {
              url: urlBase + "/floorPlans/:id/wishFloorPlanUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#create
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/floorPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#createMany
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/floorPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#upsert
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/floorPlans",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#replaceOrCreate
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/floorPlans/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#upsertWithWhere
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/floorPlans/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#exists
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/floorPlans/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#findById
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/floorPlans/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#replaceById
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/floorPlans/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#find
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/floorPlans",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#findOne
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/floorPlans/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#updateAll
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/floorPlans/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#deleteById
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/floorPlans/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#count
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/floorPlans/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#prototype$updateAttributes
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/floorPlans/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#createChangeStream
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/floorPlans/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.applyFloorPlans.findById() instead.
            "::findById::User::applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.applyFloorPlans.destroyById() instead.
            "::destroyById::User::applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyFloorPlans.updateById() instead.
            "::updateById::User::applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.applyFloorPlans.link() instead.
            "::link::User::applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.applyFloorPlans.unlink() instead.
            "::unlink::User::applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyFloorPlans.exists() instead.
            "::exists::User::applyFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyFloorPlans/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.applyFloorPlans() instead.
            "::get::User::applyFloorPlans": {
              isArray: true,
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "GET",
            },

            // INTERNAL. Use User.applyFloorPlans.create() instead.
            "::create::User::applyFloorPlans": {
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "POST",
            },

            // INTERNAL. Use User.applyFloorPlans.createMany() instead.
            "::createMany::User::applyFloorPlans": {
              isArray: true,
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "POST",
            },

            // INTERNAL. Use User.applyFloorPlans.destroyAll() instead.
            "::delete::User::applyFloorPlans": {
              url: urlBase + "/users/:id/applyFloorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyFloorPlans.count() instead.
            "::count::User::applyFloorPlans": {
              url: urlBase + "/users/:id/applyFloorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use Apartment.floorPlans.findById() instead.
            "::findById::Apartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.floorPlans.destroyById() instead.
            "::destroyById::Apartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.floorPlans.updateById() instead.
            "::updateById::Apartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.floorPlans() instead.
            "::get::Apartment::floorPlans": {
              isArray: true,
              url: urlBase + "/apartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use Apartment.floorPlans.create() instead.
            "::create::Apartment::floorPlans": {
              url: urlBase + "/apartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use Apartment.floorPlans.createMany() instead.
            "::createMany::Apartment::floorPlans": {
              isArray: true,
              url: urlBase + "/apartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use Apartment.floorPlans.destroyAll() instead.
            "::delete::Apartment::floorPlans": {
              url: urlBase + "/apartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.floorPlans.count() instead.
            "::count::Apartment::floorPlans": {
              url: urlBase + "/apartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.findById() instead.
            "::findById::CrawledApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.destroyById() instead.
            "::destroyById::CrawledApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.updateById() instead.
            "::updateById::CrawledApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.floorPlans() instead.
            "::get::CrawledApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.create() instead.
            "::create::CrawledApartment::floorPlans": {
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.createMany() instead.
            "::createMany::CrawledApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.destroyAll() instead.
            "::delete::CrawledApartment::floorPlans": {
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.count() instead.
            "::count::CrawledApartment::floorPlans": {
              url: urlBase + "/crawledApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.floorPlans.findById() instead.
            "::findById::PendingApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.floorPlans.destroyById() instead.
            "::destroyById::PendingApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.floorPlans.updateById() instead.
            "::updateById::PendingApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.floorPlans() instead.
            "::get::PendingApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.floorPlans.create() instead.
            "::create::PendingApartment::floorPlans": {
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.floorPlans.createMany() instead.
            "::createMany::PendingApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.floorPlans.destroyAll() instead.
            "::delete::PendingApartment::floorPlans": {
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.floorPlans.count() instead.
            "::count::PendingApartment::floorPlans": {
              url: urlBase + "/pendingApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.findById() instead.
            "::findById::SubmittedApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.destroyById() instead.
            "::destroyById::SubmittedApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.updateById() instead.
            "::updateById::SubmittedApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans() instead.
            "::get::SubmittedApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.create() instead.
            "::create::SubmittedApartment::floorPlans": {
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.createMany() instead.
            "::createMany::SubmittedApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.destroyAll() instead.
            "::delete::SubmittedApartment::floorPlans": {
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.count() instead.
            "::count::SubmittedApartment::floorPlans": {
              url: urlBase + "/submittedApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.findById() instead.
            "::findById::ProspectiveApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.destroyById() instead.
            "::destroyById::ProspectiveApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.updateById() instead.
            "::updateById::ProspectiveApartment::floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans() instead.
            "::get::ProspectiveApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.create() instead.
            "::create::ProspectiveApartment::floorPlans": {
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.createMany() instead.
            "::createMany::ProspectiveApartment::floorPlans": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.destroyAll() instead.
            "::delete::ProspectiveApartment::floorPlans": {
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.count() instead.
            "::count::ProspectiveApartment::floorPlans": {
              url: urlBase + "/prospectiveApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.floorPlan() instead.
            "::get::ApplyForFloorPlan::floorPlan": {
              url: urlBase + "/applyForFloorPlans/:id/floorPlan",
              method: "GET",
            },

            // INTERNAL. Use WishList.floorPlan() instead.
            "::get::WishList::floorPlan": {
              url: urlBase + "/wishLists/:id/floorPlan",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#patchOrCreate
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#updateOrCreate
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#patchOrCreateWithWhere
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#update
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#destroyById
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#removeById
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#patchAttributes
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.FloorPlan#modelName
        * @propertyOf housingApiServices.FloorPlan
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FloorPlan`.
        */
        R.modelName = "FloorPlan";


            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#apartment
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::FloorPlan::apartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.FloorPlan.floorPlanApplicants
     * @header housingApiServices.FloorPlan.floorPlanApplicants
     * @object
     * @description
     *
     * The object `FloorPlan.floorPlanApplicants` groups methods
     * manipulating `User` instances related to `FloorPlan`.
     *
     * Call {@link housingApiServices.FloorPlan#floorPlanApplicants FloorPlan.floorPlanApplicants()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#floorPlanApplicants
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Queries floorPlanApplicants of floorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#count
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Counts floorPlanApplicants of floorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.floorPlanApplicants.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#create
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Creates a new instance in floorPlanApplicants of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#createMany
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Creates a new instance in floorPlanApplicants of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#destroyAll
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Deletes all floorPlanApplicants of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlanApplicants.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#destroyById
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Delete a related item by id for floorPlanApplicants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlanApplicants.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#exists
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Check the existence of floorPlanApplicants relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#findById
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Find a related item by id for floorPlanApplicants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#link
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Add a related item by id for floorPlanApplicants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#unlink
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Remove the floorPlanApplicants relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlanApplicants.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.floorPlanApplicants#updateById
             * @methodOf housingApiServices.FloorPlan.floorPlanApplicants
             *
             * @description
             *
             * Update a related item by id for floorPlanApplicants.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlanApplicants
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.floorPlanApplicants.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::FloorPlan::floorPlanApplicants"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.FloorPlan.wishFloorPlanUsers
     * @header housingApiServices.FloorPlan.wishFloorPlanUsers
     * @object
     * @description
     *
     * The object `FloorPlan.wishFloorPlanUsers` groups methods
     * manipulating `User` instances related to `FloorPlan`.
     *
     * Call {@link housingApiServices.FloorPlan#wishFloorPlanUsers FloorPlan.wishFloorPlanUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan#wishFloorPlanUsers
             * @methodOf housingApiServices.FloorPlan
             *
             * @description
             *
             * Queries wishFloorPlanUsers of floorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#count
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Counts wishFloorPlanUsers of floorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishFloorPlanUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#create
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Creates a new instance in wishFloorPlanUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#createMany
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Creates a new instance in wishFloorPlanUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#destroyAll
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Deletes all wishFloorPlanUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishFloorPlanUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#destroyById
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Delete a related item by id for wishFloorPlanUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for wishFloorPlanUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishFloorPlanUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#exists
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Check the existence of wishFloorPlanUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for wishFloorPlanUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#findById
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Find a related item by id for wishFloorPlanUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for wishFloorPlanUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#link
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Add a related item by id for wishFloorPlanUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for wishFloorPlanUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#unlink
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Remove the wishFloorPlanUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for wishFloorPlanUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishFloorPlanUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.FloorPlan.wishFloorPlanUsers#updateById
             * @methodOf housingApiServices.FloorPlan.wishFloorPlanUsers
             *
             * @description
             *
             * Update a related item by id for wishFloorPlanUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - floorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for wishFloorPlanUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishFloorPlanUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::FloorPlan::wishFloorPlanUsers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.ApartmentUniv
 * @header housingApiServices.ApartmentUniv
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ApartmentUniv` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ApartmentUniv",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/apartmentUnivs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ApartmentUniv.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/apartmentUnivs/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentUniv.university() instead.
            "prototype$__get__university": {
              url: urlBase + "/apartmentUnivs/:id/university",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#create
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/apartmentUnivs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#createMany
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/apartmentUnivs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#upsert
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/apartmentUnivs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#replaceOrCreate
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/apartmentUnivs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#upsertWithWhere
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/apartmentUnivs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#exists
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/apartmentUnivs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#findById
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/apartmentUnivs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#replaceById
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/apartmentUnivs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#find
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/apartmentUnivs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#findOne
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/apartmentUnivs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#updateAll
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/apartmentUnivs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#deleteById
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/apartmentUnivs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#count
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/apartmentUnivs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#prototype$updateAttributes
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentUniv id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/apartmentUnivs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#createChangeStream
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/apartmentUnivs/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2Campus.findById() instead.
            "::findById::Apartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2Campus.destroyById() instead.
            "::destroyById::Apartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2Campus.updateById() instead.
            "::updateById::Apartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.distance2Campus() instead.
            "::get::Apartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2Campus.create() instead.
            "::create::Apartment::distance2Campus": {
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2Campus.createMany() instead.
            "::createMany::Apartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2Campus.destroyAll() instead.
            "::delete::Apartment::distance2Campus": {
              url: urlBase + "/apartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2Campus.count() instead.
            "::count::Apartment::distance2Campus": {
              url: urlBase + "/apartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.findById() instead.
            "::findById::CrawledApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.destroyById() instead.
            "::destroyById::CrawledApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.updateById() instead.
            "::updateById::CrawledApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus() instead.
            "::get::CrawledApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.create() instead.
            "::create::CrawledApartment::distance2Campus": {
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.createMany() instead.
            "::createMany::CrawledApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.destroyAll() instead.
            "::delete::CrawledApartment::distance2Campus": {
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.count() instead.
            "::count::CrawledApartment::distance2Campus": {
              url: urlBase + "/crawledApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.findById() instead.
            "::findById::PendingApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.destroyById() instead.
            "::destroyById::PendingApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.updateById() instead.
            "::updateById::PendingApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.distance2Campus() instead.
            "::get::PendingApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.create() instead.
            "::create::PendingApartment::distance2Campus": {
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.createMany() instead.
            "::createMany::PendingApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.destroyAll() instead.
            "::delete::PendingApartment::distance2Campus": {
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.count() instead.
            "::count::PendingApartment::distance2Campus": {
              url: urlBase + "/pendingApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.findById() instead.
            "::findById::SubmittedApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.destroyById() instead.
            "::destroyById::SubmittedApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.updateById() instead.
            "::updateById::SubmittedApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus() instead.
            "::get::SubmittedApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.create() instead.
            "::create::SubmittedApartment::distance2Campus": {
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.createMany() instead.
            "::createMany::SubmittedApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.destroyAll() instead.
            "::delete::SubmittedApartment::distance2Campus": {
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.count() instead.
            "::count::SubmittedApartment::distance2Campus": {
              url: urlBase + "/submittedApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.findById() instead.
            "::findById::ProspectiveApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.destroyById() instead.
            "::destroyById::ProspectiveApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.updateById() instead.
            "::updateById::ProspectiveApartment::distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus() instead.
            "::get::ProspectiveApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.create() instead.
            "::create::ProspectiveApartment::distance2Campus": {
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.createMany() instead.
            "::createMany::ProspectiveApartment::distance2Campus": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.destroyAll() instead.
            "::delete::ProspectiveApartment::distance2Campus": {
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.count() instead.
            "::count::ProspectiveApartment::distance2Campus": {
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#patchOrCreate
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#updateOrCreate
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#patchOrCreateWithWhere
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#update
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#destroyById
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#removeById
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#patchAttributes
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentUniv id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.ApartmentUniv#modelName
        * @propertyOf housingApiServices.ApartmentUniv
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ApartmentUniv`.
        */
        R.modelName = "ApartmentUniv";


            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#apartment
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentUniv id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::ApartmentUniv::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentUniv#university
             * @methodOf housingApiServices.ApartmentUniv
             *
             * @description
             *
             * Fetches belongsTo relation university.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentUniv id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.university = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::ApartmentUniv::university"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.ApartmentCity
 * @header housingApiServices.ApartmentCity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ApartmentCity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ApartmentCity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/apartmentCities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ApartmentCity.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/apartmentCities/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentCity.city() instead.
            "prototype$__get__city": {
              url: urlBase + "/apartmentCities/:id/city",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#create
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/apartmentCities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#createMany
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/apartmentCities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#upsert
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/apartmentCities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#replaceOrCreate
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/apartmentCities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#upsertWithWhere
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/apartmentCities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#exists
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/apartmentCities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#findById
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/apartmentCities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#replaceById
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/apartmentCities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#find
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/apartmentCities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#findOne
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/apartmentCities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#updateAll
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/apartmentCities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#deleteById
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/apartmentCities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#count
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/apartmentCities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#prototype$updateAttributes
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentCity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/apartmentCities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#createChangeStream
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/apartmentCities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2City.findById() instead.
            "::findById::Apartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2City.destroyById() instead.
            "::destroyById::Apartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2City.updateById() instead.
            "::updateById::Apartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.distance2City() instead.
            "::get::Apartment::distance2City": {
              isArray: true,
              url: urlBase + "/apartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use Apartment.distance2City.create() instead.
            "::create::Apartment::distance2City": {
              url: urlBase + "/apartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2City.createMany() instead.
            "::createMany::Apartment::distance2City": {
              isArray: true,
              url: urlBase + "/apartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use Apartment.distance2City.destroyAll() instead.
            "::delete::Apartment::distance2City": {
              url: urlBase + "/apartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.distance2City.count() instead.
            "::count::Apartment::distance2City": {
              url: urlBase + "/apartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2City.findById() instead.
            "::findById::CrawledApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2City.destroyById() instead.
            "::destroyById::CrawledApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2City.updateById() instead.
            "::updateById::CrawledApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.distance2City() instead.
            "::get::CrawledApartment::distance2City": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2City.create() instead.
            "::create::CrawledApartment::distance2City": {
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.distance2City.createMany() instead.
            "::createMany::CrawledApartment::distance2City": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.distance2City.destroyAll() instead.
            "::delete::CrawledApartment::distance2City": {
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2City.count() instead.
            "::count::CrawledApartment::distance2City": {
              url: urlBase + "/crawledApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2City.findById() instead.
            "::findById::PendingApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2City.destroyById() instead.
            "::destroyById::PendingApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2City.updateById() instead.
            "::updateById::PendingApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.distance2City() instead.
            "::get::PendingApartment::distance2City": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2City.create() instead.
            "::create::PendingApartment::distance2City": {
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.distance2City.createMany() instead.
            "::createMany::PendingApartment::distance2City": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.distance2City.destroyAll() instead.
            "::delete::PendingApartment::distance2City": {
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2City.count() instead.
            "::count::PendingApartment::distance2City": {
              url: urlBase + "/pendingApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.findById() instead.
            "::findById::SubmittedApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.destroyById() instead.
            "::destroyById::SubmittedApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.updateById() instead.
            "::updateById::SubmittedApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.distance2City() instead.
            "::get::SubmittedApartment::distance2City": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.create() instead.
            "::create::SubmittedApartment::distance2City": {
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.createMany() instead.
            "::createMany::SubmittedApartment::distance2City": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.destroyAll() instead.
            "::delete::SubmittedApartment::distance2City": {
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.count() instead.
            "::count::SubmittedApartment::distance2City": {
              url: urlBase + "/submittedApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.findById() instead.
            "::findById::ProspectiveApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.destroyById() instead.
            "::destroyById::ProspectiveApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.updateById() instead.
            "::updateById::ProspectiveApartment::distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City() instead.
            "::get::ProspectiveApartment::distance2City": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.create() instead.
            "::create::ProspectiveApartment::distance2City": {
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.createMany() instead.
            "::createMany::ProspectiveApartment::distance2City": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.destroyAll() instead.
            "::delete::ProspectiveApartment::distance2City": {
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.count() instead.
            "::count::ProspectiveApartment::distance2City": {
              url: urlBase + "/prospectiveApartments/:id/distance2City/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#patchOrCreate
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#updateOrCreate
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#patchOrCreateWithWhere
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#update
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#destroyById
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#removeById
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#patchAttributes
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentCity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.ApartmentCity#modelName
        * @propertyOf housingApiServices.ApartmentCity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ApartmentCity`.
        */
        R.modelName = "ApartmentCity";


            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#apartment
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentCity id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::ApartmentCity::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentCity#city
             * @methodOf housingApiServices.ApartmentCity
             *
             * @description
             *
             * Fetches belongsTo relation city.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentCity id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.city = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::get::ApartmentCity::city"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.ApartmentSimilarListing
 * @header housingApiServices.ApartmentSimilarListing
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ApartmentSimilarListing` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ApartmentSimilarListing",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/apartmentSimilarListings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ApartmentSimilarListing.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/apartmentSimilarListings/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use ApartmentSimilarListing.similarListing() instead.
            "prototype$__get__similarListing": {
              url: urlBase + "/apartmentSimilarListings/:id/similarListing",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#create
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/apartmentSimilarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#createMany
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/apartmentSimilarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#upsert
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/apartmentSimilarListings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#replaceOrCreate
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/apartmentSimilarListings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#upsertWithWhere
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/apartmentSimilarListings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#exists
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/apartmentSimilarListings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#findById
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/apartmentSimilarListings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#replaceById
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/apartmentSimilarListings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#find
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/apartmentSimilarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#findOne
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/apartmentSimilarListings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#updateAll
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/apartmentSimilarListings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#deleteById
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/apartmentSimilarListings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#count
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/apartmentSimilarListings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#prototype$updateAttributes
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentSimilarListing id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/apartmentSimilarListings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#createChangeStream
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/apartmentSimilarListings/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#patchOrCreate
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#updateOrCreate
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#patchOrCreateWithWhere
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#update
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#destroyById
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#removeById
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#patchAttributes
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentSimilarListing id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentSimilarListing` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.ApartmentSimilarListing#modelName
        * @propertyOf housingApiServices.ApartmentSimilarListing
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ApartmentSimilarListing`.
        */
        R.modelName = "ApartmentSimilarListing";


            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#apartment
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentSimilarListing id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::ApartmentSimilarListing::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApartmentSimilarListing#similarListing
             * @methodOf housingApiServices.ApartmentSimilarListing
             *
             * @description
             *
             * Fetches belongsTo relation similarListing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - apartmentSimilarListing id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.similarListing = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::ApartmentSimilarListing::similarListing"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.VisitApartment
 * @header housingApiServices.VisitApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `VisitApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "VisitApartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/visitApartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use VisitApartment.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/visitApartments/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use VisitApartment.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/visitApartments/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#create
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/visitApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#createMany
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/visitApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#upsert
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/visitApartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#replaceOrCreate
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/visitApartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#upsertWithWhere
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/visitApartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#exists
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/visitApartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#findById
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/visitApartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#replaceById
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/visitApartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#find
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/visitApartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#findOne
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/visitApartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#updateAll
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/visitApartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#deleteById
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/visitApartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#count
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/visitApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#prototype$updateAttributes
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - visitApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/visitApartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#createChangeStream
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/visitApartments/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#patchOrCreate
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#updateOrCreate
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#update
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#destroyById
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#removeById
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#patchAttributes
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - visitApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `VisitApartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.VisitApartment#modelName
        * @propertyOf housingApiServices.VisitApartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `VisitApartment`.
        */
        R.modelName = "VisitApartment";


            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#apartment
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - visitApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::VisitApartment::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.VisitApartment#user
             * @methodOf housingApiServices.VisitApartment
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - visitApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::VisitApartment::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.RedirectApartment
 * @header housingApiServices.RedirectApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RedirectApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RedirectApartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/redirectApartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RedirectApartment.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/redirectApartments/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use RedirectApartment.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/redirectApartments/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#create
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/redirectApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#createMany
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/redirectApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#upsert
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/redirectApartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#replaceOrCreate
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/redirectApartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#upsertWithWhere
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/redirectApartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#exists
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/redirectApartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#findById
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/redirectApartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#replaceById
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/redirectApartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#find
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/redirectApartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#findOne
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/redirectApartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#updateAll
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/redirectApartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#deleteById
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/redirectApartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#count
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/redirectApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#prototype$updateAttributes
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - redirectApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/redirectApartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#createChangeStream
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/redirectApartments/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#patchOrCreate
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#updateOrCreate
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#update
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#destroyById
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#removeById
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#patchAttributes
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - redirectApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RedirectApartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.RedirectApartment#modelName
        * @propertyOf housingApiServices.RedirectApartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RedirectApartment`.
        */
        R.modelName = "RedirectApartment";


            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#apartment
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - redirectApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::RedirectApartment::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.RedirectApartment#user
             * @methodOf housingApiServices.RedirectApartment
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - redirectApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::RedirectApartment::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.EmailTemplate
 * @header housingApiServices.EmailTemplate
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EmailTemplate` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EmailTemplate",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/emailTemplates/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#create
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/emailTemplates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#createMany
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/emailTemplates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#upsert
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/emailTemplates",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#replaceOrCreate
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/emailTemplates/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#upsertWithWhere
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/emailTemplates/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#exists
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/emailTemplates/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#findById
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/emailTemplates/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#replaceById
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/emailTemplates/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#find
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/emailTemplates",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#findOne
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/emailTemplates/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#updateAll
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/emailTemplates/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#deleteById
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/emailTemplates/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#count
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/emailTemplates/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#prototype$updateAttributes
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - emailTemplate id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/emailTemplates/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#createChangeStream
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/emailTemplates/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#patchOrCreate
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#updateOrCreate
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#patchOrCreateWithWhere
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#update
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#destroyById
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#removeById
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.EmailTemplate#patchAttributes
             * @methodOf housingApiServices.EmailTemplate
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - emailTemplate id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmailTemplate` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.EmailTemplate#modelName
        * @propertyOf housingApiServices.EmailTemplate
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EmailTemplate`.
        */
        R.modelName = "EmailTemplate";



        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.University
 * @header housingApiServices.University
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `University` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "University",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/universities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use University.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use University.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use University.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use University.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use University.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use University.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/universities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use University.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/universities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use University.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/universities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use University.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/universities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use University.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/universities/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#create
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/universities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#createMany
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/universities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#upsert
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/universities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#replaceOrCreate
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/universities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#upsertWithWhere
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/universities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#exists
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/universities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#findById
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/universities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#replaceById
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/universities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#find
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/universities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#findOne
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/universities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#updateAll
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/universities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#deleteById
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/universities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#count
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/universities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#prototype$updateAttributes
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/universities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.University#createChangeStream
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/universities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.universities.findById() instead.
            "::findById::Apartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.universities.destroyById() instead.
            "::destroyById::Apartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.universities.updateById() instead.
            "::updateById::Apartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.universities.link() instead.
            "::link::Apartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.universities.unlink() instead.
            "::unlink::Apartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.universities.exists() instead.
            "::exists::Apartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.universities() instead.
            "::get::Apartment::universities": {
              isArray: true,
              url: urlBase + "/apartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.universities.create() instead.
            "::create::Apartment::universities": {
              url: urlBase + "/apartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.universities.createMany() instead.
            "::createMany::Apartment::universities": {
              isArray: true,
              url: urlBase + "/apartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.universities.destroyAll() instead.
            "::delete::Apartment::universities": {
              url: urlBase + "/apartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.universities.count() instead.
            "::count::Apartment::universities": {
              url: urlBase + "/apartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use ApartmentUniv.university() instead.
            "::get::ApartmentUniv::university": {
              url: urlBase + "/apartmentUnivs/:id/university",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.universities.findById() instead.
            "::findById::CrawledApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.universities.destroyById() instead.
            "::destroyById::CrawledApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.universities.updateById() instead.
            "::updateById::CrawledApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.universities.link() instead.
            "::link::CrawledApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.universities.unlink() instead.
            "::unlink::CrawledApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.universities.exists() instead.
            "::exists::CrawledApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.universities() instead.
            "::get::CrawledApartment::universities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.universities.create() instead.
            "::create::CrawledApartment::universities": {
              url: urlBase + "/crawledApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.universities.createMany() instead.
            "::createMany::CrawledApartment::universities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.universities.destroyAll() instead.
            "::delete::CrawledApartment::universities": {
              url: urlBase + "/crawledApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.universities.count() instead.
            "::count::CrawledApartment::universities": {
              url: urlBase + "/crawledApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.universities.findById() instead.
            "::findById::PendingApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.universities.destroyById() instead.
            "::destroyById::PendingApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.universities.updateById() instead.
            "::updateById::PendingApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.universities.link() instead.
            "::link::PendingApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.universities.unlink() instead.
            "::unlink::PendingApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.universities.exists() instead.
            "::exists::PendingApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.universities() instead.
            "::get::PendingApartment::universities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.universities.create() instead.
            "::create::PendingApartment::universities": {
              url: urlBase + "/pendingApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.universities.createMany() instead.
            "::createMany::PendingApartment::universities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.universities.destroyAll() instead.
            "::delete::PendingApartment::universities": {
              url: urlBase + "/pendingApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.universities.count() instead.
            "::count::PendingApartment::universities": {
              url: urlBase + "/pendingApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.universities.findById() instead.
            "::findById::SubmittedApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.universities.destroyById() instead.
            "::destroyById::SubmittedApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.universities.updateById() instead.
            "::updateById::SubmittedApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.universities.link() instead.
            "::link::SubmittedApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.universities.unlink() instead.
            "::unlink::SubmittedApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.universities.exists() instead.
            "::exists::SubmittedApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.universities() instead.
            "::get::SubmittedApartment::universities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.universities.create() instead.
            "::create::SubmittedApartment::universities": {
              url: urlBase + "/submittedApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.universities.createMany() instead.
            "::createMany::SubmittedApartment::universities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.universities.destroyAll() instead.
            "::delete::SubmittedApartment::universities": {
              url: urlBase + "/submittedApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.universities.count() instead.
            "::count::SubmittedApartment::universities": {
              url: urlBase + "/submittedApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.universities.findById() instead.
            "::findById::ProspectiveApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.universities.destroyById() instead.
            "::destroyById::ProspectiveApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.universities.updateById() instead.
            "::updateById::ProspectiveApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.universities.link() instead.
            "::link::ProspectiveApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.universities.unlink() instead.
            "::unlink::ProspectiveApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.universities.exists() instead.
            "::exists::ProspectiveApartment::universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.universities() instead.
            "::get::ProspectiveApartment::universities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.universities.create() instead.
            "::create::ProspectiveApartment::universities": {
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.universities.createMany() instead.
            "::createMany::ProspectiveApartment::universities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.universities.destroyAll() instead.
            "::delete::ProspectiveApartment::universities": {
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.universities.count() instead.
            "::count::ProspectiveApartment::universities": {
              url: urlBase + "/prospectiveApartments/:id/universities/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.University#patchOrCreate
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.University#updateOrCreate
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.University#patchOrCreateWithWhere
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.University#update
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.University#destroyById
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.University#removeById
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.University#patchAttributes
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.University#modelName
        * @propertyOf housingApiServices.University
        * @description
        * The name of the model represented by this $resource,
        * i.e. `University`.
        */
        R.modelName = "University";

    /**
     * @ngdoc object
     * @name housingApiServices.University.apartments
     * @header housingApiServices.University.apartments
     * @object
     * @description
     *
     * The object `University.apartments` groups methods
     * manipulating `Apartment` instances related to `University`.
     *
     * Call {@link housingApiServices.University#apartments University.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.University#apartments
             * @methodOf housingApiServices.University
             *
             * @description
             *
             * Queries apartments of university.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#count
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Counts apartments of university.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#create
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#createMany
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#destroyAll
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#destroyById
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#exists
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#findById
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#link
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#unlink
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::University::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.University.apartments#updateById
             * @methodOf housingApiServices.University.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - university id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::University::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.City
 * @header housingApiServices.City
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `City` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "City",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/cities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use City.apartments.findById() instead.
            "prototype$__findById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use City.apartments.destroyById() instead.
            "prototype$__destroyById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use City.apartments.updateById() instead.
            "prototype$__updateById__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use City.apartments.link() instead.
            "prototype$__link__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use City.apartments.unlink() instead.
            "prototype$__unlink__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use City.apartments.exists() instead.
            "prototype$__exists__apartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/cities/:id/apartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use City.apartments() instead.
            "prototype$__get__apartments": {
              isArray: true,
              url: urlBase + "/cities/:id/apartments",
              method: "GET",
            },

            // INTERNAL. Use City.apartments.create() instead.
            "prototype$__create__apartments": {
              url: urlBase + "/cities/:id/apartments",
              method: "POST",
            },

            // INTERNAL. Use City.apartments.destroyAll() instead.
            "prototype$__delete__apartments": {
              url: urlBase + "/cities/:id/apartments",
              method: "DELETE",
            },

            // INTERNAL. Use City.apartments.count() instead.
            "prototype$__count__apartments": {
              url: urlBase + "/cities/:id/apartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#create
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/cities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#createMany
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/cities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#upsert
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/cities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#replaceOrCreate
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/cities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#upsertWithWhere
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/cities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#exists
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/cities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#findById
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/cities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#replaceById
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/cities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#find
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#findOne
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/cities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#updateAll
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/cities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#deleteById
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/cities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#count
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/cities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#prototype$updateAttributes
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/cities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.City#createChangeStream
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/cities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Apartment.cities.findById() instead.
            "::findById::Apartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Apartment.cities.destroyById() instead.
            "::destroyById::Apartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.cities.updateById() instead.
            "::updateById::Apartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.cities.link() instead.
            "::link::Apartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Apartment.cities.unlink() instead.
            "::unlink::Apartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.cities.exists() instead.
            "::exists::Apartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/apartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Apartment.cities() instead.
            "::get::Apartment::cities": {
              isArray: true,
              url: urlBase + "/apartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use Apartment.cities.create() instead.
            "::create::Apartment::cities": {
              url: urlBase + "/apartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.cities.createMany() instead.
            "::createMany::Apartment::cities": {
              isArray: true,
              url: urlBase + "/apartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use Apartment.cities.destroyAll() instead.
            "::delete::Apartment::cities": {
              url: urlBase + "/apartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use Apartment.cities.count() instead.
            "::count::Apartment::cities": {
              url: urlBase + "/apartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use ApartmentCity.city() instead.
            "::get::ApartmentCity::city": {
              url: urlBase + "/apartmentCities/:id/city",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.cities.findById() instead.
            "::findById::CrawledApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.cities.destroyById() instead.
            "::destroyById::CrawledApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.cities.updateById() instead.
            "::updateById::CrawledApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.cities.link() instead.
            "::link::CrawledApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.cities.unlink() instead.
            "::unlink::CrawledApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.cities.exists() instead.
            "::exists::CrawledApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.cities() instead.
            "::get::CrawledApartment::cities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.cities.create() instead.
            "::create::CrawledApartment::cities": {
              url: urlBase + "/crawledApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.cities.createMany() instead.
            "::createMany::CrawledApartment::cities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.cities.destroyAll() instead.
            "::delete::CrawledApartment::cities": {
              url: urlBase + "/crawledApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.cities.count() instead.
            "::count::CrawledApartment::cities": {
              url: urlBase + "/crawledApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.cities.findById() instead.
            "::findById::PendingApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.cities.destroyById() instead.
            "::destroyById::PendingApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.cities.updateById() instead.
            "::updateById::PendingApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.cities.link() instead.
            "::link::PendingApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.cities.unlink() instead.
            "::unlink::PendingApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.cities.exists() instead.
            "::exists::PendingApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.cities() instead.
            "::get::PendingApartment::cities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.cities.create() instead.
            "::create::PendingApartment::cities": {
              url: urlBase + "/pendingApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.cities.createMany() instead.
            "::createMany::PendingApartment::cities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.cities.destroyAll() instead.
            "::delete::PendingApartment::cities": {
              url: urlBase + "/pendingApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.cities.count() instead.
            "::count::PendingApartment::cities": {
              url: urlBase + "/pendingApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.cities.findById() instead.
            "::findById::SubmittedApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.cities.destroyById() instead.
            "::destroyById::SubmittedApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.cities.updateById() instead.
            "::updateById::SubmittedApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.cities.link() instead.
            "::link::SubmittedApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.cities.unlink() instead.
            "::unlink::SubmittedApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.cities.exists() instead.
            "::exists::SubmittedApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.cities() instead.
            "::get::SubmittedApartment::cities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.cities.create() instead.
            "::create::SubmittedApartment::cities": {
              url: urlBase + "/submittedApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.cities.createMany() instead.
            "::createMany::SubmittedApartment::cities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.cities.destroyAll() instead.
            "::delete::SubmittedApartment::cities": {
              url: urlBase + "/submittedApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.cities.count() instead.
            "::count::SubmittedApartment::cities": {
              url: urlBase + "/submittedApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.cities.findById() instead.
            "::findById::ProspectiveApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.cities.destroyById() instead.
            "::destroyById::ProspectiveApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.cities.updateById() instead.
            "::updateById::ProspectiveApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.cities.link() instead.
            "::link::ProspectiveApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.cities.unlink() instead.
            "::unlink::ProspectiveApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.cities.exists() instead.
            "::exists::ProspectiveApartment::cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.cities() instead.
            "::get::ProspectiveApartment::cities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.cities.create() instead.
            "::create::ProspectiveApartment::cities": {
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.cities.createMany() instead.
            "::createMany::ProspectiveApartment::cities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.cities.destroyAll() instead.
            "::delete::ProspectiveApartment::cities": {
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.cities.count() instead.
            "::count::ProspectiveApartment::cities": {
              url: urlBase + "/prospectiveApartments/:id/cities/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.City#patchOrCreate
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.City#updateOrCreate
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.City#patchOrCreateWithWhere
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.City#update
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.City#destroyById
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.City#removeById
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.City#patchAttributes
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.City#modelName
        * @propertyOf housingApiServices.City
        * @description
        * The name of the model represented by this $resource,
        * i.e. `City`.
        */
        R.modelName = "City";

    /**
     * @ngdoc object
     * @name housingApiServices.City.apartments
     * @header housingApiServices.City.apartments
     * @object
     * @description
     *
     * The object `City.apartments` groups methods
     * manipulating `Apartment` instances related to `City`.
     *
     * Call {@link housingApiServices.City#apartments City.apartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.City#apartments
             * @methodOf housingApiServices.City
             *
             * @description
             *
             * Queries apartments of city.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#count
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Counts apartments of city.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.apartments.count = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::count::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#create
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.create = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::create::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#createMany
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Creates a new instance in apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.createMany = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::createMany::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#destroyAll
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Deletes all apartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyAll = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::delete::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#destroyById
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Delete a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.destroyById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::destroyById::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#exists
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Check the existence of apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.exists = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::exists::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#findById
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Find a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.findById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::findById::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#link
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Add a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.link = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::link::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#unlink
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Remove the apartments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.apartments.unlink = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::unlink::City::apartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.City.apartments#updateById
             * @methodOf housingApiServices.City.apartments
             *
             * @description
             *
             * Update a related item by id for apartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - city id
             *
             *  - `fk` – `{*}` - Foreign key for apartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartments.updateById = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::updateById::City::apartments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.CrawledApartment
 * @header housingApiServices.CrawledApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CrawledApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CrawledApartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/crawledApartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use CrawledApartment.distance2City.findById() instead.
            "prototype$__findById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2City.destroyById() instead.
            "prototype$__destroyById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2City.updateById() instead.
            "prototype$__updateById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.findById() instead.
            "prototype$__findById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.destroyById() instead.
            "prototype$__destroyById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.updateById() instead.
            "prototype$__updateById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.cities.findById() instead.
            "prototype$__findById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.cities.destroyById() instead.
            "prototype$__destroyById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.cities.updateById() instead.
            "prototype$__updateById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.cities.link() instead.
            "prototype$__link__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.cities.unlink() instead.
            "prototype$__unlink__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.cities.exists() instead.
            "prototype$__exists__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.features.findById() instead.
            "prototype$__findById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.features.destroyById() instead.
            "prototype$__destroyById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.features.updateById() instead.
            "prototype$__updateById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.features.link() instead.
            "prototype$__link__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.features.unlink() instead.
            "prototype$__unlink__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.features.exists() instead.
            "prototype$__exists__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.amenities.findById() instead.
            "prototype$__findById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.amenities.destroyById() instead.
            "prototype$__destroyById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.amenities.updateById() instead.
            "prototype$__updateById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.amenities.link() instead.
            "prototype$__link__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.amenities.unlink() instead.
            "prototype$__unlink__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.amenities.exists() instead.
            "prototype$__exists__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.utilities.findById() instead.
            "prototype$__findById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.utilities.destroyById() instead.
            "prototype$__destroyById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.utilities.updateById() instead.
            "prototype$__updateById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.utilities.link() instead.
            "prototype$__link__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.utilities.unlink() instead.
            "prototype$__unlink__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.utilities.exists() instead.
            "prototype$__exists__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.safeties.findById() instead.
            "prototype$__findById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.safeties.destroyById() instead.
            "prototype$__destroyById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.safeties.updateById() instead.
            "prototype$__updateById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.safeties.link() instead.
            "prototype$__link__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.safeties.unlink() instead.
            "prototype$__unlink__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.safeties.exists() instead.
            "prototype$__exists__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__findById__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Find a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$__findById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/similarListings/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__destroyById__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Delete a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/similarListings/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__updateById__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Update a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$__updateById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/similarListings/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__link__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Add a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$__link__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/similarListings/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__unlink__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Remove the similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/similarListings/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__exists__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Check the existence of similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$__exists__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/similarListings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.findById() instead.
            "prototype$__findById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.destroyById() instead.
            "prototype$__destroyById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.updateById() instead.
            "prototype$__updateById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.findById() instead.
            "prototype$__findById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.destroyById() instead.
            "prototype$__destroyById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.updateById() instead.
            "prototype$__updateById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.link() instead.
            "prototype$__link__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.unlink() instead.
            "prototype$__unlink__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.exists() instead.
            "prototype$__exists__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.findById() instead.
            "prototype$__findById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.destroyById() instead.
            "prototype$__destroyById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.updateById() instead.
            "prototype$__updateById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.link() instead.
            "prototype$__link__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.unlink() instead.
            "prototype$__unlink__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.exists() instead.
            "prototype$__exists__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.findById() instead.
            "prototype$__findById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.destroyById() instead.
            "prototype$__destroyById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.updateById() instead.
            "prototype$__updateById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.link() instead.
            "prototype$__link__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.unlink() instead.
            "prototype$__unlink__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.exists() instead.
            "prototype$__exists__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.findById() instead.
            "prototype$__findById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.destroyById() instead.
            "prototype$__destroyById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.updateById() instead.
            "prototype$__updateById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.link() instead.
            "prototype$__link__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.unlink() instead.
            "prototype$__unlink__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.exists() instead.
            "prototype$__exists__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.tags.findById() instead.
            "prototype$__findById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.tags.destroyById() instead.
            "prototype$__destroyById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.tags.updateById() instead.
            "prototype$__updateById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.tags.link() instead.
            "prototype$__link__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.tags.unlink() instead.
            "prototype$__unlink__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.tags.exists() instead.
            "prototype$__exists__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.universities.findById() instead.
            "prototype$__findById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.universities.destroyById() instead.
            "prototype$__destroyById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.universities.updateById() instead.
            "prototype$__updateById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.universities.link() instead.
            "prototype$__link__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.universities.unlink() instead.
            "prototype$__unlink__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.universities.exists() instead.
            "prototype$__exists__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.submittedApartment() instead.
            "prototype$__get__submittedApartment": {
              url: urlBase + "/crawledApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.findById() instead.
            "prototype$__findById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.destroyById() instead.
            "prototype$__destroyById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.updateById() instead.
            "prototype$__updateById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.link() instead.
            "prototype$__link__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.unlink() instead.
            "prototype$__unlink__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.exists() instead.
            "prototype$__exists__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.findById() instead.
            "prototype$__findById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.destroyById() instead.
            "prototype$__destroyById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.updateById() instead.
            "prototype$__updateById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.link() instead.
            "prototype$__link__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.unlink() instead.
            "prototype$__unlink__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.exists() instead.
            "prototype$__exists__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrawledApartment.distance2City() instead.
            "prototype$__get__distance2City": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2City.create() instead.
            "prototype$__create__distance2City": {
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.distance2City.destroyAll() instead.
            "prototype$__delete__distance2City": {
              url: urlBase + "/crawledApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2City.count() instead.
            "prototype$__count__distance2City": {
              url: urlBase + "/crawledApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus() instead.
            "prototype$__get__distance2Campus": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.create() instead.
            "prototype$__create__distance2Campus": {
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.destroyAll() instead.
            "prototype$__delete__distance2Campus": {
              url: urlBase + "/crawledApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.distance2Campus.count() instead.
            "prototype$__count__distance2Campus": {
              url: urlBase + "/crawledApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.cities() instead.
            "prototype$__get__cities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.cities.create() instead.
            "prototype$__create__cities": {
              url: urlBase + "/crawledApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.cities.destroyAll() instead.
            "prototype$__delete__cities": {
              url: urlBase + "/crawledApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.cities.count() instead.
            "prototype$__count__cities": {
              url: urlBase + "/crawledApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.features() instead.
            "prototype$__get__features": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.features.create() instead.
            "prototype$__create__features": {
              url: urlBase + "/crawledApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.features.destroyAll() instead.
            "prototype$__delete__features": {
              url: urlBase + "/crawledApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.features.count() instead.
            "prototype$__count__features": {
              url: urlBase + "/crawledApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.amenities() instead.
            "prototype$__get__amenities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.amenities.create() instead.
            "prototype$__create__amenities": {
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.amenities.destroyAll() instead.
            "prototype$__delete__amenities": {
              url: urlBase + "/crawledApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.amenities.count() instead.
            "prototype$__count__amenities": {
              url: urlBase + "/crawledApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.utilities() instead.
            "prototype$__get__utilities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.utilities.create() instead.
            "prototype$__create__utilities": {
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.utilities.destroyAll() instead.
            "prototype$__delete__utilities": {
              url: urlBase + "/crawledApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.utilities.count() instead.
            "prototype$__count__utilities": {
              url: urlBase + "/crawledApartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.safeties() instead.
            "prototype$__get__safeties": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.safeties.create() instead.
            "prototype$__create__safeties": {
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.safeties.destroyAll() instead.
            "prototype$__delete__safeties": {
              url: urlBase + "/crawledApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.safeties.count() instead.
            "prototype$__count__safeties": {
              url: urlBase + "/crawledApartments/:id/safeties/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__get__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries similarListings of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$__get__similarListings": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/similarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__create__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Creates a new instance in similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$__create__similarListings": {
              url: urlBase + "/crawledApartments/:id/similarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__delete__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Deletes all similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__similarListings": {
              url: urlBase + "/crawledApartments/:id/similarListings",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$__count__similarListings
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Counts similarListings of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__similarListings": {
              url: urlBase + "/crawledApartments/:id/similarListings/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.floorPlans() instead.
            "prototype$__get__floorPlans": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.create() instead.
            "prototype$__create__floorPlans": {
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.destroyAll() instead.
            "prototype$__delete__floorPlans": {
              url: urlBase + "/crawledApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.floorPlans.count() instead.
            "prototype$__count__floorPlans": {
              url: urlBase + "/crawledApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.likeUsers() instead.
            "prototype$__get__likeUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.create() instead.
            "prototype$__create__likeUsers": {
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.destroyAll() instead.
            "prototype$__delete__likeUsers": {
              url: urlBase + "/crawledApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.likeUsers.count() instead.
            "prototype$__count__likeUsers": {
              url: urlBase + "/crawledApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.couponUsers() instead.
            "prototype$__get__couponUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.create() instead.
            "prototype$__create__couponUsers": {
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.destroyAll() instead.
            "prototype$__delete__couponUsers": {
              url: urlBase + "/crawledApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.couponUsers.count() instead.
            "prototype$__count__couponUsers": {
              url: urlBase + "/crawledApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.visitUsers() instead.
            "prototype$__get__visitUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.create() instead.
            "prototype$__create__visitUsers": {
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.destroyAll() instead.
            "prototype$__delete__visitUsers": {
              url: urlBase + "/crawledApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.visitUsers.count() instead.
            "prototype$__count__visitUsers": {
              url: urlBase + "/crawledApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers() instead.
            "prototype$__get__redirectUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.create() instead.
            "prototype$__create__redirectUsers": {
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.destroyAll() instead.
            "prototype$__delete__redirectUsers": {
              url: urlBase + "/crawledApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.redirectUsers.count() instead.
            "prototype$__count__redirectUsers": {
              url: urlBase + "/crawledApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.tags() instead.
            "prototype$__get__tags": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.tags.create() instead.
            "prototype$__create__tags": {
              url: urlBase + "/crawledApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.tags.destroyAll() instead.
            "prototype$__delete__tags": {
              url: urlBase + "/crawledApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.tags.count() instead.
            "prototype$__count__tags": {
              url: urlBase + "/crawledApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.universities() instead.
            "prototype$__get__universities": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.universities.create() instead.
            "prototype$__create__universities": {
              url: urlBase + "/crawledApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.universities.destroyAll() instead.
            "prototype$__delete__universities": {
              url: urlBase + "/crawledApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.universities.count() instead.
            "prototype$__count__universities": {
              url: urlBase + "/crawledApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers() instead.
            "prototype$__get__roommateUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.create() instead.
            "prototype$__create__roommateUsers": {
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.destroyAll() instead.
            "prototype$__delete__roommateUsers": {
              url: urlBase + "/crawledApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.roommateUsers.count() instead.
            "prototype$__count__roommateUsers": {
              url: urlBase + "/crawledApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers() instead.
            "prototype$__get__wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.create() instead.
            "prototype$__create__wishApartmentUsers": {
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.destroyAll() instead.
            "prototype$__delete__wishApartmentUsers": {
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use CrawledApartment.wishApartmentUsers.count() instead.
            "prototype$__count__wishApartmentUsers": {
              url: urlBase + "/crawledApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#create
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/crawledApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#createMany
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/crawledApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#upsert
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/crawledApartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#replaceOrCreate
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/crawledApartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#upsertWithWhere
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/crawledApartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#exists
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/crawledApartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#findById
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/crawledApartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#replaceById
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/crawledApartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#find
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/crawledApartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#findOne
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/crawledApartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#updateAll
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/crawledApartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#deleteById
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/crawledApartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#count
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/crawledApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#prototype$updateAttributes
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/crawledApartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#createChangeStream
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/crawledApartments/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#patchOrCreate
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#updateOrCreate
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#update
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#destroyById
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#removeById
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#patchAttributes
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrawledApartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.CrawledApartment#modelName
        * @propertyOf housingApiServices.CrawledApartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CrawledApartment`.
        */
        R.modelName = "CrawledApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.distance2City
     * @header housingApiServices.CrawledApartment.distance2City
     * @object
     * @description
     *
     * The object `CrawledApartment.distance2City` groups methods
     * manipulating `ApartmentCity` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#distance2City CrawledApartment.distance2City()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#distance2City
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries distance2City of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::get::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#count
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Counts distance2City of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2City.count = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::count::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#create
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.create = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::create::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#createMany
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.createMany = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::createMany::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#destroyAll
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Deletes all distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::delete::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#destroyById
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Delete a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::destroyById::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#findById
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Find a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.findById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::findById::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2City#updateById
             * @methodOf housingApiServices.CrawledApartment.distance2City
             *
             * @description
             *
             * Update a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.updateById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::updateById::CrawledApartment::distance2City"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.distance2Campus
     * @header housingApiServices.CrawledApartment.distance2Campus
     * @object
     * @description
     *
     * The object `CrawledApartment.distance2Campus` groups methods
     * manipulating `ApartmentUniv` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#distance2Campus CrawledApartment.distance2Campus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#distance2Campus
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries distance2Campus of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::get::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#count
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Counts distance2Campus of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2Campus.count = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::count::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#create
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.create = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::create::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#createMany
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.createMany = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::createMany::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#destroyAll
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Deletes all distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::delete::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#destroyById
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Delete a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::destroyById::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#findById
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Find a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.findById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::findById::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.distance2Campus#updateById
             * @methodOf housingApiServices.CrawledApartment.distance2Campus
             *
             * @description
             *
             * Update a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.updateById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::updateById::CrawledApartment::distance2Campus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.cities
     * @header housingApiServices.CrawledApartment.cities
     * @object
     * @description
     *
     * The object `CrawledApartment.cities` groups methods
     * manipulating `City` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#cities CrawledApartment.cities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#cities
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries cities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::get::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#count
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Counts cities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.cities.count = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::count::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#create
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.create = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::create::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#createMany
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.createMany = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::createMany::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#destroyAll
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Deletes all cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyAll = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::delete::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#destroyById
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Delete a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::destroyById::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#exists
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Check the existence of cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.exists = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::exists::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#findById
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Find a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.findById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::findById::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#link
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Add a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.link = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::link::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#unlink
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Remove the cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.unlink = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::unlink::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.cities#updateById
             * @methodOf housingApiServices.CrawledApartment.cities
             *
             * @description
             *
             * Update a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.updateById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::updateById::CrawledApartment::cities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.features
     * @header housingApiServices.CrawledApartment.features
     * @object
     * @description
     *
     * The object `CrawledApartment.features` groups methods
     * manipulating `Feature` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#features CrawledApartment.features()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#features
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries features of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::get::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#count
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Counts features of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.features.count = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::count::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#create
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.create = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::create::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#createMany
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.createMany = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::createMany::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#destroyAll
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Deletes all features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyAll = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::delete::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#destroyById
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Delete a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::destroyById::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#exists
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Check the existence of features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.exists = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::exists::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#findById
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Find a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.findById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::findById::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#link
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Add a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.link = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::link::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#unlink
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Remove the features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.unlink = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::unlink::CrawledApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.features#updateById
             * @methodOf housingApiServices.CrawledApartment.features
             *
             * @description
             *
             * Update a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.updateById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::updateById::CrawledApartment::features"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.amenities
     * @header housingApiServices.CrawledApartment.amenities
     * @object
     * @description
     *
     * The object `CrawledApartment.amenities` groups methods
     * manipulating `Amenity` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#amenities CrawledApartment.amenities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#amenities
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries amenities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::get::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#count
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Counts amenities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.amenities.count = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::count::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#create
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.create = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::create::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#createMany
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.createMany = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::createMany::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#destroyAll
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Deletes all amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyAll = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::delete::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#destroyById
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Delete a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::destroyById::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#exists
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Check the existence of amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.exists = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::exists::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#findById
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Find a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.findById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::findById::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#link
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Add a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.link = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::link::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#unlink
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Remove the amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.unlink = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::unlink::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.amenities#updateById
             * @methodOf housingApiServices.CrawledApartment.amenities
             *
             * @description
             *
             * Update a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.updateById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::updateById::CrawledApartment::amenities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.utilities
     * @header housingApiServices.CrawledApartment.utilities
     * @object
     * @description
     *
     * The object `CrawledApartment.utilities` groups methods
     * manipulating `Utility` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#utilities CrawledApartment.utilities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#utilities
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries utilities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::get::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#count
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Counts utilities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.utilities.count = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::count::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#create
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.create = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::create::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#createMany
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.createMany = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::createMany::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#destroyAll
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Deletes all utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyAll = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::delete::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#destroyById
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Delete a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::destroyById::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#exists
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Check the existence of utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.exists = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::exists::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#findById
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Find a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.findById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::findById::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#link
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Add a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.link = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::link::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#unlink
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Remove the utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.unlink = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::unlink::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.utilities#updateById
             * @methodOf housingApiServices.CrawledApartment.utilities
             *
             * @description
             *
             * Update a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.updateById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::updateById::CrawledApartment::utilities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.safeties
     * @header housingApiServices.CrawledApartment.safeties
     * @object
     * @description
     *
     * The object `CrawledApartment.safeties` groups methods
     * manipulating `Safety` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#safeties CrawledApartment.safeties()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#safeties
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries safeties of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::get::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#count
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Counts safeties of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.safeties.count = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::count::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#create
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.create = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::create::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#createMany
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.createMany = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::createMany::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#destroyAll
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Deletes all safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyAll = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::delete::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#destroyById
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Delete a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::destroyById::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#exists
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Check the existence of safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.exists = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::exists::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#findById
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Find a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.findById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::findById::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#link
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Add a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.link = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::link::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#unlink
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Remove the safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.unlink = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::unlink::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.safeties#updateById
             * @methodOf housingApiServices.CrawledApartment.safeties
             *
             * @description
             *
             * Update a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.updateById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::updateById::CrawledApartment::safeties"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.floorPlans
     * @header housingApiServices.CrawledApartment.floorPlans
     * @object
     * @description
     *
     * The object `CrawledApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#floorPlans CrawledApartment.floorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#floorPlans
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries floorPlans of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#count
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Counts floorPlans of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#create
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#createMany
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#destroyAll
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Deletes all floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#destroyById
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Delete a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#findById
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Find a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.floorPlans#updateById
             * @methodOf housingApiServices.CrawledApartment.floorPlans
             *
             * @description
             *
             * Update a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::CrawledApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.likeUsers
     * @header housingApiServices.CrawledApartment.likeUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.likeUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#likeUsers CrawledApartment.likeUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#likeUsers
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries likeUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#count
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Counts likeUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#create
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#createMany
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#destroyAll
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Deletes all likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#destroyById
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Delete a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#exists
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Check the existence of likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#findById
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Find a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#link
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Add a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#unlink
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Remove the likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.likeUsers#updateById
             * @methodOf housingApiServices.CrawledApartment.likeUsers
             *
             * @description
             *
             * Update a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::CrawledApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.couponUsers
     * @header housingApiServices.CrawledApartment.couponUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.couponUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#couponUsers CrawledApartment.couponUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#couponUsers
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries couponUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#count
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Counts couponUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#create
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#createMany
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#destroyAll
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Deletes all couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#destroyById
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Delete a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#exists
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Check the existence of couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#findById
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Find a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#link
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Add a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#unlink
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Remove the couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.couponUsers#updateById
             * @methodOf housingApiServices.CrawledApartment.couponUsers
             *
             * @description
             *
             * Update a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::CrawledApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.visitUsers
     * @header housingApiServices.CrawledApartment.visitUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.visitUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#visitUsers CrawledApartment.visitUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#visitUsers
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries visitUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#count
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Counts visitUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#create
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#createMany
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#destroyAll
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Deletes all visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#destroyById
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Delete a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#exists
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Check the existence of visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#findById
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Find a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#link
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Add a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#unlink
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Remove the visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.visitUsers#updateById
             * @methodOf housingApiServices.CrawledApartment.visitUsers
             *
             * @description
             *
             * Update a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::CrawledApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.redirectUsers
     * @header housingApiServices.CrawledApartment.redirectUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#redirectUsers CrawledApartment.redirectUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#redirectUsers
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries redirectUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#count
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Counts redirectUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#create
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#createMany
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#destroyAll
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Deletes all redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#destroyById
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Delete a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#exists
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Check the existence of redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#findById
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Find a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#link
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Add a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#unlink
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Remove the redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.redirectUsers#updateById
             * @methodOf housingApiServices.CrawledApartment.redirectUsers
             *
             * @description
             *
             * Update a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::CrawledApartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.tags
     * @header housingApiServices.CrawledApartment.tags
     * @object
     * @description
     *
     * The object `CrawledApartment.tags` groups methods
     * manipulating `Tag` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#tags CrawledApartment.tags()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#tags
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries tags of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#count
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Counts tags of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#create
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#createMany
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#destroyAll
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Deletes all tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#destroyById
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Delete a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#exists
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Check the existence of tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#findById
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Find a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#link
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Add a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#unlink
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Remove the tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.tags#updateById
             * @methodOf housingApiServices.CrawledApartment.tags
             *
             * @description
             *
             * Update a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::CrawledApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.universities
     * @header housingApiServices.CrawledApartment.universities
     * @object
     * @description
     *
     * The object `CrawledApartment.universities` groups methods
     * manipulating `University` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#universities CrawledApartment.universities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#universities
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries universities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#count
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Counts universities of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#create
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#createMany
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#destroyAll
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Deletes all universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#destroyById
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Delete a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#exists
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Check the existence of universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#findById
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Find a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#link
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Add a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#unlink
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Remove the universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.universities#updateById
             * @methodOf housingApiServices.CrawledApartment.universities
             *
             * @description
             *
             * Update a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::CrawledApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#submittedApartment
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Fetches belongsTo relation submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartment = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::get::CrawledApartment::submittedApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.roommateUsers
     * @header housingApiServices.CrawledApartment.roommateUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#roommateUsers CrawledApartment.roommateUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#roommateUsers
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries roommateUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#count
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Counts roommateUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#create
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#createMany
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#destroyAll
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Deletes all roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#destroyById
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Delete a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#exists
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Check the existence of roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#findById
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Find a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#link
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Add a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#unlink
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Remove the roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.roommateUsers#updateById
             * @methodOf housingApiServices.CrawledApartment.roommateUsers
             *
             * @description
             *
             * Update a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::CrawledApartment::roommateUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.CrawledApartment.wishApartmentUsers
     * @header housingApiServices.CrawledApartment.wishApartmentUsers
     * @object
     * @description
     *
     * The object `CrawledApartment.wishApartmentUsers` groups methods
     * manipulating `User` instances related to `CrawledApartment`.
     *
     * Call {@link housingApiServices.CrawledApartment#wishApartmentUsers CrawledApartment.wishApartmentUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment#wishApartmentUsers
             * @methodOf housingApiServices.CrawledApartment
             *
             * @description
             *
             * Queries wishApartmentUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#count
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Counts wishApartmentUsers of crawledApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishApartmentUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#create
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#createMany
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#destroyAll
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Deletes all wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#destroyById
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Delete a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#exists
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Check the existence of wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#findById
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Find a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#link
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Add a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#unlink
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Remove the wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.CrawledApartment.wishApartmentUsers#updateById
             * @methodOf housingApiServices.CrawledApartment.wishApartmentUsers
             *
             * @description
             *
             * Update a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - crawledApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::CrawledApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.PendingApartment
 * @header housingApiServices.PendingApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PendingApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PendingApartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/pendingApartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use PendingApartment.universities.findById() instead.
            "prototype$__findById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.universities.destroyById() instead.
            "prototype$__destroyById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.universities.updateById() instead.
            "prototype$__updateById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.universities.link() instead.
            "prototype$__link__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.universities.unlink() instead.
            "prototype$__unlink__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.universities.exists() instead.
            "prototype$__exists__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.distance2City.findById() instead.
            "prototype$__findById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2City.destroyById() instead.
            "prototype$__destroyById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2City.updateById() instead.
            "prototype$__updateById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.findById() instead.
            "prototype$__findById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.destroyById() instead.
            "prototype$__destroyById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.updateById() instead.
            "prototype$__updateById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.cities.findById() instead.
            "prototype$__findById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.cities.destroyById() instead.
            "prototype$__destroyById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.cities.updateById() instead.
            "prototype$__updateById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.cities.link() instead.
            "prototype$__link__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.cities.unlink() instead.
            "prototype$__unlink__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.cities.exists() instead.
            "prototype$__exists__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.floorPlans.findById() instead.
            "prototype$__findById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.floorPlans.destroyById() instead.
            "prototype$__destroyById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.floorPlans.updateById() instead.
            "prototype$__updateById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.likeUsers.findById() instead.
            "prototype$__findById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.likeUsers.destroyById() instead.
            "prototype$__destroyById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.likeUsers.updateById() instead.
            "prototype$__updateById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.likeUsers.link() instead.
            "prototype$__link__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.likeUsers.unlink() instead.
            "prototype$__unlink__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.likeUsers.exists() instead.
            "prototype$__exists__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.couponUsers.findById() instead.
            "prototype$__findById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.couponUsers.destroyById() instead.
            "prototype$__destroyById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.couponUsers.updateById() instead.
            "prototype$__updateById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.couponUsers.link() instead.
            "prototype$__link__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.couponUsers.unlink() instead.
            "prototype$__unlink__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.couponUsers.exists() instead.
            "prototype$__exists__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.visitUsers.findById() instead.
            "prototype$__findById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.visitUsers.destroyById() instead.
            "prototype$__destroyById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.visitUsers.updateById() instead.
            "prototype$__updateById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.visitUsers.link() instead.
            "prototype$__link__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.visitUsers.unlink() instead.
            "prototype$__unlink__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.visitUsers.exists() instead.
            "prototype$__exists__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.findById() instead.
            "prototype$__findById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.destroyById() instead.
            "prototype$__destroyById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.updateById() instead.
            "prototype$__updateById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.link() instead.
            "prototype$__link__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.unlink() instead.
            "prototype$__unlink__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.exists() instead.
            "prototype$__exists__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.tags.findById() instead.
            "prototype$__findById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.tags.destroyById() instead.
            "prototype$__destroyById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.tags.updateById() instead.
            "prototype$__updateById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.tags.link() instead.
            "prototype$__link__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.tags.unlink() instead.
            "prototype$__unlink__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.tags.exists() instead.
            "prototype$__exists__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.features.findById() instead.
            "prototype$__findById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.features.destroyById() instead.
            "prototype$__destroyById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.features.updateById() instead.
            "prototype$__updateById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.features.link() instead.
            "prototype$__link__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.features.unlink() instead.
            "prototype$__unlink__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.features.exists() instead.
            "prototype$__exists__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.amenities.findById() instead.
            "prototype$__findById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.amenities.destroyById() instead.
            "prototype$__destroyById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.amenities.updateById() instead.
            "prototype$__updateById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.amenities.link() instead.
            "prototype$__link__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.amenities.unlink() instead.
            "prototype$__unlink__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.amenities.exists() instead.
            "prototype$__exists__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.safeties.findById() instead.
            "prototype$__findById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.safeties.destroyById() instead.
            "prototype$__destroyById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.safeties.updateById() instead.
            "prototype$__updateById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.safeties.link() instead.
            "prototype$__link__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.safeties.unlink() instead.
            "prototype$__unlink__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.safeties.exists() instead.
            "prototype$__exists__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.utilities.findById() instead.
            "prototype$__findById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.utilities.destroyById() instead.
            "prototype$__destroyById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.utilities.updateById() instead.
            "prototype$__updateById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.utilities.link() instead.
            "prototype$__link__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.utilities.unlink() instead.
            "prototype$__unlink__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.utilities.exists() instead.
            "prototype$__exists__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__findById__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Find a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$__findById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/similarListings/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__destroyById__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Delete a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/similarListings/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__updateById__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Update a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$__updateById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/similarListings/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__link__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Add a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$__link__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/similarListings/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__unlink__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Remove the similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/similarListings/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__exists__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Check the existence of similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$__exists__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/similarListings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.submittedApartment() instead.
            "prototype$__get__submittedApartment": {
              url: urlBase + "/pendingApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.findById() instead.
            "prototype$__findById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.destroyById() instead.
            "prototype$__destroyById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.updateById() instead.
            "prototype$__updateById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.link() instead.
            "prototype$__link__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.unlink() instead.
            "prototype$__unlink__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.exists() instead.
            "prototype$__exists__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.findById() instead.
            "prototype$__findById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.destroyById() instead.
            "prototype$__destroyById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.updateById() instead.
            "prototype$__updateById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.link() instead.
            "prototype$__link__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.unlink() instead.
            "prototype$__unlink__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.exists() instead.
            "prototype$__exists__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use PendingApartment.universities() instead.
            "prototype$__get__universities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.universities.create() instead.
            "prototype$__create__universities": {
              url: urlBase + "/pendingApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.universities.destroyAll() instead.
            "prototype$__delete__universities": {
              url: urlBase + "/pendingApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.universities.count() instead.
            "prototype$__count__universities": {
              url: urlBase + "/pendingApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2City() instead.
            "prototype$__get__distance2City": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2City.create() instead.
            "prototype$__create__distance2City": {
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.distance2City.destroyAll() instead.
            "prototype$__delete__distance2City": {
              url: urlBase + "/pendingApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2City.count() instead.
            "prototype$__count__distance2City": {
              url: urlBase + "/pendingApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2Campus() instead.
            "prototype$__get__distance2Campus": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.create() instead.
            "prototype$__create__distance2Campus": {
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.destroyAll() instead.
            "prototype$__delete__distance2Campus": {
              url: urlBase + "/pendingApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.distance2Campus.count() instead.
            "prototype$__count__distance2Campus": {
              url: urlBase + "/pendingApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.cities() instead.
            "prototype$__get__cities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.cities.create() instead.
            "prototype$__create__cities": {
              url: urlBase + "/pendingApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.cities.destroyAll() instead.
            "prototype$__delete__cities": {
              url: urlBase + "/pendingApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.cities.count() instead.
            "prototype$__count__cities": {
              url: urlBase + "/pendingApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.floorPlans() instead.
            "prototype$__get__floorPlans": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.floorPlans.create() instead.
            "prototype$__create__floorPlans": {
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.floorPlans.destroyAll() instead.
            "prototype$__delete__floorPlans": {
              url: urlBase + "/pendingApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.floorPlans.count() instead.
            "prototype$__count__floorPlans": {
              url: urlBase + "/pendingApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.likeUsers() instead.
            "prototype$__get__likeUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.likeUsers.create() instead.
            "prototype$__create__likeUsers": {
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.likeUsers.destroyAll() instead.
            "prototype$__delete__likeUsers": {
              url: urlBase + "/pendingApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.likeUsers.count() instead.
            "prototype$__count__likeUsers": {
              url: urlBase + "/pendingApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.couponUsers() instead.
            "prototype$__get__couponUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.couponUsers.create() instead.
            "prototype$__create__couponUsers": {
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.couponUsers.destroyAll() instead.
            "prototype$__delete__couponUsers": {
              url: urlBase + "/pendingApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.couponUsers.count() instead.
            "prototype$__count__couponUsers": {
              url: urlBase + "/pendingApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.visitUsers() instead.
            "prototype$__get__visitUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.visitUsers.create() instead.
            "prototype$__create__visitUsers": {
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.visitUsers.destroyAll() instead.
            "prototype$__delete__visitUsers": {
              url: urlBase + "/pendingApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.visitUsers.count() instead.
            "prototype$__count__visitUsers": {
              url: urlBase + "/pendingApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.redirectUsers() instead.
            "prototype$__get__redirectUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.create() instead.
            "prototype$__create__redirectUsers": {
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.destroyAll() instead.
            "prototype$__delete__redirectUsers": {
              url: urlBase + "/pendingApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.redirectUsers.count() instead.
            "prototype$__count__redirectUsers": {
              url: urlBase + "/pendingApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.tags() instead.
            "prototype$__get__tags": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.tags.create() instead.
            "prototype$__create__tags": {
              url: urlBase + "/pendingApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.tags.destroyAll() instead.
            "prototype$__delete__tags": {
              url: urlBase + "/pendingApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.tags.count() instead.
            "prototype$__count__tags": {
              url: urlBase + "/pendingApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.features() instead.
            "prototype$__get__features": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.features.create() instead.
            "prototype$__create__features": {
              url: urlBase + "/pendingApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.features.destroyAll() instead.
            "prototype$__delete__features": {
              url: urlBase + "/pendingApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.features.count() instead.
            "prototype$__count__features": {
              url: urlBase + "/pendingApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.amenities() instead.
            "prototype$__get__amenities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.amenities.create() instead.
            "prototype$__create__amenities": {
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.amenities.destroyAll() instead.
            "prototype$__delete__amenities": {
              url: urlBase + "/pendingApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.amenities.count() instead.
            "prototype$__count__amenities": {
              url: urlBase + "/pendingApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.safeties() instead.
            "prototype$__get__safeties": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.safeties.create() instead.
            "prototype$__create__safeties": {
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.safeties.destroyAll() instead.
            "prototype$__delete__safeties": {
              url: urlBase + "/pendingApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.safeties.count() instead.
            "prototype$__count__safeties": {
              url: urlBase + "/pendingApartments/:id/safeties/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.utilities() instead.
            "prototype$__get__utilities": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.utilities.create() instead.
            "prototype$__create__utilities": {
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.utilities.destroyAll() instead.
            "prototype$__delete__utilities": {
              url: urlBase + "/pendingApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.utilities.count() instead.
            "prototype$__count__utilities": {
              url: urlBase + "/pendingApartments/:id/utilities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__get__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries similarListings of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$__get__similarListings": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/similarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__create__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Creates a new instance in similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$__create__similarListings": {
              url: urlBase + "/pendingApartments/:id/similarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__delete__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Deletes all similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__similarListings": {
              url: urlBase + "/pendingApartments/:id/similarListings",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$__count__similarListings
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Counts similarListings of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__similarListings": {
              url: urlBase + "/pendingApartments/:id/similarListings/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers() instead.
            "prototype$__get__roommateUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.create() instead.
            "prototype$__create__roommateUsers": {
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.destroyAll() instead.
            "prototype$__delete__roommateUsers": {
              url: urlBase + "/pendingApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.roommateUsers.count() instead.
            "prototype$__count__roommateUsers": {
              url: urlBase + "/pendingApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers() instead.
            "prototype$__get__wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.create() instead.
            "prototype$__create__wishApartmentUsers": {
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.destroyAll() instead.
            "prototype$__delete__wishApartmentUsers": {
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use PendingApartment.wishApartmentUsers.count() instead.
            "prototype$__count__wishApartmentUsers": {
              url: urlBase + "/pendingApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#create
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/pendingApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#createMany
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/pendingApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#upsert
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/pendingApartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#replaceOrCreate
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/pendingApartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#upsertWithWhere
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/pendingApartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#exists
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/pendingApartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#findById
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/pendingApartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#replaceById
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/pendingApartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#find
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/pendingApartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#findOne
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/pendingApartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#updateAll
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/pendingApartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#deleteById
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/pendingApartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#count
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/pendingApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#prototype$updateAttributes
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/pendingApartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#createChangeStream
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/pendingApartments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use PendingApartmentSimilarListing.apartment() instead.
            "::get::PendingApartmentSimilarListing::apartment": {
              url: urlBase + "/pendingApartmentSimilarListings/:id/apartment",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#patchOrCreate
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#updateOrCreate
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#update
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#destroyById
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#removeById
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#patchAttributes
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.PendingApartment#modelName
        * @propertyOf housingApiServices.PendingApartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PendingApartment`.
        */
        R.modelName = "PendingApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.universities
     * @header housingApiServices.PendingApartment.universities
     * @object
     * @description
     *
     * The object `PendingApartment.universities` groups methods
     * manipulating `University` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#universities PendingApartment.universities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#universities
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries universities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#count
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Counts universities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#create
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#createMany
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#destroyAll
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Deletes all universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#destroyById
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Delete a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#exists
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Check the existence of universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#findById
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Find a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#link
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Add a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#unlink
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Remove the universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::PendingApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.universities#updateById
             * @methodOf housingApiServices.PendingApartment.universities
             *
             * @description
             *
             * Update a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::PendingApartment::universities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.distance2City
     * @header housingApiServices.PendingApartment.distance2City
     * @object
     * @description
     *
     * The object `PendingApartment.distance2City` groups methods
     * manipulating `ApartmentCity` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#distance2City PendingApartment.distance2City()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#distance2City
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries distance2City of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::get::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#count
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Counts distance2City of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2City.count = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::count::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#create
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.create = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::create::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#createMany
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.createMany = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::createMany::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#destroyAll
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Deletes all distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::delete::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#destroyById
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Delete a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::destroyById::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#findById
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Find a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.findById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::findById::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2City#updateById
             * @methodOf housingApiServices.PendingApartment.distance2City
             *
             * @description
             *
             * Update a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.updateById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::updateById::PendingApartment::distance2City"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.distance2Campus
     * @header housingApiServices.PendingApartment.distance2Campus
     * @object
     * @description
     *
     * The object `PendingApartment.distance2Campus` groups methods
     * manipulating `ApartmentUniv` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#distance2Campus PendingApartment.distance2Campus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#distance2Campus
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries distance2Campus of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::get::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#count
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Counts distance2Campus of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2Campus.count = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::count::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#create
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.create = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::create::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#createMany
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.createMany = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::createMany::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#destroyAll
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Deletes all distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::delete::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#destroyById
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Delete a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::destroyById::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#findById
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Find a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.findById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::findById::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.distance2Campus#updateById
             * @methodOf housingApiServices.PendingApartment.distance2Campus
             *
             * @description
             *
             * Update a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.updateById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::updateById::PendingApartment::distance2Campus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.cities
     * @header housingApiServices.PendingApartment.cities
     * @object
     * @description
     *
     * The object `PendingApartment.cities` groups methods
     * manipulating `City` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#cities PendingApartment.cities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#cities
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries cities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::get::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#count
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Counts cities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.cities.count = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::count::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#create
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.create = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::create::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#createMany
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.createMany = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::createMany::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#destroyAll
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Deletes all cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyAll = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::delete::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#destroyById
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Delete a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::destroyById::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#exists
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Check the existence of cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.exists = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::exists::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#findById
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Find a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.findById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::findById::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#link
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Add a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.link = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::link::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#unlink
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Remove the cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.unlink = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::unlink::PendingApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.cities#updateById
             * @methodOf housingApiServices.PendingApartment.cities
             *
             * @description
             *
             * Update a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.updateById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::updateById::PendingApartment::cities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.floorPlans
     * @header housingApiServices.PendingApartment.floorPlans
     * @object
     * @description
     *
     * The object `PendingApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#floorPlans PendingApartment.floorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#floorPlans
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries floorPlans of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#count
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Counts floorPlans of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#create
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#createMany
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#destroyAll
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Deletes all floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#destroyById
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Delete a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#findById
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Find a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.floorPlans#updateById
             * @methodOf housingApiServices.PendingApartment.floorPlans
             *
             * @description
             *
             * Update a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::PendingApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.likeUsers
     * @header housingApiServices.PendingApartment.likeUsers
     * @object
     * @description
     *
     * The object `PendingApartment.likeUsers` groups methods
     * manipulating `User` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#likeUsers PendingApartment.likeUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#likeUsers
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries likeUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#count
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Counts likeUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#create
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#createMany
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#destroyAll
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Deletes all likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#destroyById
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Delete a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#exists
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Check the existence of likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#findById
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Find a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#link
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Add a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#unlink
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Remove the likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.likeUsers#updateById
             * @methodOf housingApiServices.PendingApartment.likeUsers
             *
             * @description
             *
             * Update a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::PendingApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.couponUsers
     * @header housingApiServices.PendingApartment.couponUsers
     * @object
     * @description
     *
     * The object `PendingApartment.couponUsers` groups methods
     * manipulating `User` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#couponUsers PendingApartment.couponUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#couponUsers
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries couponUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#count
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Counts couponUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#create
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#createMany
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#destroyAll
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Deletes all couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#destroyById
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Delete a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#exists
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Check the existence of couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#findById
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Find a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#link
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Add a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#unlink
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Remove the couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.couponUsers#updateById
             * @methodOf housingApiServices.PendingApartment.couponUsers
             *
             * @description
             *
             * Update a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::PendingApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.visitUsers
     * @header housingApiServices.PendingApartment.visitUsers
     * @object
     * @description
     *
     * The object `PendingApartment.visitUsers` groups methods
     * manipulating `User` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#visitUsers PendingApartment.visitUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#visitUsers
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries visitUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#count
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Counts visitUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#create
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#createMany
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#destroyAll
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Deletes all visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#destroyById
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Delete a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#exists
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Check the existence of visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#findById
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Find a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#link
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Add a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#unlink
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Remove the visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.visitUsers#updateById
             * @methodOf housingApiServices.PendingApartment.visitUsers
             *
             * @description
             *
             * Update a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::PendingApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.redirectUsers
     * @header housingApiServices.PendingApartment.redirectUsers
     * @object
     * @description
     *
     * The object `PendingApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#redirectUsers PendingApartment.redirectUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#redirectUsers
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries redirectUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#count
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Counts redirectUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#create
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#createMany
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#destroyAll
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Deletes all redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#destroyById
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Delete a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#exists
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Check the existence of redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#findById
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Find a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#link
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Add a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#unlink
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Remove the redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.redirectUsers#updateById
             * @methodOf housingApiServices.PendingApartment.redirectUsers
             *
             * @description
             *
             * Update a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::PendingApartment::redirectUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.tags
     * @header housingApiServices.PendingApartment.tags
     * @object
     * @description
     *
     * The object `PendingApartment.tags` groups methods
     * manipulating `Tag` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#tags PendingApartment.tags()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#tags
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries tags of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#count
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Counts tags of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#create
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#createMany
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#destroyAll
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Deletes all tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#destroyById
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Delete a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#exists
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Check the existence of tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#findById
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Find a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#link
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Add a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#unlink
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Remove the tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::PendingApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.tags#updateById
             * @methodOf housingApiServices.PendingApartment.tags
             *
             * @description
             *
             * Update a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::PendingApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.features
     * @header housingApiServices.PendingApartment.features
     * @object
     * @description
     *
     * The object `PendingApartment.features` groups methods
     * manipulating `Tag` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#features PendingApartment.features()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#features
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries features of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#count
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Counts features of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.features.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#create
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#createMany
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#destroyAll
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Deletes all features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#destroyById
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Delete a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#exists
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Check the existence of features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#findById
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Find a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#link
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Add a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#unlink
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Remove the features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::PendingApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.features#updateById
             * @methodOf housingApiServices.PendingApartment.features
             *
             * @description
             *
             * Update a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.features.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::PendingApartment::features"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.amenities
     * @header housingApiServices.PendingApartment.amenities
     * @object
     * @description
     *
     * The object `PendingApartment.amenities` groups methods
     * manipulating `Tag` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#amenities PendingApartment.amenities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#amenities
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries amenities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#count
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Counts amenities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.amenities.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#create
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#createMany
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#destroyAll
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Deletes all amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#destroyById
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Delete a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#exists
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Check the existence of amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#findById
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Find a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#link
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Add a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#unlink
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Remove the amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.amenities#updateById
             * @methodOf housingApiServices.PendingApartment.amenities
             *
             * @description
             *
             * Update a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.amenities.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::PendingApartment::amenities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.safeties
     * @header housingApiServices.PendingApartment.safeties
     * @object
     * @description
     *
     * The object `PendingApartment.safeties` groups methods
     * manipulating `Tag` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#safeties PendingApartment.safeties()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#safeties
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries safeties of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#count
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Counts safeties of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.safeties.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#create
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#createMany
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#destroyAll
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Deletes all safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#destroyById
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Delete a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#exists
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Check the existence of safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#findById
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Find a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#link
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Add a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#unlink
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Remove the safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.safeties#updateById
             * @methodOf housingApiServices.PendingApartment.safeties
             *
             * @description
             *
             * Update a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.safeties.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::PendingApartment::safeties"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.utilities
     * @header housingApiServices.PendingApartment.utilities
     * @object
     * @description
     *
     * The object `PendingApartment.utilities` groups methods
     * manipulating `Tag` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#utilities PendingApartment.utilities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#utilities
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries utilities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#count
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Counts utilities of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.utilities.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#create
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#createMany
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#destroyAll
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Deletes all utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#destroyById
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Delete a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#exists
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Check the existence of utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#findById
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Find a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#link
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Add a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#unlink
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Remove the utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.utilities#updateById
             * @methodOf housingApiServices.PendingApartment.utilities
             *
             * @description
             *
             * Update a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.utilities.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::PendingApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#submittedApartment
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Fetches belongsTo relation submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartment = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::get::PendingApartment::submittedApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.roommateUsers
     * @header housingApiServices.PendingApartment.roommateUsers
     * @object
     * @description
     *
     * The object `PendingApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#roommateUsers PendingApartment.roommateUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#roommateUsers
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries roommateUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#count
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Counts roommateUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#create
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#createMany
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#destroyAll
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Deletes all roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#destroyById
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Delete a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#exists
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Check the existence of roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#findById
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Find a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#link
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Add a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#unlink
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Remove the roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.roommateUsers#updateById
             * @methodOf housingApiServices.PendingApartment.roommateUsers
             *
             * @description
             *
             * Update a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::PendingApartment::roommateUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PendingApartment.wishApartmentUsers
     * @header housingApiServices.PendingApartment.wishApartmentUsers
     * @object
     * @description
     *
     * The object `PendingApartment.wishApartmentUsers` groups methods
     * manipulating `User` instances related to `PendingApartment`.
     *
     * Call {@link housingApiServices.PendingApartment#wishApartmentUsers PendingApartment.wishApartmentUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment#wishApartmentUsers
             * @methodOf housingApiServices.PendingApartment
             *
             * @description
             *
             * Queries wishApartmentUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#count
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Counts wishApartmentUsers of pendingApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishApartmentUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#create
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#createMany
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#destroyAll
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Deletes all wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#destroyById
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Delete a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#exists
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Check the existence of wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#findById
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Find a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#link
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Add a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#unlink
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Remove the wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartment.wishApartmentUsers#updateById
             * @methodOf housingApiServices.PendingApartment.wishApartmentUsers
             *
             * @description
             *
             * Update a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::PendingApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.PendingApartmentSimilarListing
 * @header housingApiServices.PendingApartmentSimilarListing
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PendingApartmentSimilarListing` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PendingApartmentSimilarListing",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/pendingApartmentSimilarListings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use PendingApartmentSimilarListing.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/pendingApartmentSimilarListings/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use PendingApartmentSimilarListing.similarListing() instead.
            "prototype$__get__similarListing": {
              url: urlBase + "/pendingApartmentSimilarListings/:id/similarListing",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#create
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/pendingApartmentSimilarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#createMany
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/pendingApartmentSimilarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#upsert
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/pendingApartmentSimilarListings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#replaceOrCreate
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/pendingApartmentSimilarListings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#upsertWithWhere
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/pendingApartmentSimilarListings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#exists
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/pendingApartmentSimilarListings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#findById
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/pendingApartmentSimilarListings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#replaceById
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/pendingApartmentSimilarListings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#find
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/pendingApartmentSimilarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#findOne
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/pendingApartmentSimilarListings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#updateAll
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/pendingApartmentSimilarListings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#deleteById
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/pendingApartmentSimilarListings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#count
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/pendingApartmentSimilarListings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#prototype$updateAttributes
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartmentSimilarListing id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/pendingApartmentSimilarListings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#createChangeStream
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/pendingApartmentSimilarListings/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#patchOrCreate
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#updateOrCreate
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#patchOrCreateWithWhere
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#update
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#destroyById
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#removeById
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#patchAttributes
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartmentSimilarListing id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartmentSimilarListing` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.PendingApartmentSimilarListing#modelName
        * @propertyOf housingApiServices.PendingApartmentSimilarListing
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PendingApartmentSimilarListing`.
        */
        R.modelName = "PendingApartmentSimilarListing";


            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#apartment
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartmentSimilarListing id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PendingApartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("PendingApartment");
          var action = TargetResource["::get::PendingApartmentSimilarListing::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PendingApartmentSimilarListing#similarListing
             * @methodOf housingApiServices.PendingApartmentSimilarListing
             *
             * @description
             *
             * Fetches belongsTo relation similarListing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - pendingApartmentSimilarListing id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.similarListing = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::PendingApartmentSimilarListing::similarListing"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.SubmittedApartment
 * @header housingApiServices.SubmittedApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SubmittedApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SubmittedApartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/submittedApartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SubmittedApartment.distance2City.findById() instead.
            "prototype$__findById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.destroyById() instead.
            "prototype$__destroyById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.updateById() instead.
            "prototype$__updateById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.findById() instead.
            "prototype$__findById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.destroyById() instead.
            "prototype$__destroyById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.updateById() instead.
            "prototype$__updateById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.cities.findById() instead.
            "prototype$__findById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.cities.destroyById() instead.
            "prototype$__destroyById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.cities.updateById() instead.
            "prototype$__updateById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.cities.link() instead.
            "prototype$__link__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.cities.unlink() instead.
            "prototype$__unlink__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.cities.exists() instead.
            "prototype$__exists__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.features.findById() instead.
            "prototype$__findById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.features.destroyById() instead.
            "prototype$__destroyById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.features.updateById() instead.
            "prototype$__updateById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.features.link() instead.
            "prototype$__link__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.features.unlink() instead.
            "prototype$__unlink__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.features.exists() instead.
            "prototype$__exists__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.amenities.findById() instead.
            "prototype$__findById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.amenities.destroyById() instead.
            "prototype$__destroyById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.amenities.updateById() instead.
            "prototype$__updateById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.amenities.link() instead.
            "prototype$__link__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.amenities.unlink() instead.
            "prototype$__unlink__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.amenities.exists() instead.
            "prototype$__exists__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.utilities.findById() instead.
            "prototype$__findById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.utilities.destroyById() instead.
            "prototype$__destroyById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.utilities.updateById() instead.
            "prototype$__updateById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.utilities.link() instead.
            "prototype$__link__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.utilities.unlink() instead.
            "prototype$__unlink__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.utilities.exists() instead.
            "prototype$__exists__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.safeties.findById() instead.
            "prototype$__findById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.safeties.destroyById() instead.
            "prototype$__destroyById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.safeties.updateById() instead.
            "prototype$__updateById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.safeties.link() instead.
            "prototype$__link__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.safeties.unlink() instead.
            "prototype$__unlink__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.safeties.exists() instead.
            "prototype$__exists__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__findById__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Find a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$__findById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/similarListings/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__destroyById__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Delete a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/similarListings/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__updateById__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Update a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$__updateById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/similarListings/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__link__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Add a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$__link__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/similarListings/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__unlink__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Remove the similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/similarListings/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__exists__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Check the existence of similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$__exists__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/similarListings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.findById() instead.
            "prototype$__findById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.destroyById() instead.
            "prototype$__destroyById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.updateById() instead.
            "prototype$__updateById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.findById() instead.
            "prototype$__findById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.destroyById() instead.
            "prototype$__destroyById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.updateById() instead.
            "prototype$__updateById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.link() instead.
            "prototype$__link__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.unlink() instead.
            "prototype$__unlink__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.exists() instead.
            "prototype$__exists__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.findById() instead.
            "prototype$__findById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.destroyById() instead.
            "prototype$__destroyById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.updateById() instead.
            "prototype$__updateById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.link() instead.
            "prototype$__link__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.unlink() instead.
            "prototype$__unlink__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.exists() instead.
            "prototype$__exists__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.findById() instead.
            "prototype$__findById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.destroyById() instead.
            "prototype$__destroyById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.updateById() instead.
            "prototype$__updateById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.link() instead.
            "prototype$__link__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.unlink() instead.
            "prototype$__unlink__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.exists() instead.
            "prototype$__exists__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.findById() instead.
            "prototype$__findById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.destroyById() instead.
            "prototype$__destroyById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.updateById() instead.
            "prototype$__updateById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.link() instead.
            "prototype$__link__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.unlink() instead.
            "prototype$__unlink__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.exists() instead.
            "prototype$__exists__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.submittedApartment() instead.
            "prototype$__get__submittedApartment": {
              url: urlBase + "/submittedApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags.findById() instead.
            "prototype$__findById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags.destroyById() instead.
            "prototype$__destroyById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.tags.updateById() instead.
            "prototype$__updateById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.tags.link() instead.
            "prototype$__link__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.tags.unlink() instead.
            "prototype$__unlink__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.tags.exists() instead.
            "prototype$__exists__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.universities.findById() instead.
            "prototype$__findById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.universities.destroyById() instead.
            "prototype$__destroyById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.universities.updateById() instead.
            "prototype$__updateById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.universities.link() instead.
            "prototype$__link__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.universities.unlink() instead.
            "prototype$__unlink__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.universities.exists() instead.
            "prototype$__exists__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.prospectiveApartment() instead.
            "prototype$__get__prospectiveApartment": {
              url: urlBase + "/submittedApartments/:id/prospectiveApartment",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.findById() instead.
            "prototype$__findById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.destroyById() instead.
            "prototype$__destroyById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.updateById() instead.
            "prototype$__updateById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.link() instead.
            "prototype$__link__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.unlink() instead.
            "prototype$__unlink__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.exists() instead.
            "prototype$__exists__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.findById() instead.
            "prototype$__findById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.destroyById() instead.
            "prototype$__destroyById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.updateById() instead.
            "prototype$__updateById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.link() instead.
            "prototype$__link__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.unlink() instead.
            "prototype$__unlink__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.exists() instead.
            "prototype$__exists__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SubmittedApartment.distance2City() instead.
            "prototype$__get__distance2City": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.create() instead.
            "prototype$__create__distance2City": {
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.destroyAll() instead.
            "prototype$__delete__distance2City": {
              url: urlBase + "/submittedApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2City.count() instead.
            "prototype$__count__distance2City": {
              url: urlBase + "/submittedApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus() instead.
            "prototype$__get__distance2Campus": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.create() instead.
            "prototype$__create__distance2Campus": {
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.destroyAll() instead.
            "prototype$__delete__distance2Campus": {
              url: urlBase + "/submittedApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.distance2Campus.count() instead.
            "prototype$__count__distance2Campus": {
              url: urlBase + "/submittedApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.cities() instead.
            "prototype$__get__cities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.cities.create() instead.
            "prototype$__create__cities": {
              url: urlBase + "/submittedApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.cities.destroyAll() instead.
            "prototype$__delete__cities": {
              url: urlBase + "/submittedApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.cities.count() instead.
            "prototype$__count__cities": {
              url: urlBase + "/submittedApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.features() instead.
            "prototype$__get__features": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.features.create() instead.
            "prototype$__create__features": {
              url: urlBase + "/submittedApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.features.destroyAll() instead.
            "prototype$__delete__features": {
              url: urlBase + "/submittedApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.features.count() instead.
            "prototype$__count__features": {
              url: urlBase + "/submittedApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.amenities() instead.
            "prototype$__get__amenities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.amenities.create() instead.
            "prototype$__create__amenities": {
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.amenities.destroyAll() instead.
            "prototype$__delete__amenities": {
              url: urlBase + "/submittedApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.amenities.count() instead.
            "prototype$__count__amenities": {
              url: urlBase + "/submittedApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.utilities() instead.
            "prototype$__get__utilities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.utilities.create() instead.
            "prototype$__create__utilities": {
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.utilities.destroyAll() instead.
            "prototype$__delete__utilities": {
              url: urlBase + "/submittedApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.utilities.count() instead.
            "prototype$__count__utilities": {
              url: urlBase + "/submittedApartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.safeties() instead.
            "prototype$__get__safeties": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.safeties.create() instead.
            "prototype$__create__safeties": {
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.safeties.destroyAll() instead.
            "prototype$__delete__safeties": {
              url: urlBase + "/submittedApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.safeties.count() instead.
            "prototype$__count__safeties": {
              url: urlBase + "/submittedApartments/:id/safeties/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__get__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries similarListings of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$__get__similarListings": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/similarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__create__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Creates a new instance in similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$__create__similarListings": {
              url: urlBase + "/submittedApartments/:id/similarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__delete__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Deletes all similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__similarListings": {
              url: urlBase + "/submittedApartments/:id/similarListings",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$__count__similarListings
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Counts similarListings of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__similarListings": {
              url: urlBase + "/submittedApartments/:id/similarListings/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans() instead.
            "prototype$__get__floorPlans": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.create() instead.
            "prototype$__create__floorPlans": {
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.destroyAll() instead.
            "prototype$__delete__floorPlans": {
              url: urlBase + "/submittedApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.floorPlans.count() instead.
            "prototype$__count__floorPlans": {
              url: urlBase + "/submittedApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers() instead.
            "prototype$__get__likeUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.create() instead.
            "prototype$__create__likeUsers": {
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.destroyAll() instead.
            "prototype$__delete__likeUsers": {
              url: urlBase + "/submittedApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.likeUsers.count() instead.
            "prototype$__count__likeUsers": {
              url: urlBase + "/submittedApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers() instead.
            "prototype$__get__couponUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.create() instead.
            "prototype$__create__couponUsers": {
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.destroyAll() instead.
            "prototype$__delete__couponUsers": {
              url: urlBase + "/submittedApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.couponUsers.count() instead.
            "prototype$__count__couponUsers": {
              url: urlBase + "/submittedApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers() instead.
            "prototype$__get__visitUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.create() instead.
            "prototype$__create__visitUsers": {
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.destroyAll() instead.
            "prototype$__delete__visitUsers": {
              url: urlBase + "/submittedApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.visitUsers.count() instead.
            "prototype$__count__visitUsers": {
              url: urlBase + "/submittedApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers() instead.
            "prototype$__get__redirectUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.create() instead.
            "prototype$__create__redirectUsers": {
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.destroyAll() instead.
            "prototype$__delete__redirectUsers": {
              url: urlBase + "/submittedApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.redirectUsers.count() instead.
            "prototype$__count__redirectUsers": {
              url: urlBase + "/submittedApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags() instead.
            "prototype$__get__tags": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.tags.create() instead.
            "prototype$__create__tags": {
              url: urlBase + "/submittedApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.tags.destroyAll() instead.
            "prototype$__delete__tags": {
              url: urlBase + "/submittedApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.tags.count() instead.
            "prototype$__count__tags": {
              url: urlBase + "/submittedApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.universities() instead.
            "prototype$__get__universities": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.universities.create() instead.
            "prototype$__create__universities": {
              url: urlBase + "/submittedApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.universities.destroyAll() instead.
            "prototype$__delete__universities": {
              url: urlBase + "/submittedApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.universities.count() instead.
            "prototype$__count__universities": {
              url: urlBase + "/submittedApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers() instead.
            "prototype$__get__roommateUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.create() instead.
            "prototype$__create__roommateUsers": {
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.destroyAll() instead.
            "prototype$__delete__roommateUsers": {
              url: urlBase + "/submittedApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.roommateUsers.count() instead.
            "prototype$__count__roommateUsers": {
              url: urlBase + "/submittedApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers() instead.
            "prototype$__get__wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.create() instead.
            "prototype$__create__wishApartmentUsers": {
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.destroyAll() instead.
            "prototype$__delete__wishApartmentUsers": {
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use SubmittedApartment.wishApartmentUsers.count() instead.
            "prototype$__count__wishApartmentUsers": {
              url: urlBase + "/submittedApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#create
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/submittedApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#createMany
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/submittedApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#upsert
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/submittedApartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#replaceOrCreate
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/submittedApartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#upsertWithWhere
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/submittedApartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#exists
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/submittedApartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#findById
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/submittedApartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#replaceById
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/submittedApartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#find
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/submittedApartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#findOne
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/submittedApartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#updateAll
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/submittedApartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#deleteById
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/submittedApartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#count
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/submittedApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prototype$updateAttributes
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/submittedApartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#createChangeStream
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/submittedApartments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#getSubmittedApartmentByUser
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `userId` – `{string}` -
             *
             *  - `prospectiveApartmentId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `submittedApartment` – `{object=}` -
             */
            "getSubmittedApartmentByUser": {
              url: urlBase + "/submittedApartments/getSubmittedApartmentByUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#updateSubmittedApartmentByUser
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `userId` – `{string}` -
             *
             *  - `prospectiveApartmentId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `submittedApartment` – `{object=}` -
             */
            "updateSubmittedApartmentByUser": {
              url: urlBase + "/submittedApartments/updateSubmittedApartmentByUser",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#submittedApartmentToPublic
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `submittedApartmentId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `publicApartment` – `{object=}` -
             */
            "submittedApartmentToPublic": {
              url: urlBase + "/submittedApartments/submittedApartmentToPublic",
              method: "POST",
            },

            // INTERNAL. Use Apartment.submittedApartment() instead.
            "::get::Apartment::submittedApartment": {
              url: urlBase + "/apartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use CrawledApartment.submittedApartment() instead.
            "::get::CrawledApartment::submittedApartment": {
              url: urlBase + "/crawledApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use PendingApartment.submittedApartment() instead.
            "::get::PendingApartment::submittedApartment": {
              url: urlBase + "/pendingApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.submittedApartment() instead.
            "::get::SubmittedApartment::submittedApartment": {
              url: urlBase + "/submittedApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartment() instead.
            "::get::ProspectiveApartment::submittedApartment": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments() instead.
            "::get::ProspectiveApartment::submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.create() instead.
            "::create::ProspectiveApartment::submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.createMany() instead.
            "::createMany::ProspectiveApartment::submittedApartments": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.update() instead.
            "::update::ProspectiveApartment::submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.destroy() instead.
            "::destroy::ProspectiveApartment::submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#patchOrCreate
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#updateOrCreate
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#update
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#destroyById
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#removeById
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#patchAttributes
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.SubmittedApartment#modelName
        * @propertyOf housingApiServices.SubmittedApartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SubmittedApartment`.
        */
        R.modelName = "SubmittedApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.distance2City
     * @header housingApiServices.SubmittedApartment.distance2City
     * @object
     * @description
     *
     * The object `SubmittedApartment.distance2City` groups methods
     * manipulating `ApartmentCity` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#distance2City SubmittedApartment.distance2City()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#distance2City
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries distance2City of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::get::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#count
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Counts distance2City of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2City.count = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::count::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#create
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.create = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::create::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#createMany
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.createMany = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::createMany::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Deletes all distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::delete::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#destroyById
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Delete a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::destroyById::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#findById
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Find a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.findById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::findById::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2City#updateById
             * @methodOf housingApiServices.SubmittedApartment.distance2City
             *
             * @description
             *
             * Update a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.updateById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::updateById::SubmittedApartment::distance2City"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.distance2Campus
     * @header housingApiServices.SubmittedApartment.distance2Campus
     * @object
     * @description
     *
     * The object `SubmittedApartment.distance2Campus` groups methods
     * manipulating `ApartmentUniv` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#distance2Campus SubmittedApartment.distance2Campus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#distance2Campus
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries distance2Campus of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::get::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#count
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Counts distance2Campus of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2Campus.count = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::count::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#create
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.create = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::create::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#createMany
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.createMany = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::createMany::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Deletes all distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::delete::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#destroyById
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Delete a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::destroyById::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#findById
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Find a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.findById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::findById::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.distance2Campus#updateById
             * @methodOf housingApiServices.SubmittedApartment.distance2Campus
             *
             * @description
             *
             * Update a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.updateById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::updateById::SubmittedApartment::distance2Campus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.cities
     * @header housingApiServices.SubmittedApartment.cities
     * @object
     * @description
     *
     * The object `SubmittedApartment.cities` groups methods
     * manipulating `City` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#cities SubmittedApartment.cities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#cities
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries cities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::get::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#count
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Counts cities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.cities.count = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::count::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#create
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.create = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::create::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#createMany
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.createMany = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::createMany::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Deletes all cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyAll = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::delete::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#destroyById
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Delete a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::destroyById::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#exists
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Check the existence of cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.exists = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::exists::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#findById
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Find a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.findById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::findById::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#link
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Add a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.link = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::link::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#unlink
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Remove the cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.unlink = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::unlink::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.cities#updateById
             * @methodOf housingApiServices.SubmittedApartment.cities
             *
             * @description
             *
             * Update a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.updateById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::updateById::SubmittedApartment::cities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.features
     * @header housingApiServices.SubmittedApartment.features
     * @object
     * @description
     *
     * The object `SubmittedApartment.features` groups methods
     * manipulating `Feature` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#features SubmittedApartment.features()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#features
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries features of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::get::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#count
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Counts features of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.features.count = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::count::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#create
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.create = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::create::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#createMany
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.createMany = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::createMany::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Deletes all features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyAll = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::delete::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#destroyById
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Delete a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::destroyById::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#exists
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Check the existence of features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.exists = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::exists::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#findById
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Find a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.findById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::findById::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#link
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Add a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.link = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::link::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#unlink
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Remove the features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.unlink = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::unlink::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.features#updateById
             * @methodOf housingApiServices.SubmittedApartment.features
             *
             * @description
             *
             * Update a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.updateById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::updateById::SubmittedApartment::features"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.amenities
     * @header housingApiServices.SubmittedApartment.amenities
     * @object
     * @description
     *
     * The object `SubmittedApartment.amenities` groups methods
     * manipulating `Amenity` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#amenities SubmittedApartment.amenities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#amenities
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries amenities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::get::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#count
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Counts amenities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.amenities.count = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::count::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#create
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.create = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::create::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#createMany
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.createMany = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::createMany::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Deletes all amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyAll = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::delete::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#destroyById
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Delete a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::destroyById::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#exists
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Check the existence of amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.exists = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::exists::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#findById
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Find a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.findById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::findById::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#link
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Add a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.link = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::link::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#unlink
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Remove the amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.unlink = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::unlink::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.amenities#updateById
             * @methodOf housingApiServices.SubmittedApartment.amenities
             *
             * @description
             *
             * Update a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.updateById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::updateById::SubmittedApartment::amenities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.utilities
     * @header housingApiServices.SubmittedApartment.utilities
     * @object
     * @description
     *
     * The object `SubmittedApartment.utilities` groups methods
     * manipulating `Utility` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#utilities SubmittedApartment.utilities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#utilities
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries utilities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::get::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#count
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Counts utilities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.utilities.count = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::count::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#create
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.create = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::create::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#createMany
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.createMany = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::createMany::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Deletes all utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyAll = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::delete::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#destroyById
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Delete a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::destroyById::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#exists
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Check the existence of utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.exists = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::exists::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#findById
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Find a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.findById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::findById::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#link
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Add a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.link = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::link::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#unlink
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Remove the utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.unlink = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::unlink::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.utilities#updateById
             * @methodOf housingApiServices.SubmittedApartment.utilities
             *
             * @description
             *
             * Update a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.updateById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::updateById::SubmittedApartment::utilities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.safeties
     * @header housingApiServices.SubmittedApartment.safeties
     * @object
     * @description
     *
     * The object `SubmittedApartment.safeties` groups methods
     * manipulating `Safety` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#safeties SubmittedApartment.safeties()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#safeties
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries safeties of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::get::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#count
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Counts safeties of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.safeties.count = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::count::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#create
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.create = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::create::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#createMany
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.createMany = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::createMany::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Deletes all safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyAll = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::delete::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#destroyById
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Delete a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::destroyById::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#exists
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Check the existence of safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.exists = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::exists::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#findById
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Find a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.findById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::findById::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#link
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Add a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.link = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::link::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#unlink
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Remove the safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.unlink = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::unlink::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.safeties#updateById
             * @methodOf housingApiServices.SubmittedApartment.safeties
             *
             * @description
             *
             * Update a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.updateById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::updateById::SubmittedApartment::safeties"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.floorPlans
     * @header housingApiServices.SubmittedApartment.floorPlans
     * @object
     * @description
     *
     * The object `SubmittedApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#floorPlans SubmittedApartment.floorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#floorPlans
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries floorPlans of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#count
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Counts floorPlans of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#create
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#createMany
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Deletes all floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#destroyById
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Delete a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#findById
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Find a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.floorPlans#updateById
             * @methodOf housingApiServices.SubmittedApartment.floorPlans
             *
             * @description
             *
             * Update a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::SubmittedApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.likeUsers
     * @header housingApiServices.SubmittedApartment.likeUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.likeUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#likeUsers SubmittedApartment.likeUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#likeUsers
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries likeUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#count
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Counts likeUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#create
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#createMany
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Deletes all likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#destroyById
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Delete a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#exists
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Check the existence of likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#findById
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Find a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#link
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Add a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#unlink
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Remove the likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.likeUsers#updateById
             * @methodOf housingApiServices.SubmittedApartment.likeUsers
             *
             * @description
             *
             * Update a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::SubmittedApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.couponUsers
     * @header housingApiServices.SubmittedApartment.couponUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.couponUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#couponUsers SubmittedApartment.couponUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#couponUsers
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries couponUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#count
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Counts couponUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#create
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#createMany
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Deletes all couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#destroyById
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Delete a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#exists
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Check the existence of couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#findById
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Find a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#link
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Add a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#unlink
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Remove the couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.couponUsers#updateById
             * @methodOf housingApiServices.SubmittedApartment.couponUsers
             *
             * @description
             *
             * Update a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::SubmittedApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.visitUsers
     * @header housingApiServices.SubmittedApartment.visitUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.visitUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#visitUsers SubmittedApartment.visitUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#visitUsers
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries visitUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#count
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Counts visitUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#create
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#createMany
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Deletes all visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#destroyById
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Delete a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#exists
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Check the existence of visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#findById
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Find a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#link
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Add a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#unlink
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Remove the visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.visitUsers#updateById
             * @methodOf housingApiServices.SubmittedApartment.visitUsers
             *
             * @description
             *
             * Update a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::SubmittedApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.redirectUsers
     * @header housingApiServices.SubmittedApartment.redirectUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#redirectUsers SubmittedApartment.redirectUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#redirectUsers
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries redirectUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#count
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Counts redirectUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#create
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#createMany
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Deletes all redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#destroyById
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Delete a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#exists
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Check the existence of redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#findById
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Find a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#link
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Add a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#unlink
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Remove the redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.redirectUsers#updateById
             * @methodOf housingApiServices.SubmittedApartment.redirectUsers
             *
             * @description
             *
             * Update a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::SubmittedApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#submittedApartment
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Fetches belongsTo relation submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartment = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::get::SubmittedApartment::submittedApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.tags
     * @header housingApiServices.SubmittedApartment.tags
     * @object
     * @description
     *
     * The object `SubmittedApartment.tags` groups methods
     * manipulating `Tag` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#tags SubmittedApartment.tags()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#tags
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries tags of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#count
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Counts tags of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#create
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#createMany
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Deletes all tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#destroyById
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Delete a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#exists
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Check the existence of tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#findById
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Find a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#link
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Add a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#unlink
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Remove the tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.tags#updateById
             * @methodOf housingApiServices.SubmittedApartment.tags
             *
             * @description
             *
             * Update a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::SubmittedApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.universities
     * @header housingApiServices.SubmittedApartment.universities
     * @object
     * @description
     *
     * The object `SubmittedApartment.universities` groups methods
     * manipulating `University` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#universities SubmittedApartment.universities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#universities
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries universities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#count
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Counts universities of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#create
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#createMany
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Deletes all universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#destroyById
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Delete a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#exists
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Check the existence of universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#findById
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Find a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#link
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Add a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#unlink
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Remove the universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.universities#updateById
             * @methodOf housingApiServices.SubmittedApartment.universities
             *
             * @description
             *
             * Update a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::SubmittedApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#prospectiveApartment
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Fetches belongsTo relation prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R.prospectiveApartment = function() {
          var TargetResource = $injector.get("ProspectiveApartment");
          var action = TargetResource["::get::SubmittedApartment::prospectiveApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.roommateUsers
     * @header housingApiServices.SubmittedApartment.roommateUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#roommateUsers SubmittedApartment.roommateUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#roommateUsers
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries roommateUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#count
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Counts roommateUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#create
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#createMany
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Deletes all roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#destroyById
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Delete a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#exists
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Check the existence of roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#findById
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Find a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#link
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Add a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#unlink
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Remove the roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.roommateUsers#updateById
             * @methodOf housingApiServices.SubmittedApartment.roommateUsers
             *
             * @description
             *
             * Update a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::SubmittedApartment::roommateUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.SubmittedApartment.wishApartmentUsers
     * @header housingApiServices.SubmittedApartment.wishApartmentUsers
     * @object
     * @description
     *
     * The object `SubmittedApartment.wishApartmentUsers` groups methods
     * manipulating `User` instances related to `SubmittedApartment`.
     *
     * Call {@link housingApiServices.SubmittedApartment#wishApartmentUsers SubmittedApartment.wishApartmentUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment#wishApartmentUsers
             * @methodOf housingApiServices.SubmittedApartment
             *
             * @description
             *
             * Queries wishApartmentUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#count
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Counts wishApartmentUsers of submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishApartmentUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#create
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#createMany
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#destroyAll
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Deletes all wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#destroyById
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Delete a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#exists
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Check the existence of wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#findById
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Find a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#link
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Add a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#unlink
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Remove the wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.SubmittedApartment.wishApartmentUsers#updateById
             * @methodOf housingApiServices.SubmittedApartment.wishApartmentUsers
             *
             * @description
             *
             * Update a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - submittedApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::SubmittedApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.ProspectiveApartment
 * @header housingApiServices.ProspectiveApartment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ProspectiveApartment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ProspectiveApartment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/prospectiveApartments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ProspectiveApartment.distance2City.findById() instead.
            "prototype$__findById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2City/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.destroyById() instead.
            "prototype$__destroyById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2City/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.updateById() instead.
            "prototype$__updateById__distance2City": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2City/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.findById() instead.
            "prototype$__findById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.destroyById() instead.
            "prototype$__destroyById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.updateById() instead.
            "prototype$__updateById__distance2Campus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.cities.findById() instead.
            "prototype$__findById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.cities.destroyById() instead.
            "prototype$__destroyById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.cities.updateById() instead.
            "prototype$__updateById__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.cities.link() instead.
            "prototype$__link__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.cities.unlink() instead.
            "prototype$__unlink__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.cities.exists() instead.
            "prototype$__exists__cities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/cities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.features.findById() instead.
            "prototype$__findById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.features.destroyById() instead.
            "prototype$__destroyById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.features.updateById() instead.
            "prototype$__updateById__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.features.link() instead.
            "prototype$__link__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.features.unlink() instead.
            "prototype$__unlink__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.features.exists() instead.
            "prototype$__exists__features": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/features/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.findById() instead.
            "prototype$__findById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.destroyById() instead.
            "prototype$__destroyById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.updateById() instead.
            "prototype$__updateById__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.link() instead.
            "prototype$__link__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.unlink() instead.
            "prototype$__unlink__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.exists() instead.
            "prototype$__exists__amenities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/amenities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.findById() instead.
            "prototype$__findById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.destroyById() instead.
            "prototype$__destroyById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.updateById() instead.
            "prototype$__updateById__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.link() instead.
            "prototype$__link__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.unlink() instead.
            "prototype$__unlink__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.exists() instead.
            "prototype$__exists__utilities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/utilities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.findById() instead.
            "prototype$__findById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.destroyById() instead.
            "prototype$__destroyById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.updateById() instead.
            "prototype$__updateById__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.link() instead.
            "prototype$__link__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.unlink() instead.
            "prototype$__unlink__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.exists() instead.
            "prototype$__exists__safeties": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/safeties/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__findById__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Find a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$__findById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/similarListings/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__destroyById__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Delete a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/similarListings/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__updateById__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Update a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$__updateById__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/similarListings/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__link__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Add a related item by id for similarListings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$__link__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/similarListings/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__unlink__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Remove the similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/similarListings/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__exists__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Check the existence of similarListings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for similarListings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$__exists__similarListings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/similarListings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.findById() instead.
            "prototype$__findById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.destroyById() instead.
            "prototype$__destroyById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.updateById() instead.
            "prototype$__updateById__floorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/floorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.findById() instead.
            "prototype$__findById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.destroyById() instead.
            "prototype$__destroyById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.updateById() instead.
            "prototype$__updateById__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.link() instead.
            "prototype$__link__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.unlink() instead.
            "prototype$__unlink__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.exists() instead.
            "prototype$__exists__likeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/likeUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.findById() instead.
            "prototype$__findById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.destroyById() instead.
            "prototype$__destroyById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.updateById() instead.
            "prototype$__updateById__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.link() instead.
            "prototype$__link__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.unlink() instead.
            "prototype$__unlink__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.exists() instead.
            "prototype$__exists__couponUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/couponUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.findById() instead.
            "prototype$__findById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.destroyById() instead.
            "prototype$__destroyById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.updateById() instead.
            "prototype$__updateById__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.link() instead.
            "prototype$__link__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.unlink() instead.
            "prototype$__unlink__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.exists() instead.
            "prototype$__exists__visitUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/visitUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.findById() instead.
            "prototype$__findById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyById() instead.
            "prototype$__destroyById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.updateById() instead.
            "prototype$__updateById__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.link() instead.
            "prototype$__link__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.unlink() instead.
            "prototype$__unlink__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.exists() instead.
            "prototype$__exists__redirectUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartment() instead.
            "prototype$__get__submittedApartment": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartment",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments() instead.
            "prototype$__get__submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.create() instead.
            "prototype$__create__submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.update() instead.
            "prototype$__update__submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.submittedApartments.destroy() instead.
            "prototype$__destroy__submittedApartments": {
              url: urlBase + "/prospectiveApartments/:id/submittedApartments",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.findById() instead.
            "prototype$__findById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.tags.destroyById() instead.
            "prototype$__destroyById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.updateById() instead.
            "prototype$__updateById__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.tags.link() instead.
            "prototype$__link__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.tags.unlink() instead.
            "prototype$__unlink__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.exists() instead.
            "prototype$__exists__tags": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/tags/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.universities.findById() instead.
            "prototype$__findById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.universities.destroyById() instead.
            "prototype$__destroyById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.universities.updateById() instead.
            "prototype$__updateById__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.universities.link() instead.
            "prototype$__link__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.universities.unlink() instead.
            "prototype$__unlink__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.universities.exists() instead.
            "prototype$__exists__universities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/universities/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.findById() instead.
            "prototype$__findById__manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.destroyById() instead.
            "prototype$__destroyById__manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.updateById() instead.
            "prototype$__updateById__manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.link() instead.
            "prototype$__link__manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.unlink() instead.
            "prototype$__unlink__manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.exists() instead.
            "prototype$__exists__manageUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/manageUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.findById() instead.
            "prototype$__findById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyById() instead.
            "prototype$__destroyById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.updateById() instead.
            "prototype$__updateById__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.link() instead.
            "prototype$__link__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.unlink() instead.
            "prototype$__unlink__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.exists() instead.
            "prototype$__exists__roommateUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.findById() instead.
            "prototype$__findById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/:fk",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.destroyById() instead.
            "prototype$__destroyById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.updateById() instead.
            "prototype$__updateById__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.link() instead.
            "prototype$__link__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.unlink() instead.
            "prototype$__unlink__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.exists() instead.
            "prototype$__exists__wishApartmentUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City() instead.
            "prototype$__get__distance2City": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.create() instead.
            "prototype$__create__distance2City": {
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.destroyAll() instead.
            "prototype$__delete__distance2City": {
              url: urlBase + "/prospectiveApartments/:id/distance2City",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2City.count() instead.
            "prototype$__count__distance2City": {
              url: urlBase + "/prospectiveApartments/:id/distance2City/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus() instead.
            "prototype$__get__distance2Campus": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.create() instead.
            "prototype$__create__distance2Campus": {
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.destroyAll() instead.
            "prototype$__delete__distance2Campus": {
              url: urlBase + "/prospectiveApartments/:id/distance2Campus",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.distance2Campus.count() instead.
            "prototype$__count__distance2Campus": {
              url: urlBase + "/prospectiveApartments/:id/distance2Campus/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.cities() instead.
            "prototype$__get__cities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.cities.create() instead.
            "prototype$__create__cities": {
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.cities.destroyAll() instead.
            "prototype$__delete__cities": {
              url: urlBase + "/prospectiveApartments/:id/cities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.cities.count() instead.
            "prototype$__count__cities": {
              url: urlBase + "/prospectiveApartments/:id/cities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.features() instead.
            "prototype$__get__features": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.features.create() instead.
            "prototype$__create__features": {
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.features.destroyAll() instead.
            "prototype$__delete__features": {
              url: urlBase + "/prospectiveApartments/:id/features",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.features.count() instead.
            "prototype$__count__features": {
              url: urlBase + "/prospectiveApartments/:id/features/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.amenities() instead.
            "prototype$__get__amenities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.create() instead.
            "prototype$__create__amenities": {
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.destroyAll() instead.
            "prototype$__delete__amenities": {
              url: urlBase + "/prospectiveApartments/:id/amenities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.amenities.count() instead.
            "prototype$__count__amenities": {
              url: urlBase + "/prospectiveApartments/:id/amenities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.utilities() instead.
            "prototype$__get__utilities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.create() instead.
            "prototype$__create__utilities": {
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.destroyAll() instead.
            "prototype$__delete__utilities": {
              url: urlBase + "/prospectiveApartments/:id/utilities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.utilities.count() instead.
            "prototype$__count__utilities": {
              url: urlBase + "/prospectiveApartments/:id/utilities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.safeties() instead.
            "prototype$__get__safeties": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.create() instead.
            "prototype$__create__safeties": {
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.destroyAll() instead.
            "prototype$__delete__safeties": {
              url: urlBase + "/prospectiveApartments/:id/safeties",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.safeties.count() instead.
            "prototype$__count__safeties": {
              url: urlBase + "/prospectiveApartments/:id/safeties/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__get__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries similarListings of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$__get__similarListings": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/similarListings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__create__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Creates a new instance in similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$__create__similarListings": {
              url: urlBase + "/prospectiveApartments/:id/similarListings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__delete__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Deletes all similarListings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__similarListings": {
              url: urlBase + "/prospectiveApartments/:id/similarListings",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$__count__similarListings
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Counts similarListings of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__similarListings": {
              url: urlBase + "/prospectiveApartments/:id/similarListings/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans() instead.
            "prototype$__get__floorPlans": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.create() instead.
            "prototype$__create__floorPlans": {
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.destroyAll() instead.
            "prototype$__delete__floorPlans": {
              url: urlBase + "/prospectiveApartments/:id/floorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.floorPlans.count() instead.
            "prototype$__count__floorPlans": {
              url: urlBase + "/prospectiveApartments/:id/floorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers() instead.
            "prototype$__get__likeUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.create() instead.
            "prototype$__create__likeUsers": {
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.destroyAll() instead.
            "prototype$__delete__likeUsers": {
              url: urlBase + "/prospectiveApartments/:id/likeUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.likeUsers.count() instead.
            "prototype$__count__likeUsers": {
              url: urlBase + "/prospectiveApartments/:id/likeUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers() instead.
            "prototype$__get__couponUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.create() instead.
            "prototype$__create__couponUsers": {
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.destroyAll() instead.
            "prototype$__delete__couponUsers": {
              url: urlBase + "/prospectiveApartments/:id/couponUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.couponUsers.count() instead.
            "prototype$__count__couponUsers": {
              url: urlBase + "/prospectiveApartments/:id/couponUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers() instead.
            "prototype$__get__visitUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.create() instead.
            "prototype$__create__visitUsers": {
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.destroyAll() instead.
            "prototype$__delete__visitUsers": {
              url: urlBase + "/prospectiveApartments/:id/visitUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.visitUsers.count() instead.
            "prototype$__count__visitUsers": {
              url: urlBase + "/prospectiveApartments/:id/visitUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers() instead.
            "prototype$__get__redirectUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.create() instead.
            "prototype$__create__redirectUsers": {
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.destroyAll() instead.
            "prototype$__delete__redirectUsers": {
              url: urlBase + "/prospectiveApartments/:id/redirectUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.redirectUsers.count() instead.
            "prototype$__count__redirectUsers": {
              url: urlBase + "/prospectiveApartments/:id/redirectUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.tags() instead.
            "prototype$__get__tags": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.tags.create() instead.
            "prototype$__create__tags": {
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.tags.destroyAll() instead.
            "prototype$__delete__tags": {
              url: urlBase + "/prospectiveApartments/:id/tags",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.tags.count() instead.
            "prototype$__count__tags": {
              url: urlBase + "/prospectiveApartments/:id/tags/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.universities() instead.
            "prototype$__get__universities": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.universities.create() instead.
            "prototype$__create__universities": {
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.universities.destroyAll() instead.
            "prototype$__delete__universities": {
              url: urlBase + "/prospectiveApartments/:id/universities",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.universities.count() instead.
            "prototype$__count__universities": {
              url: urlBase + "/prospectiveApartments/:id/universities/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers() instead.
            "prototype$__get__manageUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.create() instead.
            "prototype$__create__manageUsers": {
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.destroyAll() instead.
            "prototype$__delete__manageUsers": {
              url: urlBase + "/prospectiveApartments/:id/manageUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.manageUsers.count() instead.
            "prototype$__count__manageUsers": {
              url: urlBase + "/prospectiveApartments/:id/manageUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers() instead.
            "prototype$__get__roommateUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.create() instead.
            "prototype$__create__roommateUsers": {
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.destroyAll() instead.
            "prototype$__delete__roommateUsers": {
              url: urlBase + "/prospectiveApartments/:id/roommateUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.roommateUsers.count() instead.
            "prototype$__count__roommateUsers": {
              url: urlBase + "/prospectiveApartments/:id/roommateUsers/count",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers() instead.
            "prototype$__get__wishApartmentUsers": {
              isArray: true,
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "GET",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.create() instead.
            "prototype$__create__wishApartmentUsers": {
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "POST",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.destroyAll() instead.
            "prototype$__delete__wishApartmentUsers": {
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers",
              method: "DELETE",
            },

            // INTERNAL. Use ProspectiveApartment.wishApartmentUsers.count() instead.
            "prototype$__count__wishApartmentUsers": {
              url: urlBase + "/prospectiveApartments/:id/wishApartmentUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#create
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/prospectiveApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#createMany
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/prospectiveApartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#upsert
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/prospectiveApartments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#replaceOrCreate
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/prospectiveApartments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#upsertWithWhere
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/prospectiveApartments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#exists
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/prospectiveApartments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#findById
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/prospectiveApartments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#replaceById
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/prospectiveApartments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#find
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/prospectiveApartments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#findOne
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/prospectiveApartments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#updateAll
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/prospectiveApartments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#deleteById
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/prospectiveApartments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#count
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/prospectiveApartments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#prototype$updateAttributes
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/prospectiveApartments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#createChangeStream
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/prospectiveApartments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#sendEmail
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `to` – `{string}` - email to
             *
             *  - `html` – `{string}` - email html
             *
             *  - `subject` – `{string}` - email subject
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "sendEmail": {
              url: urlBase + "/prospectiveApartments/send-email",
              method: "POST",
            },

            // INTERNAL. Use User.manageProspectiveApartments.findById() instead.
            "::findById::User::manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.manageProspectiveApartments.destroyById() instead.
            "::destroyById::User::manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.manageProspectiveApartments.updateById() instead.
            "::updateById::User::manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.manageProspectiveApartments.link() instead.
            "::link::User::manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.manageProspectiveApartments.unlink() instead.
            "::unlink::User::manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.manageProspectiveApartments.exists() instead.
            "::exists::User::manageProspectiveApartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/manageProspectiveApartments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.manageProspectiveApartments() instead.
            "::get::User::manageProspectiveApartments": {
              isArray: true,
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "GET",
            },

            // INTERNAL. Use User.manageProspectiveApartments.create() instead.
            "::create::User::manageProspectiveApartments": {
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "POST",
            },

            // INTERNAL. Use User.manageProspectiveApartments.createMany() instead.
            "::createMany::User::manageProspectiveApartments": {
              isArray: true,
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "POST",
            },

            // INTERNAL. Use User.manageProspectiveApartments.destroyAll() instead.
            "::delete::User::manageProspectiveApartments": {
              url: urlBase + "/users/:id/manageProspectiveApartments",
              method: "DELETE",
            },

            // INTERNAL. Use User.manageProspectiveApartments.count() instead.
            "::count::User::manageProspectiveApartments": {
              url: urlBase + "/users/:id/manageProspectiveApartments/count",
              method: "GET",
            },

            // INTERNAL. Use SubmittedApartment.prospectiveApartment() instead.
            "::get::SubmittedApartment::prospectiveApartment": {
              url: urlBase + "/submittedApartments/:id/prospectiveApartment",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#patchOrCreate
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#updateOrCreate
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#patchOrCreateWithWhere
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#update
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#destroyById
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#removeById
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#patchAttributes
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ProspectiveApartment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.ProspectiveApartment#modelName
        * @propertyOf housingApiServices.ProspectiveApartment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ProspectiveApartment`.
        */
        R.modelName = "ProspectiveApartment";

    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.distance2City
     * @header housingApiServices.ProspectiveApartment.distance2City
     * @object
     * @description
     *
     * The object `ProspectiveApartment.distance2City` groups methods
     * manipulating `ApartmentCity` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#distance2City ProspectiveApartment.distance2City()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#distance2City
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries distance2City of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::get::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#count
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Counts distance2City of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2City.count = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::count::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#create
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.create = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::create::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#createMany
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Creates a new instance in distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.createMany = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::createMany::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Deletes all distance2City of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::delete::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Delete a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2City.destroyById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::destroyById::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#findById
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Find a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.findById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::findById::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2City#updateById
             * @methodOf housingApiServices.ProspectiveApartment.distance2City
             *
             * @description
             *
             * Update a related item by id for distance2City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2City
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentCity` object.)
             * </em>
             */
        R.distance2City.updateById = function() {
          var TargetResource = $injector.get("ApartmentCity");
          var action = TargetResource["::updateById::ProspectiveApartment::distance2City"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.distance2Campus
     * @header housingApiServices.ProspectiveApartment.distance2Campus
     * @object
     * @description
     *
     * The object `ProspectiveApartment.distance2Campus` groups methods
     * manipulating `ApartmentUniv` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#distance2Campus ProspectiveApartment.distance2Campus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#distance2Campus
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries distance2Campus of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::get::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#count
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Counts distance2Campus of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.distance2Campus.count = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::count::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#create
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.create = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::create::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#createMany
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Creates a new instance in distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.createMany = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::createMany::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Deletes all distance2Campus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyAll = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::delete::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Delete a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.distance2Campus.destroyById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::destroyById::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#findById
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Find a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.findById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::findById::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.distance2Campus#updateById
             * @methodOf housingApiServices.ProspectiveApartment.distance2Campus
             *
             * @description
             *
             * Update a related item by id for distance2Campus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for distance2Campus
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApartmentUniv` object.)
             * </em>
             */
        R.distance2Campus.updateById = function() {
          var TargetResource = $injector.get("ApartmentUniv");
          var action = TargetResource["::updateById::ProspectiveApartment::distance2Campus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.cities
     * @header housingApiServices.ProspectiveApartment.cities
     * @object
     * @description
     *
     * The object `ProspectiveApartment.cities` groups methods
     * manipulating `City` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#cities ProspectiveApartment.cities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#cities
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries cities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::get::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#count
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Counts cities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.cities.count = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::count::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#create
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.create = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::create::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#createMany
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Creates a new instance in cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.createMany = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::createMany::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Deletes all cities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyAll = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::delete::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Delete a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.destroyById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::destroyById::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#exists
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Check the existence of cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.exists = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::exists::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#findById
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Find a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.findById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::findById::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#link
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Add a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.link = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::link::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#unlink
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Remove the cities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.cities.unlink = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::unlink::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.cities#updateById
             * @methodOf housingApiServices.ProspectiveApartment.cities
             *
             * @description
             *
             * Update a related item by id for cities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for cities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R.cities.updateById = function() {
          var TargetResource = $injector.get("City");
          var action = TargetResource["::updateById::ProspectiveApartment::cities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.features
     * @header housingApiServices.ProspectiveApartment.features
     * @object
     * @description
     *
     * The object `ProspectiveApartment.features` groups methods
     * manipulating `Feature` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#features ProspectiveApartment.features()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#features
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries features of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::get::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#count
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Counts features of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.features.count = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::count::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#create
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.create = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::create::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#createMany
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Creates a new instance in features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.createMany = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::createMany::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Deletes all features of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyAll = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::delete::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Delete a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.destroyById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::destroyById::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#exists
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Check the existence of features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.exists = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::exists::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#findById
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Find a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.findById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::findById::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#link
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Add a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.link = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::link::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#unlink
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Remove the features relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.features.unlink = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::unlink::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.features#updateById
             * @methodOf housingApiServices.ProspectiveApartment.features
             *
             * @description
             *
             * Update a related item by id for features.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for features
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Feature` object.)
             * </em>
             */
        R.features.updateById = function() {
          var TargetResource = $injector.get("Feature");
          var action = TargetResource["::updateById::ProspectiveApartment::features"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.amenities
     * @header housingApiServices.ProspectiveApartment.amenities
     * @object
     * @description
     *
     * The object `ProspectiveApartment.amenities` groups methods
     * manipulating `Amenity` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#amenities ProspectiveApartment.amenities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#amenities
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries amenities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::get::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#count
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Counts amenities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.amenities.count = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::count::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#create
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.create = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::create::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#createMany
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Creates a new instance in amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.createMany = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::createMany::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Deletes all amenities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyAll = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::delete::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Delete a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.destroyById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::destroyById::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#exists
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Check the existence of amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.exists = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::exists::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#findById
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Find a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.findById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::findById::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#link
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Add a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.link = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::link::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#unlink
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Remove the amenities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.amenities.unlink = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::unlink::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.amenities#updateById
             * @methodOf housingApiServices.ProspectiveApartment.amenities
             *
             * @description
             *
             * Update a related item by id for amenities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for amenities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Amenity` object.)
             * </em>
             */
        R.amenities.updateById = function() {
          var TargetResource = $injector.get("Amenity");
          var action = TargetResource["::updateById::ProspectiveApartment::amenities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.utilities
     * @header housingApiServices.ProspectiveApartment.utilities
     * @object
     * @description
     *
     * The object `ProspectiveApartment.utilities` groups methods
     * manipulating `Utility` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#utilities ProspectiveApartment.utilities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#utilities
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries utilities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::get::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#count
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Counts utilities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.utilities.count = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::count::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#create
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.create = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::create::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#createMany
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Creates a new instance in utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.createMany = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::createMany::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Deletes all utilities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyAll = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::delete::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Delete a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.destroyById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::destroyById::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#exists
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Check the existence of utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.exists = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::exists::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#findById
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Find a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.findById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::findById::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#link
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Add a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.link = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::link::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#unlink
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Remove the utilities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.utilities.unlink = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::unlink::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.utilities#updateById
             * @methodOf housingApiServices.ProspectiveApartment.utilities
             *
             * @description
             *
             * Update a related item by id for utilities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for utilities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Utility` object.)
             * </em>
             */
        R.utilities.updateById = function() {
          var TargetResource = $injector.get("Utility");
          var action = TargetResource["::updateById::ProspectiveApartment::utilities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.safeties
     * @header housingApiServices.ProspectiveApartment.safeties
     * @object
     * @description
     *
     * The object `ProspectiveApartment.safeties` groups methods
     * manipulating `Safety` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#safeties ProspectiveApartment.safeties()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#safeties
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries safeties of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::get::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#count
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Counts safeties of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.safeties.count = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::count::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#create
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.create = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::create::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#createMany
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Creates a new instance in safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.createMany = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::createMany::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Deletes all safeties of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyAll = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::delete::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Delete a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.destroyById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::destroyById::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#exists
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Check the existence of safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.exists = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::exists::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#findById
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Find a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.findById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::findById::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#link
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Add a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.link = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::link::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#unlink
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Remove the safeties relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.safeties.unlink = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::unlink::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.safeties#updateById
             * @methodOf housingApiServices.ProspectiveApartment.safeties
             *
             * @description
             *
             * Update a related item by id for safeties.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for safeties
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Safety` object.)
             * </em>
             */
        R.safeties.updateById = function() {
          var TargetResource = $injector.get("Safety");
          var action = TargetResource["::updateById::ProspectiveApartment::safeties"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.floorPlans
     * @header housingApiServices.ProspectiveApartment.floorPlans
     * @object
     * @description
     *
     * The object `ProspectiveApartment.floorPlans` groups methods
     * manipulating `FloorPlan` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#floorPlans ProspectiveApartment.floorPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#floorPlans
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries floorPlans of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#count
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Counts floorPlans of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.floorPlans.count = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::count::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#create
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.create = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::create::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#createMany
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Creates a new instance in floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.createMany = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::createMany::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Deletes all floorPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyAll = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::delete::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Delete a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.floorPlans.destroyById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::destroyById::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#findById
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Find a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.findById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::findById::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.floorPlans#updateById
             * @methodOf housingApiServices.ProspectiveApartment.floorPlans
             *
             * @description
             *
             * Update a related item by id for floorPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for floorPlans
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlans.updateById = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::updateById::ProspectiveApartment::floorPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.likeUsers
     * @header housingApiServices.ProspectiveApartment.likeUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.likeUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#likeUsers ProspectiveApartment.likeUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#likeUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries likeUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Counts likeUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Creates a new instance in likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Deletes all likeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Delete a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Check the existence of likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Find a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Add a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Remove the likeUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.likeUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.likeUsers
             *
             * @description
             *
             * Update a related item by id for likeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for likeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.likeUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::likeUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.couponUsers
     * @header housingApiServices.ProspectiveApartment.couponUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.couponUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#couponUsers ProspectiveApartment.couponUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#couponUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries couponUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Counts couponUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.couponUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Creates a new instance in couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Deletes all couponUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Delete a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Check the existence of couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Find a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Add a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Remove the couponUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.couponUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.couponUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.couponUsers
             *
             * @description
             *
             * Update a related item by id for couponUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for couponUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.couponUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::couponUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.visitUsers
     * @header housingApiServices.ProspectiveApartment.visitUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.visitUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#visitUsers ProspectiveApartment.visitUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#visitUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries visitUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Counts visitUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.visitUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Creates a new instance in visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Deletes all visitUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Delete a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Check the existence of visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Find a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Add a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Remove the visitUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.visitUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.visitUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.visitUsers
             *
             * @description
             *
             * Update a related item by id for visitUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for visitUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.visitUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::visitUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.redirectUsers
     * @header housingApiServices.ProspectiveApartment.redirectUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.redirectUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#redirectUsers ProspectiveApartment.redirectUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#redirectUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries redirectUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Counts redirectUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.redirectUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Creates a new instance in redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Deletes all redirectUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Delete a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Check the existence of redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Find a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Add a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Remove the redirectUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.redirectUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.redirectUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.redirectUsers
             *
             * @description
             *
             * Update a related item by id for redirectUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for redirectUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.redirectUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::redirectUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#submittedApartment
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Fetches belongsTo relation submittedApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartment = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::get::ProspectiveApartment::submittedApartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.submittedApartments
     * @header housingApiServices.ProspectiveApartment.submittedApartments
     * @object
     * @description
     *
     * The object `ProspectiveApartment.submittedApartments` groups methods
     * manipulating `SubmittedApartment` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#submittedApartments ProspectiveApartment.submittedApartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#submittedApartments
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Fetches hasOne relation submittedApartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartments = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::get::ProspectiveApartment::submittedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.submittedApartments#create
             * @methodOf housingApiServices.ProspectiveApartment.submittedApartments
             *
             * @description
             *
             * Creates a new instance in submittedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartments.create = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::create::ProspectiveApartment::submittedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.submittedApartments#createMany
             * @methodOf housingApiServices.ProspectiveApartment.submittedApartments
             *
             * @description
             *
             * Creates a new instance in submittedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartments.createMany = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::createMany::ProspectiveApartment::submittedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.submittedApartments#destroy
             * @methodOf housingApiServices.ProspectiveApartment.submittedApartments
             *
             * @description
             *
             * Deletes submittedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.submittedApartments.destroy = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::destroy::ProspectiveApartment::submittedApartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.submittedApartments#update
             * @methodOf housingApiServices.ProspectiveApartment.submittedApartments
             *
             * @description
             *
             * Update submittedApartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubmittedApartment` object.)
             * </em>
             */
        R.submittedApartments.update = function() {
          var TargetResource = $injector.get("SubmittedApartment");
          var action = TargetResource["::update::ProspectiveApartment::submittedApartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.tags
     * @header housingApiServices.ProspectiveApartment.tags
     * @object
     * @description
     *
     * The object `ProspectiveApartment.tags` groups methods
     * manipulating `Tag` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#tags ProspectiveApartment.tags()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#tags
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries tags of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#count
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Counts tags of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#create
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#createMany
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Creates a new instance in tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Deletes all tags of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Delete a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#exists
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Check the existence of tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#findById
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Find a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#link
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Add a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#unlink
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Remove the tags relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.tags#updateById
             * @methodOf housingApiServices.ProspectiveApartment.tags
             *
             * @description
             *
             * Update a related item by id for tags.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for tags
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::ProspectiveApartment::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.universities
     * @header housingApiServices.ProspectiveApartment.universities
     * @object
     * @description
     *
     * The object `ProspectiveApartment.universities` groups methods
     * manipulating `University` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#universities ProspectiveApartment.universities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#universities
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries universities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::get::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#count
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Counts universities of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.universities.count = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::count::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#create
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.create = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::create::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#createMany
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Creates a new instance in universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.createMany = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::createMany::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Deletes all universities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyAll = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::delete::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Delete a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.destroyById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::destroyById::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#exists
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Check the existence of universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.exists = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::exists::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#findById
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Find a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.findById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::findById::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#link
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Add a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.link = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::link::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#unlink
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Remove the universities relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.universities.unlink = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::unlink::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.universities#updateById
             * @methodOf housingApiServices.ProspectiveApartment.universities
             *
             * @description
             *
             * Update a related item by id for universities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for universities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `University` object.)
             * </em>
             */
        R.universities.updateById = function() {
          var TargetResource = $injector.get("University");
          var action = TargetResource["::updateById::ProspectiveApartment::universities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.manageUsers
     * @header housingApiServices.ProspectiveApartment.manageUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.manageUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#manageUsers ProspectiveApartment.manageUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#manageUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries manageUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Counts manageUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.manageUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Creates a new instance in manageUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Creates a new instance in manageUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Deletes all manageUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.manageUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Delete a related item by id for manageUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for manageUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.manageUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Check the existence of manageUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for manageUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Find a related item by id for manageUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for manageUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Add a related item by id for manageUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for manageUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Remove the manageUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for manageUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.manageUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.manageUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.manageUsers
             *
             * @description
             *
             * Update a related item by id for manageUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for manageUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.manageUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::manageUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.roommateUsers
     * @header housingApiServices.ProspectiveApartment.roommateUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.roommateUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#roommateUsers ProspectiveApartment.roommateUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#roommateUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries roommateUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Counts roommateUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roommateUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Creates a new instance in roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Deletes all roommateUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Delete a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Check the existence of roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Find a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Add a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Remove the roommateUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roommateUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.roommateUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.roommateUsers
             *
             * @description
             *
             * Update a related item by id for roommateUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for roommateUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.roommateUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::roommateUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ProspectiveApartment.wishApartmentUsers
     * @header housingApiServices.ProspectiveApartment.wishApartmentUsers
     * @object
     * @description
     *
     * The object `ProspectiveApartment.wishApartmentUsers` groups methods
     * manipulating `User` instances related to `ProspectiveApartment`.
     *
     * Call {@link housingApiServices.ProspectiveApartment#wishApartmentUsers ProspectiveApartment.wishApartmentUsers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment#wishApartmentUsers
             * @methodOf housingApiServices.ProspectiveApartment
             *
             * @description
             *
             * Queries wishApartmentUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#count
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Counts wishApartmentUsers of prospectiveApartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.wishApartmentUsers.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#create
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#createMany
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Creates a new instance in wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#destroyAll
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Deletes all wishApartmentUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#destroyById
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Delete a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#exists
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Check the existence of wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.exists = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::exists::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#findById
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Find a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#link
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Add a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.link = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::link::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#unlink
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Remove the wishApartmentUsers relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.wishApartmentUsers.unlink = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::unlink::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ProspectiveApartment.wishApartmentUsers#updateById
             * @methodOf housingApiServices.ProspectiveApartment.wishApartmentUsers
             *
             * @description
             *
             * Update a related item by id for wishApartmentUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - prospectiveApartment id
             *
             *  - `fk` – `{*}` - Foreign key for wishApartmentUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.wishApartmentUsers.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::ProspectiveApartment::wishApartmentUsers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Container
 * @header housingApiServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name housingApiServices.Container#getContainers
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#createContainer
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#destroyContainer
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#getContainer
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#getFiles
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#getFile
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#removeFile
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#upload
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Container#download
             * @methodOf housingApiServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name housingApiServices.Container#modelName
        * @propertyOf housingApiServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Email
 * @header housingApiServices.Email
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Email` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Email",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Emails/:id",
          { 'id': '@id' },
          {
          }
        );




        /**
        * @ngdoc property
        * @name housingApiServices.Email#modelName
        * @propertyOf housingApiServices.Email
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Email`.
        */
        R.modelName = "Email";



        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.ApplyForFloorPlan
 * @header housingApiServices.ApplyForFloorPlan
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ApplyForFloorPlan` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ApplyForFloorPlan",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/applyForFloorPlans/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ApplyForFloorPlan.floorPlan() instead.
            "prototype$__get__floorPlan": {
              url: urlBase + "/applyForFloorPlans/:id/floorPlan",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/applyForFloorPlans/:id/user",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.findById() instead.
            "prototype$__findById__payForApplication": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/:fk",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.destroyById() instead.
            "prototype$__destroyById__payForApplication": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.updateById() instead.
            "prototype$__updateById__payForApplication": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.findById() instead.
            "prototype$__findById__invitedRoommates": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/:fk",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.destroyById() instead.
            "prototype$__destroyById__invitedRoommates": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.updateById() instead.
            "prototype$__updateById__invitedRoommates": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication() instead.
            "prototype$__get__payForApplication": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.create() instead.
            "prototype$__create__payForApplication": {
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.destroyAll() instead.
            "prototype$__delete__payForApplication": {
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.count() instead.
            "prototype$__count__payForApplication": {
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/count",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates() instead.
            "prototype$__get__invitedRoommates": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.create() instead.
            "prototype$__create__invitedRoommates": {
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.destroyAll() instead.
            "prototype$__delete__invitedRoommates": {
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.count() instead.
            "prototype$__count__invitedRoommates": {
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#create
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/applyForFloorPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#createMany
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#upsert
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/applyForFloorPlans",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#replaceOrCreate
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/applyForFloorPlans/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#upsertWithWhere
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/applyForFloorPlans/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#exists
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/applyForFloorPlans/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#findById
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/applyForFloorPlans/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#replaceById
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/applyForFloorPlans/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#find
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#findOne
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/applyForFloorPlans/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#updateAll
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/applyForFloorPlans/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#deleteById
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/applyForFloorPlans/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#count
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/applyForFloorPlans/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#prototype$updateAttributes
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/applyForFloorPlans/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#createChangeStream
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/applyForFloorPlans/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#export
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `type` – `{string}` - the exported file type.
             *
             *  - `include` – `{*=}` - the list of ids that will be exported
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "export": {
              url: urlBase + "/applyForFloorPlans/export",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#generateApplication
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `applicationId` – `{string}` - the id of application which will be generated
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "generateApplication": {
              url: urlBase + "/applyForFloorPlans/generateApplication",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#sendEmail
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `type` – `{string}` - type of file---lease or application
             *
             *  - `applicationId` – `{string}` - application id
             *
             *  - `to` – `{string=}` - email to
             *
             *  - `fileLink` – `{string=}` - the link of file to send
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "sendEmail": {
              url: urlBase + "/applyForFloorPlans/send-email",
              method: "POST",
            },

            // INTERNAL. Use User.applyForFloorPlans.findById() instead.
            "::findById::User::applyForFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyForFloorPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.applyForFloorPlans.destroyById() instead.
            "::destroyById::User::applyForFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyForFloorPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyForFloorPlans.updateById() instead.
            "::updateById::User::applyForFloorPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/applyForFloorPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.applyForFloorPlans() instead.
            "::get::User::applyForFloorPlans": {
              isArray: true,
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "GET",
            },

            // INTERNAL. Use User.applyForFloorPlans.create() instead.
            "::create::User::applyForFloorPlans": {
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "POST",
            },

            // INTERNAL. Use User.applyForFloorPlans.createMany() instead.
            "::createMany::User::applyForFloorPlans": {
              isArray: true,
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "POST",
            },

            // INTERNAL. Use User.applyForFloorPlans.destroyAll() instead.
            "::delete::User::applyForFloorPlans": {
              url: urlBase + "/users/:id/applyForFloorPlans",
              method: "DELETE",
            },

            // INTERNAL. Use User.applyForFloorPlans.count() instead.
            "::count::User::applyForFloorPlans": {
              url: urlBase + "/users/:id/applyForFloorPlans/count",
              method: "GET",
            },

            // INTERNAL. Use PayForApplication.applyForFloorPlan() instead.
            "::get::PayForApplication::applyForFloorPlan": {
              url: urlBase + "/payForApplications/:id/applyForFloorPlan",
              method: "GET",
            },

            // INTERNAL. Use InvitedRoommate.applyForFloorPlan() instead.
            "::get::InvitedRoommate::applyForFloorPlan": {
              url: urlBase + "/invitedRoommates/:id/applyForFloorPlan",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#patchOrCreate
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#updateOrCreate
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#patchOrCreateWithWhere
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#update
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#destroyById
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#removeById
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#patchAttributes
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.ApplyForFloorPlan#modelName
        * @propertyOf housingApiServices.ApplyForFloorPlan
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ApplyForFloorPlan`.
        */
        R.modelName = "ApplyForFloorPlan";


            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#floorPlan
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Fetches belongsTo relation floorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlan = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::ApplyForFloorPlan::floorPlan"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#user
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ApplyForFloorPlan::user"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ApplyForFloorPlan.payForApplication
     * @header housingApiServices.ApplyForFloorPlan.payForApplication
     * @object
     * @description
     *
     * The object `ApplyForFloorPlan.payForApplication` groups methods
     * manipulating `PayForApplication` instances related to `ApplyForFloorPlan`.
     *
     * Call {@link housingApiServices.ApplyForFloorPlan#payForApplication ApplyForFloorPlan.payForApplication()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#payForApplication
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Queries payForApplication of applyForFloorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R.payForApplication = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::get::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#count
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Counts payForApplication of applyForFloorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.payForApplication.count = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::count::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#create
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Creates a new instance in payForApplication of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R.payForApplication.create = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::create::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#createMany
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Creates a new instance in payForApplication of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R.payForApplication.createMany = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::createMany::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#destroyAll
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Deletes all payForApplication of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.payForApplication.destroyAll = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::delete::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#destroyById
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Delete a related item by id for payForApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for payForApplication
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.payForApplication.destroyById = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::destroyById::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#findById
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Find a related item by id for payForApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for payForApplication
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R.payForApplication.findById = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::findById::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.payForApplication#updateById
             * @methodOf housingApiServices.ApplyForFloorPlan.payForApplication
             *
             * @description
             *
             * Update a related item by id for payForApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for payForApplication
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R.payForApplication.updateById = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::updateById::ApplyForFloorPlan::payForApplication"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.ApplyForFloorPlan.invitedRoommates
     * @header housingApiServices.ApplyForFloorPlan.invitedRoommates
     * @object
     * @description
     *
     * The object `ApplyForFloorPlan.invitedRoommates` groups methods
     * manipulating `InvitedRoommate` instances related to `ApplyForFloorPlan`.
     *
     * Call {@link housingApiServices.ApplyForFloorPlan#invitedRoommates ApplyForFloorPlan.invitedRoommates()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan#invitedRoommates
             * @methodOf housingApiServices.ApplyForFloorPlan
             *
             * @description
             *
             * Queries invitedRoommates of applyForFloorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R.invitedRoommates = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::get::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#count
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Counts invitedRoommates of applyForFloorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.invitedRoommates.count = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::count::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#create
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Creates a new instance in invitedRoommates of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R.invitedRoommates.create = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::create::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#createMany
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Creates a new instance in invitedRoommates of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R.invitedRoommates.createMany = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::createMany::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#destroyAll
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Deletes all invitedRoommates of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invitedRoommates.destroyAll = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::delete::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#destroyById
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Delete a related item by id for invitedRoommates.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for invitedRoommates
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invitedRoommates.destroyById = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::destroyById::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#findById
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Find a related item by id for invitedRoommates.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for invitedRoommates
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R.invitedRoommates.findById = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::findById::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.ApplyForFloorPlan.invitedRoommates#updateById
             * @methodOf housingApiServices.ApplyForFloorPlan.invitedRoommates
             *
             * @description
             *
             * Update a related item by id for invitedRoommates.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - applyForFloorPlan id
             *
             *  - `fk` – `{*}` - Foreign key for invitedRoommates
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R.invitedRoommates.updateById = function() {
          var TargetResource = $injector.get("InvitedRoommate");
          var action = TargetResource["::updateById::ApplyForFloorPlan::invitedRoommates"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.PayForApplication
 * @header housingApiServices.PayForApplication
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PayForApplication` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PayForApplication",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/payForApplications/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use PayForApplication.applyForFloorPlan() instead.
            "prototype$__get__applyForFloorPlan": {
              url: urlBase + "/payForApplications/:id/applyForFloorPlan",
              method: "GET",
            },

            // INTERNAL. Use PayForApplication.transaction.findById() instead.
            "prototype$__findById__transaction": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/payForApplications/:id/transaction/:fk",
              method: "GET",
            },

            // INTERNAL. Use PayForApplication.transaction.destroyById() instead.
            "prototype$__destroyById__transaction": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/payForApplications/:id/transaction/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PayForApplication.transaction.updateById() instead.
            "prototype$__updateById__transaction": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/payForApplications/:id/transaction/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PayForApplication.transaction() instead.
            "prototype$__get__transaction": {
              isArray: true,
              url: urlBase + "/payForApplications/:id/transaction",
              method: "GET",
            },

            // INTERNAL. Use PayForApplication.transaction.create() instead.
            "prototype$__create__transaction": {
              url: urlBase + "/payForApplications/:id/transaction",
              method: "POST",
            },

            // INTERNAL. Use PayForApplication.transaction.destroyAll() instead.
            "prototype$__delete__transaction": {
              url: urlBase + "/payForApplications/:id/transaction",
              method: "DELETE",
            },

            // INTERNAL. Use PayForApplication.transaction.count() instead.
            "prototype$__count__transaction": {
              url: urlBase + "/payForApplications/:id/transaction/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#create
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/payForApplications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#createMany
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/payForApplications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#upsert
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/payForApplications",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#replaceOrCreate
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/payForApplications/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#upsertWithWhere
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/payForApplications/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#exists
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/payForApplications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#findById
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/payForApplications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#replaceById
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/payForApplications/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#find
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/payForApplications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#findOne
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/payForApplications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#updateAll
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/payForApplications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#deleteById
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/payForApplications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#count
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/payForApplications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#prototype$updateAttributes
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/payForApplications/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#createChangeStream
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/payForApplications/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#payWithStripe
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `payForApplicationId` – `{string}` - id -- pay for application
             *
             *  - `userId` – `{string}` - user id -- who should make this payment
             *
             *  - `stripeToken` – `{string}` - stripe token -- generated from checkout.js as a one time use stripe customer tonken
             *
             *  - `chargeAmount` – `{number}` - actually charging amount - total amount
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `charge_message` – `{string=}` -
             */
            "payWithStripe": {
              url: urlBase + "/payForApplications/payWithStripe",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#payWithCitcon
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `payForApplicationId` – `{string}` - id -- pay for application
             *
             *  - `userId` – `{string}` - user id -- who should make this payment
             *
             *  - `vendorName` – `{string}` - vendor name -- wechatpay or alipay
             *
             *  - `chargeAmount` – `{number}` - actually charging amount - total amount
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `qr_link` – `{string=}` -
             */
            "payWithCitcon": {
              url: urlBase + "/payForApplications/payWithCitcon",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#listenCitconIpn
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string=}` - Citcon Notification -- qr id
             *
             *  - `amount` – `{string}` - Citcon Notification -- amount
             *
             *  - `status` – `{string}` - Citcon Notification -- status
             *
             *  - `currency` – `{string}` - Citcon Notification -- currency
             *
             *  - `time` – `{string}` - Citcon Notification -- time
             *
             *  - `reference` – `{string}` - Citcon Notification -- reference(payForApplicationId)
             *
             *  - `notify_id` – `{string=}` - Citcon Notification -- notify_id
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `received` – `{string=}` -
             */
            "listenCitconIpn": {
              url: urlBase + "/payForApplications/payWithCitconIpn",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#payWithCitconRefund
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `payForApplicationId` – `{string}` - id -- pay for application
             *
             *  - `userId` – `{string}` - user id -- who should make this payment
             *
             *  - `refundAmount` – `{number}` - refundAmount -- refund amount
             *
             *  - `transactionId` – `{string}` - transactionId - store in citcon DB and our DB as chargeId
             *
             *  - `refundReason` – `{string}` - refundReason - reason for making this refund
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `qr_link` – `{string=}` -
             */
            "payWithCitconRefund": {
              url: urlBase + "/payForApplications/payWithCitconRefund",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.findById() instead.
            "::findById::ApplyForFloorPlan::payForApplication": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/:fk",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.destroyById() instead.
            "::destroyById::ApplyForFloorPlan::payForApplication": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.updateById() instead.
            "::updateById::ApplyForFloorPlan::payForApplication": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication() instead.
            "::get::ApplyForFloorPlan::payForApplication": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.create() instead.
            "::create::ApplyForFloorPlan::payForApplication": {
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.createMany() instead.
            "::createMany::ApplyForFloorPlan::payForApplication": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.destroyAll() instead.
            "::delete::ApplyForFloorPlan::payForApplication": {
              url: urlBase + "/applyForFloorPlans/:id/payForApplication",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.payForApplication.count() instead.
            "::count::ApplyForFloorPlan::payForApplication": {
              url: urlBase + "/applyForFloorPlans/:id/payForApplication/count",
              method: "GET",
            },

            // INTERNAL. Use Transaction.payForApplication() instead.
            "::get::Transaction::payForApplication": {
              url: urlBase + "/transactions/:id/payForApplication",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#patchOrCreate
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#updateOrCreate
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#patchOrCreateWithWhere
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#update
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#destroyById
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#removeById
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#patchAttributes
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.PayForApplication#modelName
        * @propertyOf housingApiServices.PayForApplication
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PayForApplication`.
        */
        R.modelName = "PayForApplication";


            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#applyForFloorPlan
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Fetches belongsTo relation applyForFloorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlan = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::get::PayForApplication::applyForFloorPlan"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name housingApiServices.PayForApplication.transaction
     * @header housingApiServices.PayForApplication.transaction
     * @object
     * @description
     *
     * The object `PayForApplication.transaction` groups methods
     * manipulating `Transaction` instances related to `PayForApplication`.
     *
     * Call {@link housingApiServices.PayForApplication#transaction PayForApplication.transaction()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication#transaction
             * @methodOf housingApiServices.PayForApplication
             *
             * @description
             *
             * Queries transaction of payForApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R.transaction = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::get::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#count
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Counts transaction of payForApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.transaction.count = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::count::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#create
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Creates a new instance in transaction of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R.transaction.create = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::create::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#createMany
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Creates a new instance in transaction of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R.transaction.createMany = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::createMany::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#destroyAll
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Deletes all transaction of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.transaction.destroyAll = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::delete::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#destroyById
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Delete a related item by id for transaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `fk` – `{*}` - Foreign key for transaction
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.transaction.destroyById = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::destroyById::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#findById
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Find a related item by id for transaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `fk` – `{*}` - Foreign key for transaction
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R.transaction.findById = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::findById::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.PayForApplication.transaction#updateById
             * @methodOf housingApiServices.PayForApplication.transaction
             *
             * @description
             *
             * Update a related item by id for transaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - payForApplication id
             *
             *  - `fk` – `{*}` - Foreign key for transaction
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R.transaction.updateById = function() {
          var TargetResource = $injector.get("Transaction");
          var action = TargetResource["::updateById::PayForApplication::transaction"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.Transaction
 * @header housingApiServices.Transaction
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Transaction` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Transaction",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/transactions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Transaction.payForApplication() instead.
            "prototype$__get__payForApplication": {
              url: urlBase + "/transactions/:id/payForApplication",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#create
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/transactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#createMany
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/transactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#upsert
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/transactions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#replaceOrCreate
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/transactions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#upsertWithWhere
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/transactions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#exists
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/transactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#findById
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/transactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#replaceById
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/transactions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#find
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/transactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#findOne
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/transactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#updateAll
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/transactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#deleteById
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/transactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#count
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/transactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#prototype$updateAttributes
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - transaction id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/transactions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#createChangeStream
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/transactions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use PayForApplication.transaction.findById() instead.
            "::findById::PayForApplication::transaction": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/payForApplications/:id/transaction/:fk",
              method: "GET",
            },

            // INTERNAL. Use PayForApplication.transaction.destroyById() instead.
            "::destroyById::PayForApplication::transaction": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/payForApplications/:id/transaction/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PayForApplication.transaction.updateById() instead.
            "::updateById::PayForApplication::transaction": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/payForApplications/:id/transaction/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PayForApplication.transaction() instead.
            "::get::PayForApplication::transaction": {
              isArray: true,
              url: urlBase + "/payForApplications/:id/transaction",
              method: "GET",
            },

            // INTERNAL. Use PayForApplication.transaction.create() instead.
            "::create::PayForApplication::transaction": {
              url: urlBase + "/payForApplications/:id/transaction",
              method: "POST",
            },

            // INTERNAL. Use PayForApplication.transaction.createMany() instead.
            "::createMany::PayForApplication::transaction": {
              isArray: true,
              url: urlBase + "/payForApplications/:id/transaction",
              method: "POST",
            },

            // INTERNAL. Use PayForApplication.transaction.destroyAll() instead.
            "::delete::PayForApplication::transaction": {
              url: urlBase + "/payForApplications/:id/transaction",
              method: "DELETE",
            },

            // INTERNAL. Use PayForApplication.transaction.count() instead.
            "::count::PayForApplication::transaction": {
              url: urlBase + "/payForApplications/:id/transaction/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#patchOrCreate
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#updateOrCreate
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#patchOrCreateWithWhere
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#update
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#destroyById
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#removeById
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#patchAttributes
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - transaction id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Transaction` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.Transaction#modelName
        * @propertyOf housingApiServices.Transaction
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Transaction`.
        */
        R.modelName = "Transaction";


            /**
             * @ngdoc method
             * @name housingApiServices.Transaction#payForApplication
             * @methodOf housingApiServices.Transaction
             *
             * @description
             *
             * Fetches belongsTo relation payForApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - transaction id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PayForApplication` object.)
             * </em>
             */
        R.payForApplication = function() {
          var TargetResource = $injector.get("PayForApplication");
          var action = TargetResource["::get::Transaction::payForApplication"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.InvitedRoommate
 * @header housingApiServices.InvitedRoommate
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InvitedRoommate` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "InvitedRoommate",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/invitedRoommates/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use InvitedRoommate.applyForFloorPlan() instead.
            "prototype$__get__applyForFloorPlan": {
              url: urlBase + "/invitedRoommates/:id/applyForFloorPlan",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#create
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/invitedRoommates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#createMany
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/invitedRoommates",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#upsert
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/invitedRoommates",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#replaceOrCreate
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/invitedRoommates/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#upsertWithWhere
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/invitedRoommates/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#exists
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/invitedRoommates/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#findById
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/invitedRoommates/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#replaceById
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/invitedRoommates/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#find
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/invitedRoommates",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#findOne
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/invitedRoommates/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#updateAll
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/invitedRoommates/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#deleteById
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/invitedRoommates/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#count
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/invitedRoommates/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#prototype$updateAttributes
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - invitedRoommate id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/invitedRoommates/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#createChangeStream
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/invitedRoommates/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.findById() instead.
            "::findById::ApplyForFloorPlan::invitedRoommates": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/:fk",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.destroyById() instead.
            "::destroyById::ApplyForFloorPlan::invitedRoommates": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.updateById() instead.
            "::updateById::ApplyForFloorPlan::invitedRoommates": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates() instead.
            "::get::ApplyForFloorPlan::invitedRoommates": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "GET",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.create() instead.
            "::create::ApplyForFloorPlan::invitedRoommates": {
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.createMany() instead.
            "::createMany::ApplyForFloorPlan::invitedRoommates": {
              isArray: true,
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "POST",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.destroyAll() instead.
            "::delete::ApplyForFloorPlan::invitedRoommates": {
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates",
              method: "DELETE",
            },

            // INTERNAL. Use ApplyForFloorPlan.invitedRoommates.count() instead.
            "::count::ApplyForFloorPlan::invitedRoommates": {
              url: urlBase + "/applyForFloorPlans/:id/invitedRoommates/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#patchOrCreate
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#updateOrCreate
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#patchOrCreateWithWhere
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#update
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#destroyById
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#removeById
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#patchAttributes
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - invitedRoommate id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InvitedRoommate` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.InvitedRoommate#modelName
        * @propertyOf housingApiServices.InvitedRoommate
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InvitedRoommate`.
        */
        R.modelName = "InvitedRoommate";


            /**
             * @ngdoc method
             * @name housingApiServices.InvitedRoommate#applyForFloorPlan
             * @methodOf housingApiServices.InvitedRoommate
             *
             * @description
             *
             * Fetches belongsTo relation applyForFloorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - invitedRoommate id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyForFloorPlan` object.)
             * </em>
             */
        R.applyForFloorPlan = function() {
          var TargetResource = $injector.get("ApplyForFloorPlan");
          var action = TargetResource["::get::InvitedRoommate::applyForFloorPlan"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name housingApiServices.WishList
 * @header housingApiServices.WishList
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `WishList` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "WishList",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/wishLists/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use WishList.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/wishLists/:id/user",
              method: "GET",
            },

            // INTERNAL. Use WishList.apartment() instead.
            "prototype$__get__apartment": {
              url: urlBase + "/wishLists/:id/apartment",
              method: "GET",
            },

            // INTERNAL. Use WishList.floorPlan() instead.
            "prototype$__get__floorPlan": {
              url: urlBase + "/wishLists/:id/floorPlan",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#create
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/wishLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#createMany
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/wishLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#upsert
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/wishLists",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#replaceOrCreate
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/wishLists/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#upsertWithWhere
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/wishLists/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#exists
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/wishLists/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#findById
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/wishLists/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#replaceById
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/wishLists/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#find
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/wishLists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#findOne
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/wishLists/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#updateAll
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/wishLists/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#deleteById
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/wishLists/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#count
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/wishLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#prototype$updateAttributes
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - wishList id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/wishLists/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#createChangeStream
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/wishLists/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name housingApiServices.WishList#patchOrCreate
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#updateOrCreate
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#patchOrCreateWithWhere
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#update
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#destroyById
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#removeById
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#patchAttributes
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - wishList id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WishList` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name housingApiServices.WishList#modelName
        * @propertyOf housingApiServices.WishList
        * @description
        * The name of the model represented by this $resource,
        * i.e. `WishList`.
        */
        R.modelName = "WishList";


            /**
             * @ngdoc method
             * @name housingApiServices.WishList#user
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - wishList id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::WishList::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#apartment
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Fetches belongsTo relation apartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - wishList id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Apartment` object.)
             * </em>
             */
        R.apartment = function() {
          var TargetResource = $injector.get("Apartment");
          var action = TargetResource["::get::WishList::apartment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name housingApiServices.WishList#floorPlan
             * @methodOf housingApiServices.WishList
             *
             * @description
             *
             * Fetches belongsTo relation floorPlan.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - wishList id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FloorPlan` object.)
             * </em>
             */
        R.floorPlan = function() {
          var TargetResource = $injector.get("FloorPlan");
          var action = TargetResource["::get::WishList::floorPlan"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name housingApiServices.LoopBackResourceProvider
   * @header housingApiServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#setUrlBase
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name housingApiServices.LoopBackResourceProvider#getUrlBase
     * @methodOf housingApiServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
